<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <title>An SVG Primer for Today's Browsers</title>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
  <style type="text/css" media="screen">
  /*<![CDATA[*/
  .center {text-align:center;}		/* Original style from DD */

  /* PA defined styles */
  table {							/* All tables are collapsed and centred. */
    border-collapse: collapse;
	margin:0 auto;
  }
  th, td {							/* all table cells have 1px borders */
    border:1px solid black;
    padding:1em;
  }

  table.example {					/* SVG examples are shown in "example class" tables. This is the default width. Can be overidden inline where necessary */
    width:40em;
  }

  table caption {			/* captions are below the table and have a grey background inline with DD original */
	caption-side: bottom;
    padding: 0.2em 0;
  }

  div.imgHolder {					/* stand alone images are centred. Width of holding div is set inline and is the smae as the width of the image */
    margin: 0 auto;
  }

  table caption, div.imgHolder p {	/* Caption style for tables and images */
	font-size: smaller;
	font-weight: bold;
	font-style:italic;
	text-align: center;
  }

  p.codeExample {					/* code examples in the text displayed thus */
    background-color: #ddd;
    border: 1px solid black;
    padding: 0.5em 0 0.5em 2em;
    overflow:auto;
	font-family: monospace;
  }

  p.codeExample span {			 	/* We can indent a line of code by putting it in a span */
	padding-left:2em;
  }

  ol.lower-alpha {
	list-style-type: lower-alpha;
  }

  .paEdit, .paQ, .paDel {
    background-color:#fcc;
  }

  .paQ {
    border: medium solid red;
    font-size:larger;
    padding: 0.5em;
  }

  .paDel {
    text-decoration: line-through;
  }
  
  .footnoteanc {
    text-decoration: none;
    color: blue;
    font-weight: bold;
    background-color: palegoldenrod;
    font-size: 0.9em;
  }
  
  .footnoteanc, .footnotesym {
    text-decoration: none;
    color: blue;
    font-weight: bold;
    background-color: palegoldenrod;
  }
  
  .footnoteanc {
    font-size: 0.9em;
  }

  object {
	font-family: serif;
	font-size:smaller;
	color:red;
  }

  /*]]>*/
  </style>
  <link rel="stylesheet" href="http://www.w3.org/StyleSheets/TR/W3C-ED"/>
    
</head>
<body>
 <div class="head">
<a href="http://www.w3.org/"><img height="48" width="72" alt="W3C" src="http://www.w3.org/Icons/w3c_home"/></a>
<h1>An SVG Primer for Today's Browsers</h1>
<h2>W3C Working Draft &mdash; September 2010</h2>
<dl>
  <dt>This version:</dt>
  <dd><a href="http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html">http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html</a></dd>
  
  <dt>Latest version:</dt>
  <dd><a href="http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html">http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html</a></dd>
  
  <dt>Previous version:</dt>
  <dd><a href="http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html">http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html</a></dd>

  <dt>Editor:</dt>
    <dd>David Dailey, Slippery Rock University</dd>
  </dl>

<p class="copyright"><a href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> &copy; 2010 
<a href="http://www.w3.org/"><acronym title="World Wide Web Consortium">W3C</acronym></a><sup>&reg;</sup> 
(<a href="http://www.csail.mit.edu/"><acronym title="Massachusetts Institute of Technology">MIT</acronym></a>, 
<a href="http://www.ercim.org/"><acronym title="European Research Consortium for Informatics and Mathematics">ERCIM</acronym></a>, 
<a href="http://www.keio.ac.jp/">Keio</a>), All Rights Reserved. W3C <a href="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability</a>, 
<a href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">trademark</a> and <a href="http://www.w3.org/Consortium/Legal/copyright-documents">document 
use</a> rules apply.</p>
<hr />
</div>




<h2 id="abstract">Abstract</h2>
<p>Scalable Vector Graphics (SVG) is a Web graphics language.  SVG defines markup and APIs for creating static or dynamic images, capable of interactivity and animation, including various graphical effects.  It can be styled with CSS, and combined with HTML.  This document provides an introduction to SVG, with examples and explanations.</p>

  <div id="sotd">
    <h2 id="status">Status of this document</h2>

    <p><em>This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current W3C publications and the latest revision of this technical report can be found in the <a href="http://www.w3.org/TR/" shape="rect">W3C technical reports index</a> at http://www.w3.org/TR/.</em></p>

    <p>This is a Public Working Draft, designed to aid discussion and solicit feedback. It was developed by the 
    <a href="http://www.w3.org/Graphics/SVG/IG/">SVG Interest Group</a>, which expects to advance this Working 
    Draft to become an Interest Group Note.</p>

    <p>Please send comments about this document to <a href="mailto:public-svg-ig@w3.org">public-svg-ig@w3.org</a> (with <a href="http://lists.w3.org/Archives/Public/public-svg-ig/" shape="rect">public archive</a>).</p>
    <p>Publication as a Working Draft does not imply endorsement by the W3C Membership. This is a draft document and may be updated, replaced or obsoleted by other documents at any time. It is inappropriate to cite this document as other than work in progress.</p>

    <p> This document was produced by a group operating under the <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February 2004 W3C Patent Policy</a>. The group does not expect this document to become a W3C Recommendation. W3C maintains a <a rel="disclosure" href="http://www.w3.org/2004/01/pp-impl/40243/status">public list of any patent disclosures</a> made in connection with the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a patent which the individual believes contains <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential">Essential Claim(s)</a> must disclose the information in accordance with <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section 6 of the W3C Patent Policy</a>.</p>
    
    <p><strong>This document is a work in progress, and is still under review.  It is based on material from 2006, and some portions may be out of date.  Please report any errors to the <a href="http://www.w3.org/Graphics/SVG/IG/">SVG Interest Group</a> or to the editor.</strong></p>
  </div>

    <h2 id="Overview-table-of-contents"><a id="Overview-contents">Table of Contents</a></h2>
      <div id="toc">
        <ol>
          <li>
            <a href="#preface">Preface</a>
          </li>
          <li>
            <a href="#overview">Chapter I: Overview</a>
            <ol>
              <li>
                <a href="#laconism">Laconism</a>
              </li>
              <li>
                <a href="#polemic">Polemic</a>
              </li>
              <li>
                <a href="#history">Brief History</a>
              </li>
              <li>
                <a href="#advantages">Advantages of SVG</a>
              </li>
              <li>
                <a href="#examples">Brief examples</a>
              </li>
              <li>
                <a href="#get_started">Getting started</a>
                <ol>
                  <li>
                    <a href="#get_viewer">Getting an SVG viewer (web browser)</a>
                  </li>
                  <li>
                    <a href="#test_file">Write and test a small SVG file</a>
                  </li>
                  <li>
                    <a href="#test_server">Test it on your web server</a>
                  </li>
                  <li>
                    <a href="#read_book">finish reading this book</a>
                  </li>
                </ol>
              </li>
            </ol>
          </li>
          <li>
            <a href="#SVG_Basics">Chapter II: SVG Basics</a>
            <ol>
              <li>
                <a href="#coordinate">The coordinate system</a>
              </li>
              <li>
                <a href="#simple_objects">Simple objects</a>
                <ol>
                  <li>
                    <a href="#colors">Colors and drawing order</a>
                  </li>
                  <li>
                    <a href="#line">line</a>
                  </li>
                  <li>
                    <a href="#rect">rect</a>
                  </li>
                  <li>
                    <a href="#circle">circle</a>
                  </li>
                  <li>
                    <a href="#ellipse">ellipse</a>
                  </li>
                  <li>
                    <a href="#path">&lt;path&gt;</a>
                    <ol>
                      <li>
                        <a href="#path_M">Paths: M and L</a>
                      </li>
                      <li>
                        <a href="#path_Q">Paths: Q &mdash; Quadratic B&eacute;zier curves</a>
                      </li>
                      <li>
                        <a href="#path_C">Paths: C &mdash; Cubic B&eacute;zier curves</a>
                      </li>
                      <li>
                        <a href="#path_A">Paths: A &mdash; Elliptical arc</a>
                      </li>
                    </ol>
                  </li>
                  <li>
                    <a href="#opacity">opacity</a>
                  </li>
                  <li>
                    <a href="#image">image</a>
                  </li>
                  <li>
                    <a href="#text">text</a>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#operations">Operations: Grouping, Reusing, Scaling, Translation and Rotation</a>
                <ol>
                  <li>
                    <a href="#translate">Transform/translate</a>
                  </li>
                  <li>
                    <a href="#rotate">Transform/rotate</a>
                  </li>
                  <li>
                    <a href="#scale">Transform/scale</a>
                  </li>
                  <li>
                    <a href="#multiple">multiple transformations and more</a>
                  </li>
                  <li>
                    <a href="#grouping">grouping</a>
                    <ol>
                      <li>
                        <a href="#inherit">Inheriting attributes from the group</a>
                      </li>
                    </ol>
                  </li>
                  <li>
                    <a href="#use">use</a>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#SVG_web">putting SVG in a web page</a>
              </li>
            </ol>
          </li>
          <li>
            <a href="#fancy">Chapter III: Fancier SVG Effects</a>
            <ol>
              <li>
                <a href="#gradients">Gradients</a>
                <ol>
                  <li>
                    <a href="#stop_stop-color">&lt;stop&gt; and stop-color</a>
                  </li>
                  <li>
                    <a href="#more_stops">More &lt;stop&gt;s</a>
                  </li>
                  <li>
                    <a href="#angles_and_centers">Varying angles and centers</a>
                  </li>
                  <li>
                    <a href="#stop-opacity">Stop-opacity</a>
                  </li>
                  <li>
                    <a href="#spreadMethod">spreadMethod</a>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#patterns">Patterns</a>
              </li>
              <li>
                <a href="#masks_clips">Masks and clip-paths</a>
                <ol>
                  <li>
                    <a href="#clipPath">the &lt;clipPath&gt;</a>
                  </li>
                  <li>
                    <a href="#mask">The &lt;mask&gt;</a>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#filters">Filters: blurring, distortion, etc.</a>
                <ol>
                  <li>
                    <a href="#filter_basic">The basic &lt;filter&gt;</a>
                  </li>
                  <li>
                    <a href="#filter_primitives">Simpler filter primitives</a>
                  </li>
                  <li>
                    <a href="#feGaussianBlur">feGaussianBlur</a>
                  </li>
                  <li>
                    <a href="#feColorMatrix">feColorMatrix</a>
                  </li>
                  <li>
                    <a href="#feConvolveMatrix">feConvolveMatrix</a>
                  </li>
                  <li>
                    <a href="#feComponentTransfer">feComponentTransfer</a>
                  </li>
                  <li>
                    <a href="#feMorphology">feMorphology</a>
                  </li>
                  <li>
                    <a href="#standalone_filter_primitives">Filter primitives that stand alone</a>
                  </li>
                  <li>
                    <a href="#feFlood">feFlood</a>
                  </li>
                  <li>
                    <a href="#feImage">feImage</a>
                  </li>
                  <li>
                    <a href="#feTurbulence">feTurbulence</a>
                  </li>
                  <li>
                    <a href="#feDiffuseLighting_feSpecularLighting">feDiffuseLighting and feSpecularLighting</a>
                  </li>
                  <li>
                    <a href="#filter_utility">Utility filters (feTile and feOffset)</a>
                  </li>
                  <li>
                    <a href="#feTile">feTile</a>
                  </li>
                  <li>
                    <a href="#feOffset">feOffset</a>
                  </li>
                  <li>
                    <a href="#Combining_Filter_Primitives">Combining Filter Primitives</a>
                  </li>
                  <li>
                    <a href="#feMerge">feMerge</a>
                  </li>
                  <li>
                    <a href="#Filtering_backgrounds">Filtering graphics along with their backgrounds</a>
                  </li>
                  <li>
                    <a href="#feBlend">feBlend</a>
                  </li>
                  <li>
                    <a href="#feComposite">feComposite</a>
                  </li>
                  <li>
                    <a href="#feDisplacementMap">feDisplacementMap</a>
                  </li>
                </ol>
              </li>
            </ol>
          </li>
          <li>
            <a href="#SMIL_animations">Chapter IV: SMIL animations embedded in SVG</a>
            <ol>
              <li>
                <a href="#SMIL_overview">Overview of SMIL</a>
              </li>
              <li>
                <a href="#smil_vs_js">Comparison with JavaScript animation</a>
              </li>
              <li>
                <a href="#basic_smil">Basic SMIL animation</a>
              </li>
              <li>
                <a href="#timing">Multiple animations and timing</a>
                <ol>
                  <li>
                    <a href="#keyTimes">keyTimes</a>
                  </li>
                  <li>
                    <a href="#keySplines">keySplines</a>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#animation_varieties">Varieties of animation</a>
              </li>
              <li>
                <a href="#multi-valued_animation">animation of multi-valued attributes</a>
              </li>
              <li>
                <a href="#follow_paths">Following paths</a>
              </li>
              <li>
                <a href="#transformation_animation">Animation of transformations</a>
              </li>
              <li>
                <a href="#non-numeric_animation">Animation of non-numeric attributes</a>
              </li>
              <li>
                <a href="#start_animation">Starting an animation, with time or events, and using &lt;set&gt; to set the value of an attribute</a>
              </li>
              <li>
                <a href="#stopping_animation">Stopping an animation</a>
              </li>
            </ol>
          </li>
          <li>
            <a href="#JavaScript">Chapter V: Dynamic SVG and JavaScript</a>
            <ol>
              <li>
                <a href="#why_script">Why scripting?</a>
              </li>
              <li>
                <a href="#Getting_started">Getting started</a>
              </li>
              <li>
                <a href="#interactivity">Simple interactivity</a>
                <ol>
                  <li>
                    <a href="#simple_events">simple events</a>
                  </li>
                  <li>
                    <a href="#CDATA">CDATA and &lt;script&gt;</a>
                  </li>
                  <li>
                    <a href="#getElementById">getElementById, id, nodeName, and other properties of SVG nodes</a>
                  </li>
                  <li>
                    <a href="#getAttribute">getAttribute and getAttributeNS</a>
                  </li>
                  <li>
                    <a href="#setAttribute">setAttribute and setAttributeNS</a>
                  </li>
                  <li>
                    <a href="#xlink">Changing xlink attributes</a>
                  </li>
                  <li>
                    <a href="#target">evt.target and evt.currentTarget</a>
                  </li>
                  <li>
                    <a href="#changing_text">Changing text</a>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#new_objects">Creating new SVG objects</a>
                <ol>
                  <li>
                    <a href="#create_append">createElementNS and appendChild</a>
                  </li>
                  <li>
                    <a href="#createTextNode">createTextNode</a>
                  </li>
                  <li>
                    <a href="#cloneNode">cloneNode</a>
                  </li>
                  <li>
                    <a href="#other_methods">Other methods for managing new content</a>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#stopPropogation">More about events and .stopPropogation</a>
              </li>
              <li>
                <a href="#deleting_removing">Deleting or removing objects</a>
              </li>
              <li>
                <a href="#XML_DOM">XML and The SVG DOM</a>
                <ol>
                  <li>
                    <a href="#firstChild">firstChild</a>
                  </li>
                  <li>
                    <a href="#nextSibling">nextSibling</a>
                  </li>
                  <li>
                    <a href="#childNodes">childNodes</a>
                  </li>
                  <li>
                    <a href="#getElementsByTagNameNS">getElementsByTagNameNS</a>
                  </li>
                  <li>
                    <a href="#parentNode">parentNode</a>
                  </li>
                  <li>
                    <a href="#attributes">node.attributes</a>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#special_functions">Special functions</a>
                <ol>
                  <li>
                    <a href="#getBBox">getBBox()</a>
                  </li>
                  <li>
                    <a href="#getTotalLength">getTotalLength() and getPointAtLength()</a>
                  </li>
                  <li>
                    <a href="#text_methods">Various text methods</a>
                  </li>
                  <li>
                    <a href="#getCTM">getCTM()</a>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#SMIL_javascript">SMIL to JavaScript event passing</a>
                <ol>
                  <li>
                    <a href="#onend">onend (onbegin)</a>
                  </li>
                  <li>
                    <a href="#beginElement">beginElement() (and endElement())</a>
                  </li>
                  <li>
                    <a href="#pauseAnimations">pauseAnimations (and unpauseAnimations)</a>
                  </li>
                </ol>
              </li>
            </ol>
          </li>
          <li>
            <a href="#SVG_HTML">Chapter VI: SVG and HTML</a>
            <ol>
              <li>
                <a href="#why_html">Why HTML?</a>
                <ol>
                  <li>
                    <a href="#inertia">Inertia</a>
                  </li>
                  <li>
                    <a href="#functionality">Functionality</a>
                    <ol>
                      <li>
                        <a href="#radio">input type="radio"&gt; and &lt;input type="checkbox"</a>
                      </li>
                      <li>
                        <a href="#select">select</a>
                      </li>
                      <li>
                        <a href="#text">input type="text"&gt; and &lt;input type="password"&gt; &lt;textarea</a>
                      </li>
                      <li>
                        <a href="#file">input type="file"</a>
                      </li>
                    </ol>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#SVG_in_HTML">Embedding SVG in HTML documents</a>
                <ol>
                  <li>
                    <a href="#embed">&lt;embed&gt;</a>
                  </li>
                  <li>
                    <a href="#frame">&lt;frame&gt; and &lt;iframe&gt;</a>
                  </li>
                  <li>
                    <a href="#object">&lt;object&gt;</a>
                  </li>
                  <li>
                    <a href="#SVG_image">&lt;image&gt;</a>
                  </li>
                  <li>
                    <a href="#inline">in-line content</a>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#scripting_HTML">Scripting between HTML and SVG</a>
                <ol>
                  <li>
                    <a href="#functions_HTML_SVG">Calling Javascript functions in HTML documents from events in SVG DOM</a>
                  </li>
                  <li>
                    <a href="#functions_SVG_HTML">Using Javascript functions in HTML to create or modify SVG objects</a>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#joint_use">An illustration of the joint use of HTML and SVG</a>
              </li>
            </ol>
          </li>
          <li>
            <a href="#directions">Chapter VII: Directions for Development</a>
            <ol>
              <li>
                <a href="#SVG_acceptance">SVG's acceptance</a>
              </li>
              <li>
                <a href="#SVG_progress">SVG's progress</a>
              </li>
              <li>
                <a href="#SVG_futures">What don't we see yet in SVG 1.1 or SVG1.2 that would be nice?</a>
              </li>
              <li>
                <a href="#SVG_world">Changes in the world around SVG</a>
                <ol>
                  <li>
                    <a href="#Semantic_web">The Semantic Web</a>
                  </li>
                  <li>
                    <a href="#XPATH">XPath</a>
                  </li>
                  <li>
                    <a href="#XSLT">XSLT</a>
                  </li>
                  <li>
                    <a href="#XForms">XForms</a>
                  </li>
                  <li>
                    <a href="#AJAX">AJAX</a>
                  </li>
                  <li>
                    <a href="#XBL">XBL, sXBL, XUL, RDF, OWL</a>
                  </li>
                  <li>
                    <a href="#other_developments">Other developments</a>
                  </li>
                </ol>
              </li>
              <li>
                <a href="#future_large">The future at large</a>
              </li>
            </ol>
          </li>
          <li>
            <a href="#HTML_basics">Appendix I: HTML basics</a>
          </li>
          <li>
            <a href="#JavaScript_basics">Appendix II: JavaScript basics</a>
          </li>
          <li>
            <a href="#Afterword">Afterword</a>
          </li>
        </ol>
      </div>
      <h2 id="preface">Preface</h2>
      <p>This is neither an introductory text book, nor a reference manual. Instead, it is aimed so that any of these people:</p>
      <ul>
        <li>an upper division undergraduate student with a few semesters under her belt of computing coursework;</li>
        <li>a professional web programmer;</li>
        <li>a graphic designer with a strong technical bent;</li>
      </ul>
      <p>or</p>
      <ul>
        <li>a science teacher who wants to build graphical presentations</li>
      </ul>
      <p>might be able to pick it up and then do any or all of the following:</p>
      <ul>
        <li>work through it over the course of a few days, developing a basic understanding;</li>
        <li>be able, in a week or two, to make a decent graphical front-end to a web site that demands innovative and interactive graphics;</li>
        <li>at any time during the next year or two of work with SVG, be able to pick up the book, look up a new topic, and with little effort, find an illustration of what they'd like to know about and with a minimum of reading, to be able to make sense of the examples provided.</li>
      </ul>
      <p>Over the past 35 years of my involvement with computing, I have had the occasion to use, as both learner and teacher, a wide variety of books on computing and computing languages. I have gained much from many sources, but at the same time my preferences have, no doubt, congealed somewhat. Perhaps some of my preferences will coincide with those of the reader.</p>
      <p>While this book is not intended for the beginning computer user, I would hope it is approachable by any of these sorts of people:</p>
      <ul>
        <li>Someone with a good deal of HTML and JavaScript experience, but little or no SVG experience.</li>
        <li>Someone who has done some work with SVG but little with HTML or JavaScript.</li>
        <li>Someone who has programmed in other languages, is conversant with XML, and wishes to learn about SVG.</li>
      </ul>
      <p>That is, it aims to provide some of the purpose of an introduction to the topic, and some of the purposes of a reference. At the same time, though, it is not a comprehensive guide to SVG. In fact, in the time following completion of the first draft, new topics that really should be included have arisen, new browsers have come onto the scene, the SVG specification itself has started to grow. In the <em><a href="#afterword">Afterword</a></em> I offer suggestions for directions I would hope to see this document grow, over time. The SVG Interest Group, I am hoping, will provide help in bringing these efforts forward.</p>
      <p>The book attempts to discuss SVG in broader terms, but at the same time to illustrate how one can write JavaScript programs that use and manipulate SVG. It is not as broad in its coverage of stand-alone SVG as some existing books, though I believe it goes deeper into scripting than many.</p>
      <p>Several goals helped to guide the development of this book.</p>
      <ol>
        <li>It should be hands-on and practical rather than theoretical.</li>
        <li>It should illustrate existing technologies rather than future ones.</li>
        <li>In addition to saying what should work (according to the standards) it should illustrate what does or does not work.</li>
        <li>Individual sections should be, to every extent possible, self-contained. A reader should be able to skip to chapters relevant to a current concern without having to read all chapters leading up to a particular topic.</li>
        <li>Examples should be brief. So long as one is familiar with the basic elements being used, then no one should have to read more than a page or two to figure out what is going on with a particular example.</li>
      </ol>
      <p>In short, I'd like it to be the book that did not seem to exist when I started learning SVG.</p>

      <h2 id="overview">Chapter I - Overview</h2>
      <h3 id="laconism">Laconism</h3>
      <p>SVG or Scalable Vector Graphics is a relatively new World Wide Web Consortium (W3C) standard, used by a host of 
		companies and organizations, for the creation and display of vector graphic material. SVG is an XML language that 
		allows dynamic creation of content using JavaScript within or outside the context of the World Wide Web.</p>
      <h3 id="polemic">Polemic</h3>
      <p>If you ever close your eyes and see pictures that have never been drawn or movies that have not yet been made, then 
		SVG might be for you. Just as typing or drawing or playing a musical instrument, developing hypertexts or carving stone 
		can help you to express a part of what is inside you, so might SVG expand your expressive ability. Think of SVG as an 
		expressive medium. With it you can let your readers' browser build your vector graphics, animate them, and let your 
		readers interact with and change the evolution of those graphics dynamically. Users can draw over them, append to 
		them, or use them to plot user-selected sources of data. And you can do it in an open-standards environment that is 
		rapidly growing in popularity and cross-browser acceptance. It is good for less fanciful endeavors, like business 
		and science, too. It is sort of like HTML, only graphical.</p>
      <h3 id="history">Brief History</h3>
      <p>The <a href="http://www.w3.org/TR/1999/WD-SVG-19990211/">first public draft of SVG</a> was released by the World Wide Web consortium in February of 
		1999 <sup><a class="footnoteanc" href="#footnote1sym" id="footnote1anc">1</a></sup>. 
		During the preceding years, interest in the use of vector graphics had grown. The <a href="http://www.adobe.com/products/postscript/">PostScript
		page description language</a> developed 
		by Adobe Systems Inc. during the 1980s had given the print-based community a way of describing images in ways which 
		could be rescaled to adapt to the resolution of the display device, usually a printer. It was natural to seek a similar 
		vector-based approach to web-based presentation.</p>
      <p>In 1998 an XML-based language, Vector Markup Language (<a href="http://www.w3.org/TR/NOTE-VML">VML</a>) was introduced by Microsoft. It contains 
		many of the same sorts 
		of features, though few programmers adopted VML as a medium of expression and Microsoft seems to have abandoned development of VML.</p>
      <p>By the end of 1999, development of SVG had begun in earnest. Within two years, six subsequent working drafts appeared. IBM 
		and Corel each released software that exported SVG. IBM released an SVG viewer and several software initiatives released 
		SVG drawing packages for a variety of operating systems. Since that time support and endorsement has grown. By 2005, A 
		<a href="http://www.google.com/search?q=svg">Google search for "SVG"</a> returned over 3.7 million links on the 
		WWW. Table 1 compares these results with other technologies. By February 2009, all these numbers had increased considerably 
		(HTML itself rose almost eightfold), but SVG had risen to 11.9 million web documents moving well ahead of Fortran which 
		had risen to 8.6 million.</p>

      <table id="table1">
        <tbody>
          <tr><th>Query</th><th>Number of documents found</th></tr>
          <tr>
            <td>
              &quot;HTML&quot;
            </td>
            <td>
              1,610,000,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;PHP&quot;
            </td>
            <td>
              454,000,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;Java&quot; (includes island)
            </td>
            <td>
              150,000,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;Linux&quot;
            </td>
            <td>
              86,400,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;Perl&quot;
            </td>
            <td>
              51,600,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;JavaScript&quot;
            </td>
            <td>
              49,900,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;Unix&quot;
            </td>
            <td>
              35,200,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;C++&quot;
            </td>
            <td>
              28,900,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;SQL&quot;
            </td>
            <td>
              21,200,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;MySQL&quot;
            </td>
            <td>
              20,300,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;Pascal&quot; (includes Blaise)
            </td>
            <td>
              14,500,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;Visual Basic&quot;
            </td>
            <td>
              8,330,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;Fortran&quot;
            </td>
            <td>
              5,350,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;<strong>SVG&quot;</strong>
            </td>
            <td>
              <strong>3,750,000</strong>
            </td>
          </tr>
          <tr>
            <td>
              &quot;COBOL&quot;
            </td>
            <td>
              2,630,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;Lisp&quot; (includes stuttering)
            </td>
            <td>
              2,300,000
            </td>
          </tr>
          <tr>
            <td>
              SMIL
            </td>
            <td>
              1,600,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;awk&quot;
            </td>
            <td>
              912,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;VML&quot;
            </td>
            <td>
              497,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;ALGOL&quot;
            </td>
            <td>
              489,000
            </td>
          </tr>
          <tr>
            <td>
              &quot;SNOBOL&quot;
            </td>
            <td>
              40,900
            </td>
          </tr>
        </tbody>
        <caption>Table 1: Number of documents found by search at www.google.com <sup><a class="footnoteanc" href="#footnote2sym" id="footnote2anc">2</a></sup> </caption>
      </table>
      <h3 id="advantages">Advantages of SVG</h3>
      <p>SVG has some advantages over conventional bitmapped graphics, such as JPEG, GIF, and PNG, used in the browser environment, because of several reasons:</p>
      <ul>
        <li>The files are generally much smaller than bitmaps, resulting in quicker download times.</li>
        <li>The graphics can be scaled to fit different display devices without the pixelation associated with enlarging bitmaps.</li>
        <li>The graphics are constructed within the browser, reducing the server load and network response time generally associated with web imagery. That is, a typically small formulaic description is sent from the server to the client. The client then reconstructs the imagery based on the formulas it receives.</li>
        <li>The end-user can interact with and change the graphics without need for complex and costly client-server communications.</li>
        <li>It provides native support for SMIL (Synchronized Media Integration Language) meaning that animations, for example, are supported with a more analog notion of timing, hence freeing the programmer from timed loops typically used in JavaScript-based animations.</li>
        <li>It responds to JavaScript: the same scripting language used in the HTML environment. This means the two types of documents may converse, share information and modify one another.</li>
      </ul>
      <p>SVG is an XML language. This is important for at least three reasons. First, the code tends to adhere to agreed upon standards of how SVG should be written and how client software should respond. Second, like all XML, it is written in text, and can generally be read not only by machines but also by humans. Third, and perhaps most importantly, JavaScript can be used to manipulate both the objects and the Document Object Model, in ways quite similar to how JavaScript is used in conjunction with HTML. If you already know how to use JavaScript and HTML for web-programming, the learning curve will be pretty gentle, particularly in view of the benefits to be gained.</p>
      <h3 id="examples">Brief examples</h3>
      <p>Examples are illustrated briefly, just to give an idea of what SVG looks like. In subsequent chapters, we will explain in detail what is actually going on. If you wish to see actual "live" examples on the web of the following, they can be viewed at <a href="http://srufaculty.sru.edu/david.dailey/svg/intro/PartA.htm">this location</a> which is a part of the <a href="http://srufaculty.sru.edu/david.dailey/svg/">author's web site</a> where many hundreds of examples (sometimes in varying states of disrepair) can be seen.</p>
      <p>The object primitives defined by the W3C's current recommendation 1.1<sup><a class="footnoteanc" href="#footnote3sym" id="footnote3anc">3</a></sup> are the line, rect(angle), circle, ellipse, polyline, polygon, text, and the path. Each is described with an XML tag such as the following example:</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;line x1="0" y1="100" x2="100" y2="0"&nbsp;<br />
              stroke-width="2" stroke="black" /&gt;</code>
            </td>
            <td><object type="image/svg+xml" data="line.svg" width="100" height="100">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m483d2abd.png" alt="simple line" height="100" width="100" />
				<br />Your browser appears not to support SVG. The image shown is a png version.
			</object>
            </td>
          </tr>
		</tbody>
		<caption>Simple line</caption>
      </table>

      <p>The above draws a black line (typically anti-aliased when drawn in the browser) of thickness 2 from the point (100, 200) to the point (200, 100). 
		Different browsers have different mechanisms for zooming on SVG, but if one zooms, the visitor will notice that, unlike bitmapped graphics, the line 
		does not become grainy as one zooms in.</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;rect x="0" y="0" width="200" height="150" fill="#FFFF00" stroke="blue" stroke-width="5" /&gt;</code>
            </td>
            <td><object type="image/svg+xml" data="rect.svg" width="200" height="150">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/454d4197.png" alt="rectangle" height="151" width="200" />
				<br />Your browser appears not to support SVG. The image shown is a png version.
			</object>
            </td>
          </tr>
        </tbody>
        <caption>Rectangle</caption>
      </table>
      <p>This example draws a rectangle with its upper left corner at (0,0) its lower right corner at (200, 150) with a 
		blue boundary that is 5 units thick and which is filled with yellow (the familiar RGB hexadecimal is used here).</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;text x="15" y="45" font-size="40" fill="red"&gt;some text&lt;/text&gt;</code>
            </td>
            <td><object type="image/svg+xml" data="text.svg" width="200" height="74">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/2784e072.png" alt="some text" height="74" width="200" />
				<br />Your browser appears not to support SVG. The image shown is a png version.
			</object>
            </td>
          </tr>
        </tbody>
        <caption>text</caption>
      </table>
      <p>The above draws the string "some text" in large red letters and positions the string on the screen.</p>
      <p>Other objects are similarly defined and can be appended, one after another into the display window, 
		with the most recently defined element appearing in front of or on top of earlier-defined shapes.</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;rect x="0" y="0" width="200" height="100"<br />
              fill="#FFFF00" /&gt;<br />
              &lt;ellipse cx="100" cy="50" rx="100" ry="50"<br />
              fill="red" /&gt;</code>
            </td>
            <td><object type="image/svg+xml" data="rectoval.svg" width="340" height="160">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/4fb9b3e0.png" alt="rect with ellipse" id="graphics4" height="103" width="203" />
				<br />Your browser appears not to support SVG. The image shown is a png version.
			</object>
            </td>
          </tr>
        </tbody>
        <caption>rect with ellipse</caption>
      </table>
      <p>The above code specifies a red oval inscribed in a yellow rectangle.</p>
	  <p>One of the most flexible of SVG's primitive objects is the path. &lt;path&gt; uses a series of lines, splines 
		(either cubic or quadratic), and elliptical arcs to define arbitrarily complex curves that combine smooth or jagged transitions.</p>
      <p><code class="line">&lt;path d="M 100 100 L 200 200" stroke="black" stroke-width="12"/&gt;</code></p>
      <p>defines a simple line equivalent to the line defined by</p>
	  <p><code class="line">&lt;line x1="200" y1="200" x2="100" y2="100" stroke-width="12" stroke="black" /&gt;.</code></p>
      <p>It proceeds by placing the pen down at (100, 100) and then drawing a line to (200, 200).</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;path d="M 100 200 L 200 300, 300 20,0 400 300, 500 200"<br />
              stroke="black" fill="none" stroke-width="5"&gt;</code>
            </td>
            <td><object type="image/svg+xml" data="path.svg" width="200" height="111">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/6490aa29.png" alt="path shaped like W" height="111" width="203" />
				<br />Your browser appears not to support SVG. The image shown is a png version.
			</object>
            </td>
          </tr>
        </tbody>
        <caption>path</caption>
      </table>
      <p>Similarly, the code shown above draws a zig-zag in the plane resembling a "W", moving from (100, 200) to (200, 300) and eventually to (500, 200).</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;path d="M 0 0 L 100 100" stroke="black"<br />
              stroke-width="12"/&gt;<br />
              &lt;line x1="0" y1="100" x2="100" y2="0"<br />
              stroke-width="2" stroke="black" /&gt;</code>
            </td>
            <td><object type="image/svg+xml" data="pathline.svg" width="100" height="100">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/5259b58b.png" alt="line and path that looks like a line" height="101" width="104" />
				<br />Your browser appears not to support SVG. The image shown is a png version.
			</object>
            </td>
          </tr>
        </tbody>
        <caption>path with line</caption>
      </table>
      <p>Likewise, the above defines two crossing lines: one thicker than the other. We use, in one case, a line, in the other a path 
		to accomplish much the same thing.</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;path d="M 20 40 C 100 -30 180 90 20 160 L 120 160" stroke="black" fill="none" stroke-width="5" /&gt;</code>
            </td>
            <td><object type="image/svg+xml" data="path2.svg" width="160" height="250">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/2aad1fce.png" alt="path shaped like the numeral '2'" height="164" width="128" />
				<br />Your browser appears not to support SVG. The image shown is a png version.
			</object>
            </td>
          </tr>
          <caption>more complex path</caption>
        </tbody>
      </table>
      <p>A more complex path, above, resembles the numeral 2. The "C" portion of the path describes a cubic spline &mdash; the 
		path begins at (20, 40) and heads toward (100, -30), based on the tangent at the start point. The curve then 
		heads down to the right toward (180, 90) but with a final destination of (20, 160). To adjoin multiple splines together into 
		a single complex curve in VML, a predecessor to SVG, required a good deal more effort than in SVG.</p>

	<!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Getting Started xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->

      <h3 id="get_started">Getting started</h3>
      <p>There are several different ways of putting SVG content in a web page. Let's get started without a lot of tedium about why this or why not that. Later in the book, we will look into some of the advantages and disadvantages of various approaches, but for now let's just talk about two major approaches: standalone SVG documents, and HTML documents with SVG in them. Both of these approaches require a common set of preparatory steps.</p>
      <h4 id="get_viewer">Getting an SVG viewer (web browser).</h4>

      <p>There are many ways of seeing and generating SVG content that do not involve web (HTML) browsers. Just as there are HTML browsers that do not recognize SVG, there are SVG browsers that do not comprehend HTML. But among current web browsers that support both HTML and SVG, we are, as of this writing, talking about one of the following five browsers (hereafter referred to as "the five browsers"):</p>
      <div>
        <ul>
          <li><strong>Microsoft Internet Explorer (IE) version 9 or greater</strong>, or <strong>Internet Explorer version 4 or greater with an SVG plugin</strong>: 
            As of this writing, IE9 Beta has native support for much of SVG.
            <br />
            For IE versions 4.0 to 8.0, you will need a plugin created and distributed by Adobe Systems Inc.®. The plugin is an easy and fast install, and 
			can be accomplished by pointing your browser at <a href="http://www.adobe.com/svg/viewer/install/main.html">http://www.adobe.com/svg/viewer/install/main.html</a>. 
			The plugin is for Adobe SVG Viewer 3.03, referred to in this document as ASV, ASV+IE, or ASV+Internet Explorer.  Other SVG plugins for 
			early versions of IE have been under development and showing steady progress for several years.</li>
          <li><strong>Firefox (FF) version 1.5 or greater</strong>: Since version 1.5 Firefox has offered support for much of the SVG 1.1 specification, 
		though is currently behind ASV+IE and Opera (but ahead of Chrome and Safari) with regard to support for filters. Unlike Opera, ASV+IE and 
		Safari, in early 2009, Firefox does not yet support animation, though nightly builds of the software apparently do.
          </li>
          <li><b>Opera version 9 or greater</b>: (Version 8 introduced limited support.) Users who are interested in SVG might well consider experimenting with Opera as a browser, since its performance has received considerable praise in the web community.
          </li>
          <li><b>Safari 3 or greater</b>: Apple's browser, running either in the Mac OS or under Windows is based, in large part, on the WebKit open source project. Entering the SVG market relatively late (circa 2007), Safari has made very rapid strides in its SVG support, currently supporting some animation, but not yet masks or filters.
          </li>
          <li><b>Chrome</b>: Like Safari, Google's Chrome is based upon the Webkit open source project. Also like Safari, its push into the SVG arena has been both steady and fast - roughly matching Safari in terms of SVG capabilities.
          </li>
        </ul>
      </div>
      <p>Mention should be made of additional contexts in which SVG can be viewed and or created:</p>
      <ul>
        <li>Other (<a href="http://www.w3.org/Amaya/">Amaya</a>, <a href="http://caminobrowser.org/">Camino</a>, <a href="http://www.konqueror.org/">Konqueror</a>, <a href="http://browser.netscape.com/">Netscape</a>, <a href="http://www.seamonkey-project.org/">Sea Monkey</a>). Support for some of these is native, others rely on same the plugin from Adobe (mentioned above under a.). Most of these others have, as of this writing, limited SVG support, though given Konqueror's historic affiliation with WebKit, this may have changed.</li>
        <li>The <a href="http://xmlgraphics.apache.org/batik/">Batik environment</a>, developed within Apache.org, provides a very sophisticated level of SVG support. The interested reader is advised that the Squiggle browser may already convey more of that sophistication than the author is aware of.</li>
        <li>Special mention: <a href="http://www.kde.org/">KDE</a>. Not a browser, but a desktop environment for Linux, it should be mentioned that the K Desktop environment (KDE) provides native SVG support at the level of the operating system.</li>
        <li>Special mention: Inkscape and Illustrator. <a href="http://inkscape.org/">Inkscape</a> is a free, open-source editor for vector graphics. Both Inkscape and the well-known <a href="http://www.adobe.com/products/illustrator/">Illustrator</a>&reg; from Adobe&reg; can read and write SVG files, allowing their modification or creation with a WYSIWYG editor..
        </li>
      </ul>
      <p><a href="http://www.opera.com/">Opera</a>, <a href="http://www.mozilla.org/">Firefox</a>, <a href="http://www.apple.com/safari/">Safari</a>, and 
		<a href="http://www.google.com/chrome">Chrome</a> users will enjoy SVG support that is native to the browser, while many of the others, including 
		Internet Explorer require a plug-in. Many web browsers and SVG viewers with some HTML capability are able to interpret differing degrees of 
		SVG, JavaScript and HTML, so it is best to check your local supermarket for availability and freshness.</p>
      <p>Once you have downloaded, plugged in, or otherwise installed a likely candidate for SVG viewing, it is good to test your browser to make sure it is able to actually interpret SVG. For this you might either</p>
      <ol>
        <li>Do a search for the string "svg" in your favorite search engine and then find a few of the early links. Look for a document ending with a <em>.svg</em> extension. If your browser can see any of them, it is a valid browser. If it fails to see certain <em>.svg</em> pages, it could mean either that the page you found is invalid or that your browser doesn't yet support some of the features used in the SVG page.</li>
        <li>Go to the SVG Wiki, a set of pages maintained by people who know what they are doing, located at <a href="http://wiki.svg.org/">http://wiki.svg.org</a>.</li>
        <li>Go to <a href="http://en.wikipedia.org/wiki/Svg">Wikipedia's entry for SVG</a>.</li>
        <li>Look at the images shown so far. If you see the text <em>Your browser appears not to support SVG. The image shown is a png version</em> then, well, your
		browser appears not to support SVG. If you don't see this messager then you're already seeing SVG in your browser!</li>
      </ol>

      <p>In writing a book (which even though it is electronic, I hope does not grow stale too quickly), I am reluctant to point the reader to many of the 12 million web pages that either include or discuss SVG, since the average lifespan of a web page (44 days according to the best estimate<sup><a class="footnoteanc" href="#footnote4sym" id="footnote4anc">4</a></sup> I can find) is considerably less than the time it takes a project of this size to appear in print. But I suspect strongly that wiki.svg, wikipedia and I will all still be living by the time your eyes reach this book. That's why I will bank on the above URLs as being worth mentioning.</p>

      <h4 id="test_file">Write and test a small SVG file</h4>
      <p>Once you have web software installed that is able to see SVG, then it is time to write a bit of your own. For this there 
		are a number of editors that allow SVG markup to be written. The developer can use a simple text editor, although numerous good, and 
		sometimes free, graphical editing packages are available as well. <a href="http://www.oxygenxml.com/svg_editor.html">Oxygen</a> and 
		<a href="http://www.altova.com/xml-editor/">XMLSpy</a> are two commercial SVG text editors. Among the open source or shareware 
		alternatives, Batik seems to have accumulated a fair-sized user community. I myself use an HTML editor/viewer that does not 
		understand SVG (in terms of tag completion or highlighting) but is at least able to view it. Many folks recommend the 
		Firebug plug-in, associated with Firefox, and Opera's tabbed browsing allows one to go back and forth from source code 
		to view quite easily. Ultimately all you need is a text editor that can save files in plain ASCII or Unicode. Save your 
		file with a <em>.svg</em> filename extension.</p>
      <p>As a sample file, try the following simple example<sup><a class="footnoteanc" href="#footnote5sym" id="footnote5anc">5</a></sup> :</p>
      <p class="codeExample">
        &lt;svg xmlns="http://www.w3.org/2000/svg"&gt;<br />
        &lt;circle r="50"/&gt;<br />
        &lt;/svg&gt;</p>
        <p>Save it as "simplest.svg." Point your web browser at it to make sure you can see part of a black circle. If so, you are ready to start creating SVG content.</p>

      <h4 id="test_server">Test it on your web server</h4>
      <p>If you already have a place on the Web, then put your file in that place. If you can see your file when you point your web browser 
		at it, then congratulations; others can most likely see it too. If you can't see it, it is most likely a server configuration problem. 
		The Web server should send an HTTP header for the svg file type that looks like:</p>
		<p><code>Content-Type: image/svg+xml</code></p>
      <p>If you are your own systems administrator, then it is likely you know where to edit your server's configuration so as to effect such a 
		change. If not, talk to your systems administrator and he or she probably will.  If not, please encourage them, ever so respectfully, to have a look at what the <a href="http://planetsvg.com/tools/mime.php">SVG server configuration page says about the topic</a>.</p>


      <h4 id="read_book">Stir up your imagination and finish reading this book.</h4>
		<p>Let me know if you have any problems!</p>


	<!-- ############################################################################################################################################### -->
	<!-- #################################### CAHPTER 2 ################################################################################################ -->
	<!-- ############################################################################################################################################### -->


      <h2 id="SVG_Basics">Chapter II - SVG Basics</h2>
      <h3 id="coordinate">The coordinate system</h3>
      <p>The default coordinate system in SVG is much the same as in HTML. It works as a two-dimensional x-y plane. The origin (where x=0 and y=0) is the 
		upper left-hand corner. As we move right from there, x increases. As we move downward, y increases. Generally, units are measured in pixels. 
		That is, if our browser window has a rectangle of 343 pixels high by 501 pixels wide then the lower right corner of that window will be the point (501,343).</p>

	  <div class="imgHolder" style="width:513px">
		<img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/3b5025e2.png" alt="illustration of cartesian grid" id="graphics8" height="387" width="511" />
		<p>Illustration of cartesian grid</p>
	  </div>
      <p>Now, to be sure, things are not always this simple. Sometimes, we have scaling and zoom effects in place which can be affected by a number of 
		considerations, foremost among which might be the viewBox, a rectangle which resets the scale of the units associated with the viewing rectangle. 
		Also, the dimensions of the HTML window may interact with the SVG object if it is embedded in HTML. These considerations will be discussed in 
		more detail later in the book.</p>
      <p>Other than that, we can generally assume that when we refer to a point with coordinates (100,100), it will be a point diagonally downward 
		(100&radic;2 pixels) from the upper left corner of the browser's viewable window.</p>

      <h3 id="simple_objects">Simple objects</h3>
      <p>According to the World Wide Web Consortium's Recommendations, the SVG graphics elements are "the element types that can cause graphics 
		to be drawn onto the target canvas. Those are: 
		<a href="http://www.w3.org/TR/SVG/paths.html#PathElement">'path'</a>, 
		<a href="http://www.w3.org/TR/SVG/text.html#TextElement">'text'</a>, 
		<a href="http://www.w3.org/TR/SVG/shapes.html#RectElement">'rect'</a>, 
		<a href="http://www.w3.org/TR/SVG/shapes.html#CircleElement">'circle'</a>, 
		<a href="http://www.w3.org/TR/SVG/shapes.html#EllipseElement">'ellipse'</a>, 
		<a href="http://www.w3.org/TR/SVG/shapes.html#LineElement">'line'</a>, 
		<a href="http://www.w3.org/TR/SVG/shapes.html#PolylineElement">'polyline'</a>, 
		<a href="http://www.w3.org/TR/SVG/shapes.html#PolygonElement">'polygon'</a>, 
		<a href="http://www.w3.org/TR/SVG/struct.html#ImageElement">'image'</a> and 
		<a href="http://www.w3.org/TR/SVG/struct.html#UseElement">'use'</a>."<sup><a class="footnoteanc" href="#footnote6sym" id="footnote6anc">6</a></sup></p>
      <p>These are the primitives, so to speak, and form an appropriate starting point for our discussion. The &lt;polyline&gt; and &lt;polygon&gt; 
		objects don't add anything that the more flexible path cannot do, so those will not be considered in this treatment. It makes sense to 
		discuss &lt;use&gt; along with grouping and transformations (once we have something worth &lt;use&gt;-ing), so I will present the 
		others starting with the simpler objects first.</p>
      <p>I offer three recommendations on how one might learn all of this:</p>
      <ul>
        <li>Don't just <em>read</em> this book; <em>try</em> the examples. You have my permission and the permission of the publishers to do so. 
		This sort of subject does not enter a passive brain as well as it enters an active one. It will help if you engage yourself actively.</li>
        <li>Don't just <span style="font-style: italic;">copy</span> these examples; <span style="font-style: italic;">experiment</span>. Try 
			changing an attribute here and there. Imagine some picture, and see if you can draw it.</li>
        <li>For those fairly comfortable with learning new technologies, skip ahead and read, at the same time, the chapter on SMIL animation. 
		As you are experimenting with a tag and its attributes, try animating the attributes so you can see what they affect and to what degree. 
		It can give you a quicker and clearer understanding.</li>
      </ul>

      <h4 id="colors">Colors and drawing order</h4>
      <p>Before discussing the basic drawing objects, let's first consider the use of color values in SVG and the order in which drawn objects appear on the page.</p>
      <p>Colors may be specified in much the same way that they are in HTML/CSS:</p>
      <ul>
        <li>color names: any of the HTML name space color terms, including such terms as "aqua", "lightgreen", "salmon", "tomato" and "papayawhip";</li>
        <li>6-digit hex RGB values: "#ff0a8f";</li>
        <li>3-digit hex RGB values: "#fd2"="#ffdd22";</li>
        <li>functional values: either decimal (in the range 0 to 255), such as rgb(255,12,560); or percentage, such as rgb(100%, 50%, 20%).</li>
      </ul>
      <p>Accordingly, the color "red" may be defined alternately as "red", "#f00", "#ff0000", "rgb(255,0,0)", or as "rgb(100%,0%,0%)".</p>
      <p>Objects appear from back to front in the order they are defined, with objects defined later appearing in front of or above (and 
		occluding if they overlap) those defined earlier. More concerning overlaying objects will be found in the next section "operations: grouping, 
		reusing, scaling, translation and rotation."</p>

      <h4 id="line">&lt;line&gt;</h4>
      <p>The &lt;line&gt; object draws a line between two specified points: (x1,y1) and (x2,y2). In order to see the line, it must have a 
		<em>stroke</em> (i.e., a color).</p>
      <p>The code <code>&lt;line x1="10" y1="10" x2="100" y2="100"&gt;</code> draws an invisible line in most browsers, while in ASV+Internet Explorer, a faint hint of a grey line might be seen (which, curiously, does not expand in size when we zoom in on it).</p>
      <p>Hence, a sort of minimal line consists of code such as the following:</p>

	  <p class="codeExample">&lt;line x1="5" y1="5" stroke="red" x2="90" y2="90" /&gt;</p>


      <p>Another attribute known as "stroke-width" controls the thickness of the line and, by default, is assigned a value of 1.</p>
      <p>The stroke and stroke-width attributes as well as the starting and ending points are varied in the following illustration:</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;line x1="5" y1="10" x2="99" y2="30" stroke-width=".5" stroke="red"/&gt;<br /><br />
              &lt;line x1="5" y1="30" x2="99" y2="50" stroke-width="1" stroke="red"/&gt;<br /><br />
              &lt;line x1="5" y1="50" x2="99" y2="70" stroke-width="2.5" stroke="red"/&gt;<br /><br />
              &lt;line x1="5" y1="70" x2="99" y2="90" stroke-width="4" stroke="blue"/&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m42c2d85a.png" alt="several lines varying stroke and stroke-width" id="graphics9" />
            </td>
          </tr>
        </tbody>
		<caption>The effect of varying stroke widths</caption>
      </table>
      <p>A number of other attributes exist for lines, two of which: the <em>stroke-dasharray</em> and the <em>stroke-linecap</em> are worth mentioning in this treatment.</p>
      <table class="example" style="width:46em">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>
                &lt;line x1="15" y1="15" x2="140" y2="135" stroke-width="25"<br />
                stroke="blue" stroke-linecap="round"/&gt;<br /><br />

                &lt;line x1="15" y1="15" x2="140" y2="135" stroke-width="25"<br />
                stroke="aqua" stroke-dasharray="8,3,2,18"/&gt;<br /><br />

                &lt;line x1="15" y1="155" x2="160" y2="60" stroke-width="25"<br />
                stroke="blue"/&gt;<br /><br />
                &lt;line x1="15" y1="155" x2="160" y2="60" stroke-width="25"<br />
                stroke="orange" stroke-dasharray="8,3,2"/&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m64bf4551.png" alt="illustration of stroke-dasharray" id="graphics10" />
            </td>
          </tr>
        </tbody>
		<caption>The effect of other attributes on <code>line</code> elements</caption>
      </table>
      <p>The <em>stroke-dasharray</em> gives a flexible way of making dashed lines, shape borders, and paths. In the above illustration, we 
		have made two pairs each consisting of two identical lines (except for the stroke and its dasharray) one on top of the other. The top 
		line of each pair has had its <em>stroke-dasharray</em> applied which takes a sequence of numeric values S=(v1,v2,v3,...,vn) and turns 
		the stroke on and off: on for the first value v1 pixels along the length of the line; off for the next v2 pixels and so forth. If the 
		sum of the values v<sub>i</sub> in S is less than the length of the line, then the values are repeated again as needed. In the case 
		of the first line, the value of stroke-dasharray="8,3,2,18" has an even number of values so the blue and aqua colored bands repeat 
		aqua 8 pixels, clear 3 pixels, aqua 2 pixels and clear 18 pixels, starting over again with 8 more pixels of aqua. Since the underlying 
		but identically shaped line is blue, the blue of the underlying line is what shows. In the case of the second line, the value of 
		stroke-dasharray="8,3,2" has an odd number of values so the repeating sequence goes like this:</p>
      <p>(8 orange, 3 clear, 2 orange, 8 clear, 3 orange, 2 clear, ...).</p>
      <p>The first of the two pairs of lines has two lines; both use <em>stroke-linecap</em>, having stroke-linecap="round". This makes the 
		end of the line rounded instead of flat, as in the second example which uses the default or flat value of stroke-linecap.</p>
      <p>Another useful aspect of lines involves the &lt;marker&gt; tag which can be used to define arrow or other shapes appropriate for 
		attaching to the beginning or ends of lines. The W3C gives a clear example<sup><a class="footnoteanc" href="#footnote7sym" id="footnote7anc">7</a></sup> 
		for those so interested, though it is a bit verbose for our treatment here. Another example can be seen at
		<a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/simpleshapes.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/simpleshapes.svg</a>.</p>

      <h4 id="rect">&lt;rect&gt;</h4>
      <p>The &lt;line&gt;, &lt;rect&gt;-<em>angle</em>, &lt;circle&gt; and &lt;ellipse&gt; elements can all be seen as special cases of what could 
		instead be done with the &lt;path&gt; object. But these are such familiar geometric objects that it is natural to define them separately.</p>
      <p>A rectangle is drawn using the &lt;rect&gt; tag, which, by default, produces a rectangle with sides parallel to the edges of the browser 
		window. We will see how to rotate rectangles later on so that they might be parallel to something other than the ground, without having 
		to lift and tilt our monitors. We may also skew them so that they cease to be rectangles at all, but rather become parallelograms.</p>
      <p>A &lt;rect&gt; receives a starting point (x,y) a width and a height attribute. If no fill color or pattern is specified, by default, 
		the rectangle will be filled with black.</p>
	  <p class="codeExample">&lt;rect x="60" y="95" height="30" width="50" /&gt;</p>
      <p>Common attributes that are used in conjunction with the rectangle include the fill, which specifies its color (or pattern), 
		its stroke and stroke-width (which determine aspects of its border or edge). Here are some rectangles that exemplify these attributes 
		as well as the use of various color reference schemes and the partial overlay and occlusion of objects.</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;rect x="62" y="25" height="110" width="16"<br />
              fill="rgb(100%,50%,50%)" stroke="black"<br />
              stroke-width="2"/&gt;<br /><br />
              &lt;rect x="35" y="35" height="30" width="50"<br />
              fill="red" stroke="black" stroke-width="2"/&gt;<br /><br />
              &lt;rect x="5" y="60" height="30" width="50"<br />
              fill="#f88" stroke="black" stroke-width="2"/&gt;<br /><br />
              &lt;rect x="25" y="70" height="30" width="50"<br />
              fill="#ff8888" stroke="black" stroke-width="2"/&gt;<br /><br />
              &lt;rect x="65" y="60" height="30" width="50"<br />
              fill="#eac" stroke="black" stroke-width="2"/&gt;<br /><br />
              &lt;rect x="85" y="70" height="30" width="50"<br />
              fill="#eeaacc" stroke="black"<br />
              stroke-width="2"/&gt;<br /><br />
              &lt;rect x="60" y="95" height="30" width="50"<br />
              fill="rgb(255,0,0)" stroke="black"<br />
              stroke-width="2"/&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/5e23cc1b.png" alt="overlapping rectangles" id="graphics11" />
            </td>
          </tr>
        </tbody>
		<caption>A variety of rectangles</caption>
      </table>
      <p>Note in the above example that the first rectangle defined, the tall thin one, appears under all subsequent rectangles. Note also, that the 
		colors "#f88" #ff8888" are equivalent and that "rgb(100%,50%,50%)" while visibly similar, is actually a bit darker since half of "ff" is 
		actually "7f" rather than "88".</p>
      <p>The fill of a &lt;rect&gt; can also be a more complex. Gradients, masks, patterns, and various filters are all available to alter the 
		way a rectangle appears in SVG. These are more advanced topics and are dealt with later in this book. For something analogous to the 
		stroke-dasharray seen above for the &lt;line&gt; element, consider the &lt;gradient&gt; as discussed in the next chapter.</p>

      <h4 id="circle">&lt;circle&gt;</h4>
      <p>A circle is indeed a special case of an ellipse, so if you prefer parsimony in the amount of syntax you have to learn, please feel free 
		to skip right ahead to the ellipse. The &lt;circle&gt; does have a slightly simpler syntax, so if you prefer keeping your keystrokes 
		few, or if the ellipse's eccentricity troubles you in some fundamental way, then &lt;circle&gt; may be worth your while to learn.</p>
      <p>The simplest circle requires only a center point (cx,cy) and a radius, r:</p>
	  <p class="codeExample">&lt;circle cx="80" cy="50" r="40"/&gt;</p>
      <p>This produces a circle of radius 40 pixels filled (by default) with black.</p>
      <p>Just as with rectangles, we might play with the stroke, the stroke-width and the stroke-dasharray to create various interesting effects. 
		Note that if we wish a circle to appear to have an empty center, we define some stroke color and then set fill="none" to make it hollow. 
		The illustration below shows the effects of adjusting several of these attributes.</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td><code>&lt;circle cx="80" cy="50" r="40"/&gt;<br /><br />
                &lt;circle cx="80" cy="110" r="40" fill="red"/&gt;<br /><br />
                &lt;circle cx="80" cy="170" r="40"<br />
                fill="yellow" stroke="blue" /&gt;<br /><br />
                &lt;circle cx="80" cy="160" r="20" fill="red" stroke="black" stroke-width="10"/&gt;<br /><br />
                &lt;circle cx="140" cy="110" r="60" fill="none" stroke="#579" stroke-width="30"<br />
                stroke-dasharray="3,5,8,13"&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m3e417928.png" alt="circles with varying fill, stroke, stroke-width and stroke-dasharray" id="graphics12" />
            </td>
          </tr>
        </tbody>
        <caption>Circles with varying fill, stroke, stroke-width and stroke-dasharray<p>A similar example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/circles3.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/circles3.svg</a>.</p></caption>
      </table>
      


      <h4 id="ellipse">&lt;ellipse&gt;</h4>
      <p>The ellipse is just like the circle but has two radii instead of one. rx represents half the distance from the leftmost to the 
		rightmost sides, while ry is the distance from top to center of the ellipse. The ellipse is always aligned with its horizontal 
		axis parallel to the bottom of the window, unless one applies a rotation transform (as discussed later in this chapter). The ellipse 
		can be a considerably more evocative shape than a circle, and given that it is a circle when rx=ry, it is more flexible as well.</p>
      <table class="example" style="width:50em">
        <tbody>
		  <caption>Identical clusters of ellipses except for stroke-dasharray. The ellipses on the left use dash array, those on the right do not.
			<p>This example may be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/ellipses2.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/ellipses2.svg</a>.</p>
		</caption>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>
                &lt;ellipse cx="80" cy="110" rx="75" ry="105" fill="#538"/&gt;<br /><br />
                &lt;ellipse cx="80" cy="110" rx="60" ry="40" fill="black" stroke="red" stroke-width="25"/&gt;<br /><br />
                &lt;ellipse cx="80" cy="110" rx="35" ry="20" fill="#538" stroke="yellow" stroke-width="25"/&gt;<br /><br />
                &lt;ellipse cx="80" cy="50" rx="40" ry="30" fill="red" stroke="black" stroke-width="25"/&gt;<br /><br />
                &lt;ellipse cx="80" cy="50" rx="30" ry="20" fill="orange" stroke="red" stroke-width="10"/&gt;<br /><br />
                &lt;ellipse cx="80" cy="170" rx="40" ry="30" fill="yellow" stroke="orange" stroke-width="25" /&gt;<br /><br />
                &lt;ellipse cx="80" cy="170" rx="30" ry="20" fill="red" stroke="black" stroke-width="10"/&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m75ab8246.png" alt="Identical clusters of ellipses except for stroke-dasharray" id="graphics13" />
            </td>
          </tr>
        </tbody>
      </table>

      <p>The code of the two illustrations is identical except that the figure on the left has had the <em>attribute-value</em> pair stroke-dasharray="3,6"added to four of its seven ellipses.</p>


      <h4 id="path">&lt;path&gt;</h4>
      <p>If one wanted to learn only one drawing primitive, then the &lt;path&gt; would probably be it. It can be used to replace &lt;rect&gt;, 
		&lt;ellipse&gt;, and &lt;circle&gt;, though it would not be advised unless your mental arithmetic skills are quite good (e.g. 
		simultaneous differential equations). &lt;path&gt; is a very flexible drawing option. It renders the movement of a stylus through 
		two dimensions, with both pen-up and pen-down options, including straight and curved segments joined together at vertices which are either 
		smooth or sharp.</p>
      <p>There are many aspects of the &lt;path&gt; that we will not discuss here. Fortunately, the W3C's chapter on paths is thorough and has plenty 
		of illustrations of most of its numerous facets. Here, we cover only absolute rather than relative coordinates, and only the raw path 
		elements rather than their simplified forms (such as "S" as a special case of "C"). We will deal with pen-down, linear, quadratic and cubic forms, and arcs.</p>
      <p>Like &lt;rect&gt;, &lt;line&gt; and the other elements, we've seen, &lt;path&gt; has attributes like stroke, stroke-width, stroke-dasharray, 
		and fill. But while the other elements we've looked at have special meanings given to particular coordinates (like "rx" or "x2"), the 
		path has a sequence of such coordinates held in an attribute named "d". This string of coordinates can be of arbitrary length.</p>


      <h5 id="path_M">Paths: M and L</h5>
      <p>We begin by specifying where the drawing will begin by inserting as the first element of "d" a notation such as "M x y" for 
		numbers x and y. We might think of "M x y" as meaning "move pen to the coordinate x y." From there, we have options of moving 
		(with pen still down on the canvas) linearly (L), quadratically (Q), cubically (C) or through an elliptic arc (A). For example, 
		d="M 100 100 L 200 200" would succeed in drawing a diagonal line from the point (100,100) to the point (200,200), as shown.</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;path stroke="black"<br />
              d="M 100 100 L 200 200"/&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m40b9361c.png" alt="diagonal line from the point (100,100) to the point (200,200)" id="graphics14" height="215" width="256" />
            </td>
          </tr>
        </tbody>
		<caption>A diagonal line from (100,00) to (200,200)</caption>
      </table>
      <p>The pen-down and line modes stay in effect until turned off, so we might concatenate yet other pairs of coordinates into the path.</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;path d="M 100 100<br />
              L 200 200 100 150"/&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m6b9cad89.png" alt="three points on a path" id="graphics15" height="215" width="256" />
            </td>
          </tr>
        </tbody>
		<caption>Concatenated pairs of coordinates</caption>
      </table>
      <p>A couple of things should be noted. First, in the above example, we did not specify a stroke since, by default, the figure is filled with 
		black. Second, if we specify that a path has no fill (using fill="none") then the path will not appear to loop back to the beginning. 
		Third, we might, for sake of legibility, be tempted to add commas, between pairs of coordinates. This is just fine, in the general 
		case, though a few cases have been reported in which certain browsers seem to be troubled by large numbers of commas as coordinate 
		delimiters. Fourth, we may assume that L (or line) is the default way of moving to the next point, and it need not be specifed. 
		That is d="M 100 100 L 200 200 100 150" should be equivalent to d="M 100,100 200,200 100,150" . These observations are illustrated 
		as follows. Note that once we specify fill="none" the figure will be invisible, unless we specify a stroke.</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td><code>&lt;path d="M 50,100 150,200 50,150"/&gt;<br /><br />
                &lt;path d="M 100 50 L 200 150 100 100" fill="none" stroke="black"/&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m6daeff2a.png" alt="two similar paths, one with fill='none'" id="graphics16" height="240" width="256" />
            </td>
          </tr>
        </tbody>
		<caption>The effect of adding fill="none" (but note that the stroke attribute is defined)
		<p>This example may be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/path2.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/path2.svg</a></p></caption>
      </table>
	  
      <p>The path will also be unclosed &mdash; that is, the two endpoints will not be connected unless we specify that they should be. 
		If we wish a path to be closed, we modify it with the z flag at the end of the path as follows:</p>
      <p><strong>open:</strong></p>
		<p class="codeExample">&lt;path d="M 100,50 200,150 100,100" fill="none" stroke="black"/&gt;</p>
      <p><strong>closed:</strong></p>
		<p class="codeExample">&lt;path d="M 100,50 200,150 100,100 z" fill="none" stroke="black"/&gt;</p>
      <p>Since paths are, by default, filled with black, it is natural to wonder what happens when the path crosses itself. By default, the 
		union of the regions traversed by the path is filled, unless we specify otherwise.</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td><code>&lt;path d="M 70,290 L 150,150 200,250 40,250 100,150 170,290"/&gt;</code>

            <td>
              <img src="StateOfArt/798df064.png" alt="self-intersecting path with default fill-rule" height="141" width="167" />
            </td>
		  </tr>
		  <tr>
			<td><code>&lt;path d="M 70,290 L 150,150 200,250 40,250 100,150 170,290"
              fill-rule="evenodd"/&gt;</code>
            </td>
            <td>
              <img src="StateOfArt/2329cb12.png" alt="self-intersecting path with fill-rule='even-odd'" height="170" width="240" />
            </td>
          </tr>
        </tbody>
		<caption>An example to show the difference between the default and "even-odd" fill rules</caption>
      </table>
      <p>Here we show the default fill technique as well as the "even-odd" fill rule on a shape which intersects itself on more than one 
		occasion. The points are labeled just to make it easier to read what might seem a long list of six coordinate pairs.</p>

      <p>Another interesting aspect of &lt;path&gt; is that we might combine multiple path segments into a common path definition. 
		That is, a path may have multiple components by having more than one pen-down operation. Note in the figure below that 
		the two path segments are indeed treated as one since the orange fill is applied to the entire figure rather than 
		to the two separate triangular components. The interior of the figure is also transparent, as illustrated by the rotated and 
		reduced version of the image appearing partly inside and partly outside the foreground figure.</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;path fill="orange"<br />
              d="M 10,215 210,215 110, 42 z<br />
              M 10,100 210,100 110,273 z"<br />
              stroke="purple" stroke-width="3"/&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m36f8c292.png" alt="path with more than one pen-down" id="graphics19" height="211" width="231" />
            </td>
          </tr>
        </tbody>
		<caption>A &lt;path&gt; with fill="green" et cetera... is also included in the drawing.</caption>
      </table>

      <h5 id="path_Q">Paths: Q &mdash; Quadratic B&eacute;zier curves.</h5>
      <p>I became aware of B&eacute;zier curves in the mid 1980s when I discovered that Adobe Illustrator had the ability to draw amazing 
		curves quickly. I did not know what sort of crazy-fast mathematics would be able to solve all those equations so quickly. 
		A good treatment of the subject may be found at Wikipedia<sup><a class="footnoteanc" href="#footnote8sym" id="footnote8anc">8</a></sup>.</p>
      <p>Here's basically how a quadratic B&eacute;zier works in SVG. We define an initial point (say 100,200) with a pen-down. From there, we 
		set a course heading toward the next point. Instead of going to the next point, we just aim that direction. So, for example, while 
		"M 100 200 L 200 400" actually arrives at the point "200,400", "M 100 200 Q 200 400 &hellip; " merely heads that way. Ultimately, in addition to a 
		"heading" we also have a final "destination" and that is the final coordinate pair required of the quadratic B&eacute;zier. In the illustration we see that.</p>
      <p class="codeExample">"M 100,200 L 200,400 300,200"</p>
      <p>draws a red path between (and reaching each of) the three points indicated. Simply replacing the "L" with a "Q" to draw</p>
	  <p class="codeExample">"M 100,200 Q 200,400 300,200"</p>
      <p>produces a curve passing through both endpoints, and becoming tangent to the associated lines of the allied line-path at the endpoints to the segments.</p>
      <table class="example" style="width:50em">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;path d="M 100 200 Q 200,400 300,200" fill="none" stroke="blue" /&gt;<br />
              &lt;path d="M 100 200 L 200,400 300,200" fill="none" stroke="red"/&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m69cd8b78.png" alt="showing the tangent lines of a quadratic Bezier" id="graphics20" height="390" width="401" />
            </td>
          </tr>
        </tbody>
		<caption>B&eacute;zier curve example</caption>
      </table>
      <p>While there is an infinite family of curves tangent both to the line "M 100 200 L 200 300" at (100, 200) and to "M 200 400 L 300 200" at (300,200), 
		there is only one quadratic that shares these properties, even if we allow for rotations (in the sense of parametric equations) of the quadratic. 
		That is, the curve is uniquely defined by those three points in the plane. Likewise, any three non-collinear points in the plane determine one 
		quadratic B&eacute;zier curve.</p>


      <p>Revisiting the earlier example in which the fill-rule was modified to produce an empty space in the middle of the curve, we 
		may draw the same curve with quadratic splines instead of lines to see the effect.</p>
      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td>
              <code>&lt;path fill-rule="evenodd<br />
                d="M 70 140 L 150,0 200,100 L 40,100 100,0 L 170,140 70 140"/&gt;<br /><br />
                &lt;path fill="red" fill-rule="evenodd"<br />
                d="M 70 140 Q 150,0 200,100 Q 40,100 100,0 Q 170,140 70 140"/&gt;</code>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/me702c4.png" alt="two paths with same coordinates: one with L, one with Q" id="graphics21" height="166" width="235" />
            </td>
          </tr>
        </tbody>
		<caption>An example of a graphic using a quadratic spline</caption>
      </table>

      <h5 id="path_C">Paths: C &mdash; Cubic B&eacute;zier curves.</h5>
      <p>We can imagine raising the degree of the polynomial to allow the satisfaction of increasingly more constraints on a curve. 
		With a cubic B&eacute;zier, we are able to change the skewness and kurtosis of a curve tangent to the inscribing polygon at 
		the specified endpoint, because instead of a single "control point" affecting the direction of the curve, we now have two control points.</p>
		<div class="imgHolder" style="width:316px">
		<img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m499a2128.png" alt="a family of cubic curves sharing endpoints and tangents" id="graphics22" height="330" width="314" />
		<p>A family of cubic curves sharing endpoints and tangents</p>
		</div>
      <p>In the above figure, we see the effect of allowing the two control points to move symmetrically along the edges of the triangle in the 
		direction of the vertex at (200,400). All four cubic B&eacute;ziers are like the quadratic B&eacute;zier (in blue) in that they have 
		the same starting and end points and are all tangent to the same lines at those points. Each curve as we move down from the red curve 
		to the sharp red angle has control points which are along the lines, but progressively closer to the vertex.</p>
      <p>A sort of limiting case can be seen in the following diagram in which the two control points converge to either the end points of the 
		curve or to the vertex. The lower of the two green curves never gets any lower than what is shown, though the higher green curve will 
		be equivalent to the line when d="M 0,0 C 0,0 400,0 400,0". Effectively then the kurtosis, or peakedness, of the curve can be adjusted 
		anywhere between the ranges shown.</p>
		<div class="imgHolder" style="width:316px">
		<img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/mcbf3920.png" alt="limiting case for a family of curves" id="graphics23" height="233" width="436" />
		<p>Limiting case for a family of curves</p>
		</div>
      <p>While the above examples adjust the two control points symmetrically, we may adjust the skewness or asymmetry of the curve by adjusting 
		the two control points asymmetrically.</p>
      <p>Ultimately, the power of cubic B&eacute;ziers can be seen in this ability to bend flexibly in 2D. Additionally, they may be stitched 
		together piecewise and smoothly so as to make cubic splines that can approximate any 2D curve with what is usually acceptable accuracy.</p>
      <p>The following illustrates a collection of curves each tangent to the same pair of lines at the same pair of endpoints:</p>
		<div class="imgHolder" style="width:393px">
		<img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m31556306.png" alt="cubic beziers sharing tangents and endpoints" id="graphics24" height="323" width="391" />
		<p>Cubic beziers sharing tangents and endpoints</p>
		</div>
      <p>The following demonstrates how B&eacute;zier curves may be stitched together smoothly. For this to happen, it is necessary that the 
		slopes of the lines at either side of a segment's endpoint be the same.</p>
		<div class="imgHolder" style="width:524px">
        <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m5fbfc0c1.png" alt="adjoining two cubic curves smoothly" id="graphics25" height="223" width="522" />
		<p>Adjoining two cubic curves smoothly</p><p>This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/path8a.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/path8a.svg</a></p>
		</div>
        
      <p>Observe that the two paths "brown" and "blue" share beginning and end points, initial and final control points, as well as midpoints (150,200). 
		They differ only in terms of the control points surrounding the midpoint. The blue path aims toward (100,100) and then changes direction toward (200,300) 
		passing through the midpoint on its way and there tangent to the line as shown. Because the three relevant points (100,100), (150,200) and (200,300) 
		are collinear, the slopes of both segments are the same at the point where they meet, implying that the curve is smooth (continuously differentiable) at 
		that point. The principle is applied repeatedly in the following illustration in which each labeled endpoint of a cubic B&eacute;zier is surrounded by two 
		points collinear with it.</p>

      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td><code>&lt;path stroke="black"<br />
stroke-width="3" fill="#eec1c2"<br />
d="M 99 192<br />
  C 137 160 204 133 141 124<br />
  C  78 115  34 167  47 129<br />
  C  60  91  20  65  77  71<br />
  C 134  77 206  43 196 101<br />
  C 186 159 118 368 119 299<br />
  C 120 230 201 169 138 206<br />
  C  75 243  53 231  99 192" /&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/4418afb.png" alt="several smoothly stitched bezier segments" id="graphics26" height="291" width="235" />
            </td>
          </tr>
        </tbody>
		<caption>Several smoothly stitched B&eacute;zier segments</caption>
      </table>

	<h5 id="path_A">Paths: A &mdash; Elliptical arc.</h5>
      <p>One other aspect of the &lt;path&gt; deserves mention. That is the elliptical arc. It might seem that an arc would be a very simple topic, but 
		when we realize that given any two points in the plane and two elliptical radii, there often are two ellipses that traverse those points with 
		specified radii and those points specify two different arcs for each ellipse. The arc subcommand of the &lt;path&gt; has the following 
		syntax: A rx ry XAR large-arc-flag sweep-flag x y. The arc begins at the current point (determined by the last coordinate specified, e.g. 
		by the M subcommand), and ends at (x,y). The ellipse will have radii of rx and ry, with the x-axis of the ellipse being rotated by 
		XAR degrees. The particular ellipse (of the two possible) is specified by the large-arc-flag (0 or 1) and the particular segment of the 
		ellipse is specified by the sweep-flag. (0 or 1). The following illustration shows two different ellipses passing through (100,100) and 
		(200,150) each with different choices for its sweep-flag. The yellow arc is identical to the red one, and the blue to the green, except 
		for the sweep-flag. Both ellipses have had zero rotation applied.</p>

		<div class="imgHolder" style="width:407px" id="m38b4a957">
		  <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m38b4a957.png" alt="Four elliptical arcs sharing endpoints" id="graphics27" height="263" width="405" />
		  <p>Four elliptical arcs sharing endpoints</p>
		  <p>This example may be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/arcs.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/arcs.svg</a></p>
		</div>

      <h4 id="opacity">Opacity</h4>
      <p>Ordinarily all of our drawn objects are completely opaque. That is, <em>opacity</em> is, by default, 100%. If we wish to make things partly 
		transparent, it is very easy: we simply add opacity=p for some number 0&lt;p&lt;1 as an (attribute, value) pair into the tag we wish to modify. 
		A simple example is the <a href="#m38b4a957">preceding illustration</a> of arc segments in which each of the four arc segments is given an opacity of 0.5, allowing 
		any underlying objects to shine through:</p>

		<p class="codeExample">
		&lt;path d="M100 100 A 30,50 0 0,0 200,150 z"<br /><span>fill="#080" stroke="#8f8" stroke-width="5" opacity="0.5"</span>/&gt;<br /><br />

		&lt;path d="M100 100 A 30,50 0 0,1 200,150 z"<br /><span>fill="#088" stroke="cyan" stroke-width="5" opacity="0.5"</span>/&gt;<br /><br />

		&lt;path d="M100 100 A300,30 0 0,0 200,150 "<br /><span>fill="#880" stroke="yellow" stroke-width="5" opacity="0.5" </span>/&gt;<br /><br />

		&lt;path d="M100 100 A300,30 0 0,1 200,150 "<br /><span>id="red" fill="#800" stroke-width="5" opacity="0.5"</span>/&gt;</p>


      <h4 id="image">&lt;image&gt;</h4>
      <p>The &lt;image&gt; tag in SVG is much like the &lt;img&gt; tag in HTML: a way of putting the contents of an image file (PNG, JPEG, or SVG 
		formats) into a rectangle on a page. I am not quite sure why a vector graphics language came to have methods for inserting bitmaps. It makes 
		sense, though, since most vector drawing packages give ready access to bitmaps. It certainly expands our graphics repertoire. Additionally, 
		numerous interesting filters exist within SVG which give us considerable power at manipulating bitmapped as well as vector graphics.</p>
      <p>Generally we include a tag much like a &lt;rect&gt;. We specify the upper left corner of the rectangle (x,y) we specify its width and 
		height, and we specify the file or URL from which the material will be loaded.</p>

	  <p class="codeExample">&lt;image xlink:href="filename" x="100" y="100" width="150" height="200" /&gt;</p>

      <table class="example" style="width:45em">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td><code>&lt;image xlink:href="p72.jpg" height="200" width="100" x="100" y="100"/&gt;<br /><br />
			&lt;image xlink:href="path6b.svg" height="200" width="100" x="105" y="150"/&gt;<br /><br />
			&lt;image xlink:href="p17.jpg" height="100" width="100" x="200" y="100"/&gt;<br /><br />
			&lt;image xlink:href="p18.jpg" height="100" width="100" x="200" y="200"/&gt;<br /><br />
			&lt;image xlink:href="p11.jpg" height="200" width="100" x="300" y="100"<br /><br />
			preserveAspectRatio="xMinYMid"/&gt;<br /><br />
			&lt;image xlink:href="path6b.svg" height="200" width="100" x="310" y="150"/&gt;</code>
		  </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/23ac35ba.jpg" alt="several uses of the image tag" id="graphics28" height="285" width="373" />
            </td>
          </tr>
        </tbody>
		<caption>Several uses of the image tag</caption>
      </table>

      <p>We observe that:</p>
      <ul>
        <li>Images may overlap. Each of the instances of the "path6b.svg" file overlaps with other images.</li>
        <li>Transparency, if it exists in the file, is preserved.</li>
        <li>By default a bitmapped image stretches to fill the rectangle provided.</li>
        <li>We may preserve the aspect ratio of an image.</li>
      </ul>
      <p>It is also important to note that as of this writing, Firefox does not appear to support <em>.svg</em> file types in the &lt;image&gt; tag and both Chrome and Safari seem to have some oddities associated with aspect ratios in this context. (Similar issues can be observed <em>vis &aacute; vis</em> browser support for the &lt;img&gt; tag in HTML.) SMIL animation (discussed later) does not seem to be supported by content in the &lt;image&gt; tag &mdash; that is, a <em>.svg</em> file containing SMIL will not currently be animated when 
		imported via &lt;image&gt;. It is also worth noting that if and when the other browsers do offer support for <em>.svg</em> file types, 
		syntax of the following sort may be preferred since it is namespace-aware:</p>
      <p class="codeExample">
        &lt;image xmlns:xlink=http://www.w3.org/1999/xlink<br />
        xlink:href="myfile.svg"<br />
        x="10" y="10" width="100" height="100" /&gt;
      </p>
      <p>Alternatively, we will frequently include an attribute assignment which reads</p>
      <p class="codeExample">xmlns:xlink=<a href="http://www.w3.org/1999/xlink">http://www.w3.org/1999/xlink</a></p>
      <p>in the opening &lt;svg&gt; tag. This allows the XML definition of all such compound attributes beginning with "xlink" as 
		in xlink:href="url(#r)" to be interpreted properly throughout the document.</p>

      <h4 id="text">&lt;text&gt;</h4>
      <p>Putting text on a page is a natural thing to do. Future versions of SVG are likely to offer more possibilities than we have at the 
		moment and browser support for text seems to be poised for improvement. Right now one should be aware that there are some problems 
		associated with the appearance of text across browsers.</p>
      <p>Nevertheless a few simpler things may be done reliably, simply and consistently. Here's a sort of simplest case:</p>


      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td><code>&lt;text x="0" y="100" font-size="80" fill="red"&gt;<br />Doing text&lt;/text&gt;</code></td>
			<td><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m4b17255a.png" alt="layout and size of text" id="graphics29" height="150" width="415" /></td>
          </tr>
        </tbody>
		<caption>Layout and size of text<p>This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/text2.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/text2.svg</a>.</p></caption>
      </table>

      
      <p>The dimensions of the text (obtained by using the method getBBox(), discussed in later chapters) varies a bit between browsers as 
		shown in table 2 below. Interestingly, similar differences remain in effect even when font-family="monospace" is specified (which was unsupported in 
		FF1.5).</p>
      <table id="table2">
        <tbody>
          <tr><th>Browser</th><th>Left</th><th>Top</th><th>Bottom</th><th>Right</th></tr>
          <tr><th>ASV+IE</th><td>6.15</td><td>42.72</td><td>115.79</td><td>359.48</td></tr>
          <tr><th>FF1.5</th><td>6</td><td>42</td><td>117</td><td>358</td></tr>
          <tr><th>Opera 9</th><td>-0.14</td><td>28.47</td><td>118.53</td><td>337.37</td></tr>
        </tbody>
		<caption>Table 2: Results returned by different browsers for the <code>getBBox()</code> function</caption>
      </table>
      <p>Similar results would be observed for HTML since a fundamental premise of the web has been that font support and layout is a choice left to 
		the browser software.</p>
      <p>The W3C SVG specification reveals that SVG fonts should be equivalent to those of CSS-2, but it may 
		be important to specify generic font families (specifically serif, sans-serif, cursive, fantasy or monospace) to increase the probability 
		that your visitors' browsers can see them. Even so, as the following illustrates, current browser support for font-families is 
		lagging behind the specifications.</p>


		<div class="imgHolder" style="width:573px">
          <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/4f750983.png" alt="appearance of fonts in different browsers" id="graphics30" height="200" width="571" />
		<p>Appearance of fonts in different browsers: ASV+IE, FF1.5 and Opera 9 respectively</p>
	    </div>
      <p>The specification also provides dozens of other ways of controlling the appearance of text, some of which have been implemented in existing 
		browsers. Below is a sampling of some effects that are possible in at least some browsers already:</p>

		<div class="imgHolder" style="width:469px">
		<img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/7fef8678.png" alt="styling and decoration of text" id="graphics31" height="242" width="467" />
		<p>Styling and decoration of text</p>
		<p>This example may be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/text6.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/text6.svg</a>.</p>
		</div>

		
		<p>As of Spring 2009 all five of the primary browsers now support text effects such as shown below.</p>

      <table class="example" style="width:55em">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td><code>&lt;defs&gt;<br /><br />
  &lt;path id="curve" d="M 10 100 C 200 30 300 250 350 50"<br />
    stroke="black" fill="none" stroke-width="5" /&gt;<br /><br />
&lt;/defs&gt;<br /><br />
&lt;text id="T" style="font-family:ariel;font-size:16"&gt;<br /><br />
  &lt;textPath xlink:href="curve"&gt;Hello, here is some text lying along a bezier curve.&lt;/textPath&gt;<br /><br />
&lt;/text&gt;</code>

            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m6f30b1fc.png" alt="text along a bezier curve" id="graphics32" height="109" width="342" />
            </td>
          </tr>
        </tbody>
		<caption>Text along a B&eacute;zier curve</caption>
      </table>
      <p>The path above is defined inside a &lt;defs&gt; tag which serves to define the path but without rendering it. Various flags exist 
		which adjust the positioning of the text along the path, many of which seem not yet to be supported by browsers. One exception is the 
		<code>startOffset</code> attribute of the &lt;textPath&gt; which provides a distance in pixels from the beginning of the curve, where 
		the text will actually begin. When animated with SMIL (see Chapter 4), this attribute makes the text appear to crawl along the 
		curve with speed determined by the SMIL.</p>
      <p>The rate at which browser improvement is bringing new features forward would render quite out-of-date any attempt to state a 
		list of currently supported features, but suffice it to say, there are major browser differences here at the current time.</p>

      <h3 id="operations">Operations: Grouping, Reusing, Scaling, Translation and Rotation</h3>
      <p>Thus far we have had the opportunity to see much similarity between SVG and HTML: two markup languages with tags and attributes that 
		modify the way those tags look. Where SVG starts to look less like a markup language and more like a programming environment is in its 
		ability to reuse and modify its own content (within its own system). That is, elements can be contained in other elements in such a way 
		that containers modify the appearance of the elements inside them. Specifically we can group and reuse elements in ways that simplify 
		maintenance of code and which shorten the overall length of our documents. The &lt;use&gt; (reuse) and &lt;g&gt; (or group) tags bear 
		similarity to the variables and objects encountered in programming languages. And while those tags can be exemplified with examples 
		drawing just on the "simple objects" discussed earlier in this chapter, their utility becomes, perhaps more pronounced once we have 
		the abilities to transform objects using the isometric planar primitive operations of translation, rotation (including reflection), and scaling.</p>

      <h4 id="translate">Transform/translate:</h4>
      <p>The three easiet ways to move things around in SVG are rotation, scaling and translation. All are considered to be special cases of 
		the transform attribute of a tag. Suppose we have an object, like a complex path, which we have drawn (either by typing 
		coordinates, or with a graphical editor) and once we bring it into our SVG document, we discover, that while we like the shape, it 
		needs to be moved around a bit. That's what transform=translate is for. The syntax looks like this:</p>
		<p class="codeExample">transform=translate(<var>dx</var>,<var>dy</var>)</p>
      <p>where <var>dx</var> and <var>dy</var> represent the change in the current position on the x and y axes. Using transform=translate(0,0) would leave an object at 
		its current position. Here's a simple example in which a complex path is drawn near a simple ellipse, before and after the application of a 
		translation 100 pixels leftward and 100 pixels up:</p>

      <table>
		<caption>transform=translate(<var>dx</var>,<var>dy</var>)
		  <p>This example may be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/translate.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/translate.svg</a>.</p>
		</caption>
        <tbody>
          <tr><th>Before translation</th><th>After translation</th></tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m978c97e.png" alt="complex path before translation" id="graphics33" height="374" width="361" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m2fe73654.png" alt="complex path after translation" id="graphics34" height="374" width="361" />
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;path id = "P2" stroke = "black" stroke-width ="2"
opacity = ".6" fill = "#c77"

d = "M 150 220
C 145 244 146 251 135 260 C 124 269 114 287 134 282
C 154 277 162 279 159 288 C 156 297 135 305 148 308
C 161 311 185 315 172 315 C 159 315 150 309 147 314
C 144 319 159 322 156 327 C 153 332 141 348 153 354
C 165 360 185 361 194 354 C 203 347 214 357 212 368
C 210 379 196 400 204 400 C 212 400 237 396 250 394
C 263 392 279 374 276 353 C 273 332 276 308 286 289
C 296 270 325 240 321 215 C 317 190 304 179 286 158
C 268 137 253 111 216 120 C 179 129 163 144 150 170
C 137 196 150 210 160 212 C 170 214 160 222 150 220
" /&gt;</code>
</pre>
            </td>
            <td>
              <pre>
<code>&lt;path id = "P2" stroke = "black" stroke-width = "2"
opacity = ".6" fill = "#c77"
transform="translate(-100,-100)"
d = "M 150 220
C 145 244 146 251 135 260 C 124 269 114 287 134 282
C 154 277 162 279 159 288 C 156 297 135 305 148 308
C 161 311 185 315 172 315 C 159 315 150 309 147 314
C 144 319 159 322 156 327 C 153 332 141 348 153 354
C 165 360 185 361 194 354 C 203 347 214 357 212 368
C 210 379 196 400 204 400 C 212 400 237 396 250 394
C 263 392 279 374 276 353 C 273 332 276 308 286 289
C 296 270 325 240 321 215 C 317 190 304 179 286 158
C 268 137 253 111 216 120 C 179 129 163 144 150 170
C 137 196 150 210 160 212 C 170 214 160 222 150 220
" /&gt;</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>

    <h5 id="rotate">Transform/rotate</h5>
		<p>If we have drawn an object like an ellipse, centered at (cx,cy) and we wish to rotate it clockwise by <var>r</var> degrees, 
		then transform=rotate(<var>r</var>, cx, cy) is the attribute for us. Following is an example of a figure before and after 
		rotation of 120 degrees. The operation is performed via:</p>
		<p class="codeExample">transform="rotate(120,219.5,241)"</p>
      <p>The point (219.5, 241) is chosen as the center of rotation, since it represents the midpoint of the bounding rectangle enclosing 
		the un-rotated shape. (Again this point is determined through a JavaScript calculation involving <code>getBBox()</code>, a method 
		that will be discussed later.)</p>
		<div class="imgHolder" style="width:339px">
		<img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/208d00b2.png" alt="rotating about the center" id="graphics35" height="334" width="337" />
		<p>Rotating about the center</p><p>This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/transformRotate1.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/transformRotate1.svg</a>.</p>
       </div>

      <h5 id="scale">Transform/scale</h5>
		<p>Scaling or resizing an object is a wee bit tricky. The syntax of the command is straightforward but since the scaling operation 
		multiplies all (x,y) coordinates by scaling coefficients, objects will typically appear to move away from or toward the origin as 
		they expand or shrink. In order to keep an object more or less "in place" as it is rescaled, we must combine the scale operation 
		with a translation. Another side effect of scaling is that when negative numbers are multiplied by all the coordinates, the object 
		will appear to flip or reflect about one or both axes.</p>
      <p>The illustration below shows an ellipse centered at (100,50) (as well as an accompanying text label), before and after a 
		rescale by a factor of 2.5. Note that the ellipse's center (like all the points on the ellipse) has each of its coordinates rescaled by the same factor.</p>


      <table class="example">
        <tbody>
          <tr>
            <td colspan="2" class="center"><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/5ed39d2c.png" alt="ellipse, with and without scaling" id="graphics37" height="233" width="404" /></td></tr>
		  <tr><th>Before rescaling</th><th>With rescaling</th></tr>
          <tr>
            <td>
              <code>&lt;ellipse<br />
              cx="100" cy="50" rx="40" ry="20" fill="grey" stroke="black" stroke-width="12" stroke-dasharray="3,5,2"/&gt;</code>
            </td>
            <td>
              <code>&lt;ellipse transform="scale(2.5)" cx="100" cy="50" rx="40" ry="20" fill="grey" stroke="black" stroke-width="12" stroke-dasharray="3,5,2"/&gt;</code>
            </td>
          </tr>
        </tbody>
		<caption>Ellipse, with and without scaling</caption>
      </table>
      <p>Note that the scale command resizes not only the object, but also its border or stroke.</p>
      <p>If we wish to expand a figure differently in one direction than the other, we simply add a second parameter to the transform 
		as shown in the following in which we rescale by a factor of three horizontally, but only x 1.2 vertically.</p>
      <table class="example">
        <tbody>
          <tr>
            <td colspan="2" class="center"><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/445e7580.png" alt="rescaling more horizontally than vertically" id="graphics38" height="152" width="520" />
            </td>
          </tr>
		  <tr><th>Before rescaling</th><th>With rescaling</th></tr>
          <tr>
            <td>
              <pre>
<code>&lt;path

d="M 70 50 L 120,50 120,0 170,100 70,120z"

fill="grey" stroke="black" stroke-width="4"
stroke-dasharray="1,5"/&gt;/code&gt;</code>
</pre>
            </td>
            <td>
              <pre>
<code>&lt;path transform="scale(3,1.2)"

d="M 70 50 L 120,50 120,0 170,100 70,120z"

fill="grey" stroke="black" stroke-width="4"
stroke-dasharray="1,5"/&gt;
</code>
</pre>
            </td>
          </tr>
        </tbody>
		<caption>Rescaling more horizontally than vertically</caption>
      </table>
      <p>Note here that the hash marks associated with the dasharray remain no longer perpendicular to the path.<p>
      <p>Below is an example in which we scale differentially in the x and y directions, preserving the height by 
		multiplying it by 1.0, but flipping and shrinking horizontally by multiplying by -0.5.</p>

	  <div class="imgHolder" style="width:344px">
        <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m3d064a2a.png" alt="flipping and shrinking a path" id="graphics39" height="185" width="342" />
		<p>Differential, negative and fractional scaling</p>
	  </div>
      <p>To see how we might scale something while keeping it centered about the same point, we use multiple transformations: a 
		scale and a translation, as demonstrated in the next section.</p>

      <h5 id="multiple">multiple transformations and more</h5>
      <p>We may combine transformations by simply concatenating as follows:</p>
		<p class="codeExample">transform="translate(-100,-50),scale(1.5)"</p>
      <p>The operations are performed in the order right to left, so in the above case, the scale is applied first, moving 
		all points 1.5 times further from the origin. Then the figure is moved upward to the left.</p>
      <p>In the following, we see how rescaling followed by a translation produces the desired effect of expanding an ellipse 
		but keeping it centered about the same location.</p>

		<div class="imgHolder" style="width:372px">
		<img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m63bb40cb.png" alt="scale then translate" id="graphics40" height="202" width="370" />
		<p>Scale then translate</p>
		</div>
      <p>The original ellipse is centered at (200,100). When we simply rescale it, by a factor of 1.5, the center moves accordingly to 
		(300,150), namely to 1.5 x (200,100). To move the ellipse back to its original center, we then apply a translation: translate (-100,-50), 
		since (300,150) + (-100,-50) = (200,100). This sort of arithmetic is easily automated, if need be, through the use of JavaScript.</p>
      <p>There are two other things about transformations that your author would like you to be aware of.</p>
      <ol class="lower-alpha">
		<li>We may skew objects (deform from their rectangle to an arbitrary parallelogram having two sides parallel 
		to the original) in SVG using SkewX and SkewY tranformations<sup><a class="footnoteanc" href="#footnote9sym" id="footnote9anc">9</a></sup>.</li>
	  <li>We may perform combinations of skew, rotate, translate, and scale using something called the CTM or current transformation 
		matrix. It comes in handy should a whole collection of transforms be applied to an object and we wish to figure out, where 
		at last, it has ended up. This topic is discussed a bit more when we talk about scripting in a later chapter.</li>
	  </ol>


      <h5 id="grouping">Grouping</h5>
      <p>Once we start taking the things we have built and moving them around on the screen, it is natural to want 
		some of them to move together as a unit. The group tag, or &lt;g&gt;, is a tag that merely serves to put 
		elements together, so that they might share a common set of transformations or other attributes.</p>
      <p>Consider the simple figure drawn below with its code as shown:</p>

      <table class="example">
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td><code>&lt;rect x="100" y="100" width="100" height="20" fill="#888" /&gt;<br />
              &lt;rect x="100" y="160" width="100" height="20" fill="#888" /&gt;<br />
              &lt;ellipse cx="150" cy="140" rx="30" ry="100" fill="#bbb" /&gt;<br />
              &lt;rect x="100" y="130" width="100" height="20" fill="#888" /&gt;</code>
            </td>
			<td><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m6324ff8e.png" alt="three rects and an oval" id="graphics41" height="152" width="131" /></td>
          </tr>
        </tbody>
		<caption>Three rects and an oval</caption>
      </table>

      <p>If we wanted to make three copies of it all side by side as in the following illustration, then we could perform 
		two editing replacements: first change all the x="100" statements to x="-20" and the cx="150" to cx="30", then, in the 
		next copy, change the x="100" to x="220"and cx="150" to cx="270". The four statements turn into 12 statements, 8 of 
		which have simple editing applied to effect the change.</p>

      <table style="width:58em">
        <caption>Manually editing lots of coordinates</caption>
        <tbody>
          <tr><td colspan="3" class="center">
                  <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/79e088ce.png" alt="three copies manually editted" id="graphics42" height="144" width="271" />
                </td>
              </tr>
              <tr>
                <td><code>&lt;rect x="-20"y="100" width="100" <br />
				height="20" fill="#888" /&gt; <br /><br />
				&lt;rect x="-20" y="160" width="100" <br />
				height="20" fill="#888" /&gt;<br /><br />
				&lt;ellipse cx="30" cy="140" rx="30" <br />
				ry="100" fill="#bbb" /&gt;<br /><br />
				&lt;rect x="-20"y="130" width="100" <br />
				height="20" fill="#888" /&gt;</code>
                </td>
                <td><code>&lt;rect x="100" y="100" width="100" <br />
				height="20" fill="#888" /&gt; <br /><br />

				&lt;rect x="100" y="160" width="100" <br />
				height="20" fill="#888" /&gt;<br /><br />

				&lt;ellipse cx="150" cy="140" rx="30" <br />
				ry="100" fill="#bbb" /&gt;<br /><br />

				&lt;rect x="100" y="130" width="100" <br />
				height="20" fill="#888" /&gt;</code>
                </td>
                <td><code>&lt;rect x="220" y="100" width="100" <br />
				height="20" fill="#888" /&gt; <br /><br />
				&lt;rect x="220" y="160" width="100" <br />
				height="20" fill="#888" /&gt;<br /><br />
				&lt;ellipse cx="270" cy="140" rx="30" <br />
				ry="100" fill="#bbb" /&gt;<br /><br />
				&lt;rect x="220" y="130" width="100" <br />
				height="20" fill="#888" /&gt;</code>
                </td>
              </tr>
            </tbody>
          </table>

      <p>If the object being replicated were a complex path, the amount of arithmetic we would have to do might become annoying. 
	Fortunately, the &lt;g&gt; tag saves us some work, since instead we might just duplicate the code twice, placing each 
	copy inside groups: <code>&lt;g&gt;copy1&lt;/g&gt;, &lt;g&gt;copy2&lt;/g&gt;</code> and then apply a separate transform to each as shown:</p>

          <table  style="width:58em">
            <caption>Using &lt;g&gt; groups to replicate code with transforms</caption>
            <tbody>
              <tr><th>Transform group 120 pixels to the left</th><th>Original Code</th><th>Transform group 120 pixels to the right</th></tr>
			  <tr>
                <td><code><strong>&lt;g transform = translate(-120,0)&gt;</strong></code><br />
				[place a copy of the same code here]<br />
				<code><strong>&lt;/g&gt;</strong></code>
                </td>
                <td><code>
				&lt;rect x="100" y="100" width="100" <br />
				height="20" fill="#888" /&gt;<br /><br />

				&lt;rect x="100" y="160" width="100" <br />
				height="20" fill="#888" /&gt;<br /><br />

				&lt;ellipse cx="150" cy="140" rx="30"<br /> 
				ry="100" fill="#bbb" /&gt;<br /><br />

				&lt;rect x="100" y="130" width="100"<br />
				height="20" fill="#888" /&gt;</code>
                </td>
                <td><code><strong>&lt;g transform = translate(120,0)&gt;</strong></code><br />
				[place another copy of the same code here]<br />
				<code><strong>&lt;/g&gt;</strong></code>
                </td>
              </tr>
            </tbody>
          </table>
      <p>We end up with a few more characters, but considerably less cognitive effort and time will be expended.</p>

      <h5 id="inherit">Inheriting attributes from the group</h5>
      <p>The group tag may also be used to define other attributes of elements within the group, such as the color used 
		to fill some or all objects. If an object has an attribute defined as</p>
		<p class="codeExample">someNamedAttribute="inherit"</p>
      <p>then it will take whatever value of that attribute its containing group has been assigned.</p>
      <p>In the following illustration, code is reused more effectively than manually editing each of the 
		six rectangles, by letting the rectangles inherit their fill color from their groups.</p>

          <table class="example">
            <caption>Inheriting attributes from the group</caption>
            <tbody>
              <tr>
                <td colspan="2" class="center">
                  <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m4093c286.png" alt="rectangles taking their fill value from the group" id="graphics43" height="146" width="161" />
                </td>
              </tr>
              <tr>
                <td style="width:50%"><code>&lt;g fill="black"&gt; <br />
&lt;rect x="100" y="100" width="100" height="20"
fill="inherit"/&gt;<br /><br />
&lt;rect x="100" y="160" width="100" height="20"<br />
fill="inherit" /&gt;<br /><br />
&lt;ellipse cx="150" cy="140" rx="30" ry="100"
fill="#777" /&gt;<br /><br />
&lt;rect x="100" y="130" width="100" height="20"<br />
fill="inherit" /&gt;<br />
&lt;/g&gt;</code>
                </td>
                <td><code>&lt;g transform="translate(120,0)"<br />
fill="#bbb"&gt;<br /><br />

&lt;rect x="100" y="100" width="100" height="20"<br />
fill="inherit" /&gt;<br /><br />

&lt;rect x="100" y="160" width="100" height="20"<br />
fill="inherit" /&gt;<br /><br />

&lt;ellipse cx="150" cy="140" rx="30" ry="100"<br />
fill="#777" /&gt;<br /><br />

&lt;rect x="100" y="130" width="100" height="20"<br />
fill="inherit" /&gt;<br /><br />
&lt;/g&gt;</code>
                </td>
              </tr>
            </tbody>
          </table>


      <p>In the next section we accomplish the same result but with considerably less code, using the &lt;use&gt; tag.</p>
      <h5 id="use">&lt;use&gt;</h5>
		<p>One more important way to reuse code, and, hence, simplify the process of adjusting it later on, is the &lt;use&gt; 
		tag. This allows us to define an object, give it an identifier (an "id" attribute) and then to reuse 
		that object later on, without having to copy all of its code. Working again with the example used earlier, we will 
		show one more way to not only reuse code, but to simplify it and reduce the overall number of characters.</p>

      <table class="example">
        <caption>Reusing code (with modifications) &mdash; the &lt;use&gt; tag</caption>
        <tbody>
              <tr>
                <td colspan="2" class="center">
                  <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m72c892b8.png" alt="the &lt;use&gt; tag" id="graphics44" height="146" width="161" />
                </td>
              </tr>
              <tr>
                <th>#1</th>
                <td><code>&lt;g fill="black"&gt;<br />
&lt;g id="G"&gt;<br /><br />
&lt;rect x="100" y="100" width="100" height="20" fill="inherit" /&gt;<br />
&lt;rect x="100" y="160" width="100" height="20" fill="inherit" /&gt;<br />
&lt;ellipse cx="150" cy="140" rx="30" ry="100" fill="#777" /&gt;<br />
&lt;rect x="100" y="130" width="100" height="20" fill="inherit" /&gt;<br /><br />
&lt;/g&gt;&lt;/g&gt;</code></td>
              </tr>
              <tr>
                <th>#2</th>
                <td><code> &lt;use xlink:href="G" transform="translate(120,0)" fill="#bbb"&gt;</code>
                </td>
              </tr>
            </tbody>
          </table>

      <p>Above we have built the three rectangles and the oval, with the fill color of the rectangles left undefined: that 
		is, to be inherited from their group. We then put all four objects inside a group with id="G". That group can 
		then be referred to within a &lt;use&gt; tag, by simply typing:</p>
		<p class="codeExample">xlink:href="G"</p>
      <p>This (a hypertext link to the object in this document known as "G")<sup><a class="footnoteanc" href="#footnote10sym" id="footnote10anc">10</a></sup> 
		takes all the code within the object "G" and, as a part of the &lt;use&gt;, builds another instance. In this case 
		we have applied a transform to the new instance to slide it to the left, but we have also defined fill="#bbb" so that 
		all objects having the fill="inherit" property (in this case, just the three rectangles) are colored light grey. 
		In the meantime, we must still assign a color to the rectangles of the first instance, so I've wrapped the group "G" in 
		yet another container and given that container its own fill color (black).</p>
      <p>Another example may help illustrate the compactness and utility that &lt;use&gt; can bring to our code.</p>
      <p>Step 1: We begin with an ellipse and two copies of it, rotated either 30 or 60 degrees.</p>
      <table class="example" style="width:53em">
		<caption>Re-using an ellipse &mdash; Step 1</caption>
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td><pre><code>&lt;g stroke="black" stroke-width="2" fill="none" &gt;
  &lt;ellipse id="g1" cx="100" cy="100" rx="75" ry="40" /&gt;
  &lt;use xlink:href="g1" transform="rotate(30 100 100)"/&gt;
  &lt;use xlink:href="g1" transform="rotate(60 100 100)"/&gt;
&lt;/g&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m7fe560b6.png" alt="one ellipse re-used twice" id="graphics45" height="158" width="167" />
            </td>
          </tr>
        </tbody>
      </table>

      <p>Step 2: We then take the three ellipses, put them in a group, with id="g2"; and then reuse that group, 
		with a new rotation of 90 degrees applied to the whole group. This means we will now have a whole flower 
		consisting of six ellipses (each with different rotations: 0,30,60,90,120 and 150 degrees). Since we intend 
		to also reuse this flower, we'll wrap it together in its own group with id="g3" and let the stroke and fill 
		properties go up to the outermost container, since all things inside share those attribute values.</p>
      <table class="example" style="width:53em">
	    <caption>Re-using an ellipse &mdash; Step 2</caption>
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr>
            <td><pre><code>&lt;g id="g3" stroke="black" stroke-width="2" fill="none"&gt;
  &lt;g id="g2"&gt;
    &lt;ellipse id="g1" cx="100" cy="100" rx="75" ry="40" /&gt;
    &lt;use xlink:href="g1" transform="rotate(30 100 100)"/&gt;
    &lt;use xlink:href="g1" transform="rotate(60 100 100)"/&gt;
  &lt;/g&gt;

  &lt;use xlink:href="g2" transform="rotate(90 100 100)"/&gt;
&lt;/g&gt;</code></pre></td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/4a6bdcdc.png" alt="grouping and re-using twice" id="graphics46" height="158" width="167" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>Step 3. Having grouped the six ellipses together into the object "g3", we will now reuse that object three more 
		times, each with a different color and position. To do this we let the stroke property move up to a new top 
		level that contains the first flower, allowing the inner object "g3" to have its own stroke undefined. Each of 
		the &lt;use&gt; tags which reuse "g3" can then impart its own stroke color.</p>
      <table class="example" style="width:53em">
		<caption>Re-using an ellipse &mdash; Step 3 <p>An animated example of this can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/use4.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/use4.svg</a>.</p></caption>
        <tbody>
          <tr><th>SVG code</th><th>Illustration</th></tr>
          <tr><td><pre>
<code>&lt;g stroke=&quot;black&quot;&gt;
   &lt;g id=&quot;g3&quot; fill=&quot;none&quot; stroke-width=&quot;2&quot;&gt;
   
      &lt;g id=&quot;g2&quot;&gt;
         &lt;ellipse id=&quot;g1&quot; cx=&quot;100&quot; cy=&quot;100&quot; rx=&quot;75&quot; ry=&quot;40&quot;/&gt;
         &lt;use xlink:href=&quot;#g1&quot; transform=&quot;rotate(30 100 100)&quot;/&gt;
         &lt;use xlink:href=&quot;#g1&quot; transform=&quot;rotate(60 100 100)&quot;/&gt;
      &lt;/g&gt;
    
      &lt;use xlink:href=&quot;#g2&quot; transform=&quot;rotate(90 100 100)&quot;/&gt;
   &lt;/g&gt;
&lt;/g&gt;


&lt;g stroke=&quot;blue&quot; transform=&quot;translate(80,0)&quot;&gt;
   &lt;g id=&quot;g3&quot; fill=&quot;none&quot; stroke-width=&quot;2&quot;&gt;
   
      &lt;g id=&quot;g2&quot;&gt;
         &lt;ellipse id=&quot;g1&quot; cx=&quot;100&quot; cy=&quot;100&quot; rx=&quot;75&quot; ry=&quot;40&quot;/&gt;
         &lt;use xlink:href=&quot;#g1&quot; transform=&quot;rotate(30 100 100)&quot;/&gt;
         &lt;use xlink:href=&quot;#g1&quot; transform=&quot;rotate(60 100 100)&quot;/&gt;
      &lt;/g&gt;
    
      &lt;use xlink:href=&quot;#g2&quot; transform=&quot;rotate(90 100 100)&quot;/&gt;
   &lt;/g&gt;
&lt;/g&gt;

&lt;g stroke=&quot;red&quot; transform=&quot;translate(0,80)&quot;&gt;
   &lt;g id=&quot;g3&quot; fill=&quot;none&quot; stroke-width=&quot;2&quot;&gt;
   
      &lt;g id=&quot;g2&quot;&gt;
         &lt;ellipse id=&quot;g1&quot; cx=&quot;100&quot; cy=&quot;100&quot; rx=&quot;75&quot; ry=&quot;40&quot;/&gt;
         &lt;use xlink:href=&quot;#g1&quot; transform=&quot;rotate(30 100 100)&quot;/&gt;
         &lt;use xlink:href=&quot;#g1&quot; transform=&quot;rotate(60 100 100)&quot;/&gt;
      &lt;/g&gt;
    
      &lt;use xlink:href=&quot;#g2&quot; transform=&quot;rotate(90 100 100)&quot;/&gt;
   &lt;/g&gt;
&lt;/g&gt;

&lt;g stroke=&quot;green&quot; transform=&quot;translate(80,80)&quot;&gt;
   &lt;g id=&quot;g3&quot; fill=&quot;none&quot; stroke-width=&quot;2&quot;&gt;
   
      &lt;g id=&quot;g2&quot;&gt;
         &lt;ellipse id=&quot;g1&quot; cx=&quot;100&quot; cy=&quot;100&quot; rx=&quot;75&quot; ry=&quot;40&quot;/&gt;
         &lt;use xlink:href=&quot;#g1&quot; transform=&quot;rotate(30 100 100)&quot;/&gt;
         &lt;use xlink:href=&quot;#g1&quot; transform=&quot;rotate(60 100 100)&quot;/&gt;
      &lt;/g&gt;
    
      &lt;use xlink:href=&quot;#g2&quot; transform=&quot;rotate(90 100 100)&quot;/&gt;
   &lt;/g&gt;
&lt;/g&gt;

</code></pre>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/3e90f526.png" alt="three more re-uses with different colors and translations" id="graphics47" height="240" width="238" />
            </td>
          </tr>
        </tbody>
      </table>


      <h3 id="SVG_web">Putting SVG in a web page</h3>
      <p><a href="#SVG_in_HTML">Chapter 6</a> discusses the issue of various HTML containers that can be used to display SVG 
		content in an HTML web page. We might use &lt;iframe&gt;, &lt;embed&gt; &lt;object&gt; or even &lt;img&gt; and 
		each will work to some extent in modern versions of the five browsers: Firefox, ASV+Internet Explorer, 
		Opera, Chrome, and Safari. While &lt;object&gt; would be the preferred approach from the perspective of compliance with 
		W3C standards, some problems exist with both it and the &lt;iframe&gt; that make "&lt;embed&gt;" a persistent practical 
		recommendation from some experts<sup><a class="footnoteanc" href="#footnote11sym" id="footnote11anc">11</a></sup>. 
		Others point out that this is only for consistency with IE and the ASV plugin and that &lt;object&gt; is preferable.</p>
      <p>Later, in Chapter 6, concerning SVG and HTML, ways of using the more "standards-compliant" &lt;object&gt; tag for 
		SVG content in HTML, as well as "in-line" SVG will be discussed. My own experiments (see, for example, 
		<a href="http://srufaculty.sru.edu/david.dailey/svg/createSVGelementfromHTML.html">here</a> and 
		<a href="http://srufaculty.sru.edu/david.dailey/javascript/frames/objectTest.html">here</a>) together with certain 
		other factors, lead me to use &lt;embed&gt; as the vehicle of choice, though this issue will be discussed in more detail later.</p>
      <p>Given an SVG document, saved with a <em>.svg</em> extension, it may be placed in a web page using an &lt;embed&gt; as follows:</p>

     <table class="example">
        <tbody>
	    <tr><th></th><th>Code</th><th>Illustration</th></tr>
        <tr><th>somefileA.svg</th>
			<td><code>&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;<br />
              &lt;circle r="50"/&gt;<br />
              &lt;/svg&gt;</code>
            </td>
            <td><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m6d66f61a.png" alt="SVG document as seen in web browser" id="graphics48" height="123" width="91" /></td>
        </tr>
        <tr><th>webpage.html</th>
            <td><code>&lt;html&gt;&lt;body&gt;&lt;strong&gt;<br />
              Here is a web page with an &lt;br&gt; SVG file embedded in it&lt;/strong&gt;&lt;br&gt;<br />
              &lt;embed src="/somefileA.svg" height="50"&gt;&lt;/body&gt;&lt;/html&gt;</code>
            </td>
            <td><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/647c833e.png" alt="SVG document in HTML page" id="graphics49" height="146" width="335" /></td>
        </tr>
        </tbody>
        </table>

      <p>This is much as it should appear in any of Firefox, ASV+Internet Explorer, Safari, Opera or Chrome. It is a sort of simplest case, 
		in that fewer keystrokes in the SVG file will probably not do anything in at least one of the browsers.</p>
      <p>Notes:</p>
      <ul>
        <li>The xmlns variable, which in essence instructs the browser how to interpret the dialect of 
		XML known as SVG is required by the standard though some browsers may allow us to leave out 
		those 34 characters. Some browsers do require it so it is best to get accustomed to including it.</li>
        <li>The height="50" attribute in the HTML document may be required in some browsers for the &lt;embed&gt; to be visible.</li>
        <li>That the circle appears as a quarter-circle rather than a whole circle derives from the fact that no cx or cy is 
		specified; by default, both are assumed to be zero.</li>
        <li>An additional variable should be set if one uses any xlink:href attributes in one's document. This 
		was mentioned in this chapter when discussed the &lt;image&gt; tag, but many SVG authors include an 
		attribute value which reads <code>xmlns:xlink="http://www.w3.org/1999/xlink"</code> in their opening &lt;svg&gt; 
		tag. This allows the XML definition of compound attributes (beginning with "xlink" as in xlink:href="url(#<var>r</var>)") 
		to be interpreted properly by the browser.
        </li>
      </ul>
      <p>A natural question emerges at this point: how might we adjust the &lt;embed&gt; so that the SVG content fits properly? 
		There are several issues associated with this question.</p>
      <p>If we as programmers know how big the content in the SVG file is (a sort of smallest rectangle starting at the origin 
		which contains all the drawn objects), then we simply find that amount of real estate in our web page and allocate 
		it to the SVG object through setting attributes on the &lt;embed&gt;. In the example below, we fail to allocate 
		enough space for the &lt;embed&gt; and it appears truncated on the page.</p>

     <table class="example">
		<caption>The effect of specifying different dimensions for the <code>embed</code> element</caption>
        <tbody>
	    <tr><th>Code</th><th>Illustration</th></tr>
        <tr><td><p><strong>somefileA.svg</strong></p>
			<p><code>&lt;svg<br />
			xmlns="http://www.w3.org/2000/svg"&gt;<br />
			&lt;circle r="50" cx="100" cy="100"/&gt;<br />
			&lt;/svg&gt;</code></p>

			<p><strong>webpage.html</strong></p>
			<p><code>&lt;html&gt;&lt;body&gt;&lt;strong&gt;<br />
			Here is a web page with an &lt;br&gt; SVG<br />
			file embedded in it&lt;/strong&gt;&lt;br&gt;<br />
			&lt;embed src="/somefileB.svg" <strong>height="100"<br />
			width="100"</strong>style="border:solid #999 1"&gt;<br />
			And more &lt;br&gt;just for good measure.<br />
			&lt;/body&gt;&lt;/html&gt;</code></p>
            </td>
            <td><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m3a060b97.png" alt="using &lt;embed&gt; to display SVG in HTML" id="graphics50" height="170" width="187" /></td>
          </tr>
          <tr><th style="border-width:0">We change the &lt;embed&gt; so it's bigger:</th><th style="border-width:0">And now the graphic fits</th></tr>
          <tr><td><code>&lt;embed src="/somefile1.svg" <strong>height="150" width="150"</strong><br />
                  style="border:solid #999 1"&gt;</code>
                </td>
                <td colspan="2" class="center" valign="top">
                  <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/152a7d09.png" alt="making the &lt;embed&gt; bigger" id="graphics51" height="221" width="231" />
                </td>
              </tr>
            </tbody>
          </table>

      <p>Increasing the size of the &lt;embed&gt; allows the graphic to fit in the viewing area. 
		But in this case we had to take what we knew of the radius of the circle and add that to 
		its center to calculate an appropriate size for the &lt;embed&gt;. We might prefer a 
		technique which adjusts to the graphic more automatically. The following accomplishes this 
		by establishing a "viewBox": a relativized coordinate system within the SVG. By centering the circle 
		relative to the SVG space through the viewBox (which is, in this case, a 200 x 200 pixel 
		rectangle) and then letting the height and width attributes of the SVG expand to 100% of 
		the available space, then, the SVG will expand or contract as needed to fit the &lt;embed&gt;. More 
		on the viewBox attribute will be discussed in the section on zooming and panning in a later chapter.</p>

     <table class="example">
       <caption>Introducing the viewBox</caption>
       <tbody>
	    <tr><th>Code</th><th>Illustration</th></tr>
        <tr><td><p><strong>somefileC.svg</strong></p>
		<p><code>&lt;svg xmlns="http://www.w3.org/2000/svg"
		width="100%" height="100%" viewBox="0 0 200 200"&gt;<br />
		&lt;circle r="50" cx="100" cy="100"/&gt;<br />
		&lt;/svg&gt;</code></p>
        <p><strong>webpage.html</strong></p>
		<p><code>&lt;html&gt;&lt;body&gt;&lt;b&gt;<br />
	  	Here is a web page with an &lt;br&gt; SVG<br />
		file embedded in it&lt;/b&gt;&lt;br&gt;<br />
		&lt;embed src="/somefileC.svg"<br />
		height="100" width="100" style="border:solid #999 1"&gt;<br />
		And more &lt;br&gt;just for good measure.<br />
		&lt;/body&gt;&lt;/html&gt;</code></p>
        </td>
        <td><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/mdcb58f3.png" alt="illustration of SVG in HTML" id="graphics52" height="174" width="205" /> </td>
        </tr>
        </tbody>
        </table>


      <p>The above solution scales nicely, in the sense that if we define the size of the embed as a percentage of the 
		browser window then the SVG will expand or contract in a more customized way.</p>
     <table class="example">
     <tbody>
       <tr><th>HTML Code</th><th>Appearance in the browser</th></tr>
       <tr>
         <td><code>&lt;html&gt;&lt;body&gt;&lt;strong&gt;
		Here is a web page with an &lt;br&gt; SVG file embedded in it&lt;/strong&gt;<br /><br />
		&lt;embed src="/somefileC.svg" width="100%" height="30%" style="border:solid #999 1"&gt;<br />
		And more &lt;br&gt;just for good measure.<br /><br />
		&lt;/body&gt;&lt;/html&gt;</code></td>
            <td><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/1ba9b003.png" alt="SVG scaled to a proportion of size of web page" id="graphics53" /></td>
          </tr>
        </tbody>
	   <caption>SVG scaled to a proportion of size of web page</caption>
      </table>

      <p>If we wish to use JavaScript to interact with the SVG document (though these topics are the subject of 
		much to come in later chapters), then we may wish to know the size of the SVG object (if it is 
		specified in absolute terms). To determine its width and height we might use</p>
		<p class="codeExample">document.embeds[0].clientWidth<br />
        document.embeds[0].clientHeight.</code></p>
      <p>Since users of Internet Explorer and some older browsers will need the Adobe SVG Viewer plugin, it 
		makes good sense to include the following attribute in one's embed tag:</p>
  	  <p class="codeExample">pluginspage="http://www.adobe.com/svg/viewer/install/"</p>
      <p>This allows the user to find out what they need in order to actually see the SVG should the browser not be SVG capable.</p>
      <p>If one is interested in compliance even with very old browsers (e.g. Netscape Navigator 4 or older) 
		the SVG Wiki<sup><a class="footnoteanc" href="#footnote12sym" id="footnote12anc">12</a></sup> suggests 
		wrapping an &lt;object&gt; around an &lt;embed&gt; as follows:</p>
      <p class="codeExample">&lt;object data="sample.svgz" type="image/svg+xml" width="400" height="300"&gt;<br />
		<span>&lt;embed src="/sample.svgz" type="image/svg+xml" width="400" height="300" /&gt;</span><br />
		&lt;/object&gt;</p>
      <p>What does seem to work for both ASV+Internet Explorer and other browsers is the following:</p>
      <p class="codeExample">&lt;object id="E" type="image/svg+xml" data="ovals.svg" width="320" height="240"&gt;<br />
	  <span>&lt;param name="src" value="ovals.svg"&gt;</span><br />&lt;/object&gt;</p>
      <p>Again, while it seems that the browser developers are beginning to converge on workable solutions to these 
		things, the future may see the use of &lt;embed&gt; decline as support for &lt;object&gt; becomes stronger, consistent 
		with published standards. However, with the HTML standard under current revision (&lt;embed&gt; is in the current HTML5 
		draft) and with alternatives to the Adobe plugin likely to emerge it is difficult to see how this particular microfuture may develop.</p>
      <p>Using events within either HTML or SVG to send messages to the other's scripts and DOM is covered in detail <a href="#scripting_HTML">later</a>.</p>



<!-- ########################################## PA Review Ends, Dec 2010 ################################################### -->
<!-- ####################################################################################################################### -->
<!-- ################################################# CHAPTER III ######################################################### -->
<!-- ####################################################################################################################### -->

      <h2 id="fancy">Chapter III - Fancier SVG Effects</h2>
      <p>
        As a graphics language, SVG is not limited to just a set of graphic primitives (albeit ones with a rich set of attributes). There are other ways of filling, cropping and distorting objects that greatly enhance our arsenal of tools.<br />
      </p>
      <h3 id="gradients">
        Gradients
      </h3>
      <p>
        The term "gradient" refers to a gradual change of colors, blending from one into the next, generally with the small local changes in color values being imperceptible. It is fairly easy to define a gradient in SVG. First we build a gradient object, then we use it as the fill (or stroke) of another object or set of objects. The gradient object consists of a series of colors (called stop-colors) and the ways those colors will be faded into one another. There are two primary types of gradient: radial, in which the colors surround some central point in concentric bands, and linear in which the transitions all take place perpendicular to some basic line or direction.
      </p>
      <h5 id="stop_stop-color">
        &lt;stop&gt; and stop-color
      </h5>
      <table class="example">
         <caption>Gradients applied to a path</caption>
        <tbody>
          <tr>
            <td colspan="2">
              <code>&lt;path d="M 100 200 200 200 150 100 z"<br />
              stroke="black" stroke-width="2" fill="url(#g)" /&gt;</code>
            </td>
          </tr>
          <tr>
            <th>
              linear
            </th>
            <th>
              radial
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;linearGradient id="g"&gt;
  &lt;stop offset="0" stop-color="white"/&gt;
  &lt;stop offset="1" stop-color="black"/&gt;
&lt;/linearGradient&gt;</code>
</pre>
            </td>
            <td>
              <pre>
<code>&lt;radialGradient id="g"&gt;
  &lt;stop offset="0" stop-color="white"/&gt;
  &lt;stop offset="1" stop-color="black"/&gt;
&lt;/radialGradient&gt;</code>
</pre>
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m28ee7b19.png" alt="triangle with linear gradient" id="graphics54" height="189" width="291" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m3e0074ed.png" alt="triangle with radial gradient" id="graphics55" height="189" width="291" />
            </td>
          </tr>
          <tr>
            <th>
              White is applied from left to right
            </th>
            <th>
              White is applied from center to outside
            </th>
          </tr>
        </tbody>
      </table>
      <p>
        The object to which the gradient will be applied uses a local url (similar to the xlink:href we saw earlier with the &lt;use&gt; object) as the attribute value of the "fill" attribute, hence demonstrating that an object may have a color or a gradient as its fill, but not both.
      </p>
      <p>
        Note that in the linear gradient above, two "stops" have been built. This means the gradient has two colors applied to it, one for each stop. Those colors are determined by the stop-color attribute. The offset attribute determines where between 0% and 1=100% of the way from left to right, the associated color (in this case black or white) should be applied. That is, white is applied at the leftmost part of the triangle, while black is applied to the rightmost part. Shades of grey gradually darken as we move to the right, with a grayscale value of 128/256 or 50% occurring halfway across the image or along the line where x=150. For the radial gradient, the midpoint of the bounding rectangle around the path is chosen as the center. From there we apply our first stop-color (zero percent of the way out toward the corners of the bounding box). Black will be applied to the four corners of the bounding rectangle, with shades of grey gradually lightening as we move toward the center.
      </p>
      <h4 id="more_stops">More &lt;stop&gt;s</h4>
      <p>
        The number of stops in a gradient need not be limited to two. The rectangles below are 200 pixels wide. That means the linear gradient is white at 0 pixels and 150 pixels from the left, and black at 50 and 200 pixels.<br />
      </p>
      <table class="example">
          <caption>Four stops apiece for linear and radial gradients applied to &lt;rect&gt;</caption>
        <tbody>
          <tr>
            <td>
              <code>&lt;stop offset="0" stop-color="white"/&gt;<br />
              &lt;stop offset=".25" stop-color="black"/&gt;<br />
              &lt;stop offset=".75" stop-color="white"/&gt;<br />
              &lt;stop offset="1" stop-color="black"/&gt;</code>
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m3c2cf5fa.png" alt="linear and radial gradients with four stops" id="graphics56" height="189" width="303" />
            </td>
          </tr>
        </tbody>
      </table>
      <h4 id="angles_and_centers">Varying angles and centers</h4>
      <p>
        Next, we observe that we can change the angle that a linear gradient traverses its fill, or the center point from which the waves of the radial gradient ripple outward.
      </p>
      <table class="example">
        <tbody>
          <tr>
            <td>
              The linear gradient in the underlying layer has several stops in black, white and grey. Ordinarily the color-bands would run vertically. We have rotated their angle 30 degrees though with a gradientTransform, rotated about the center (50%,50%) of the &lt;rect&gt;.
            </td>
            <td colspan="2">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/mc46757.png" alt="gradients which vary fx and rotation" id="graphics57" height="216" width="216" />
            </td>
            <td>
              The radial gradient in the foreground has had its fx (the x position of its focus) changed to 95% meaning that instead of concentric rings being centered about the middle of the &lt;rect&gt;, they are now offset to its extreme right side.
            </td>
          </tr>
          <tr>
            <td colspan="2">
              <code>&lt;linearGradient id="l" gradientTransform="rotate(30 .5 .5)"&gt;<br />
              &lt;stop offset=".0" stop-color="black"/&gt;<br />
              &lt;stop offset=".1" stop-color="white"/&gt;<br />
              &lt;stop offset=".2" stop-color="black"/&gt;<br />
              &lt;stop offset=".3" stop-color="grey"/&gt;<br />
              &lt;stop offset=".4" stop-color="black"/&gt;<br />
              &lt;stop offset=".7" stop-color="white"/&gt;<br />
              &lt;stop offset=".9" stop-color="black"/&gt;<br />
              &lt;/linearGradient&gt;<br />
              &lt;rect fill="url(#l)" width="200" height="200"/&gt;</code>
            </td>
            <td colspan="2">
              <code>&lt;radialGradient id="r" fx=".95"&gt;<br />
              &lt;stop offset=".1" stop-color="white"/&gt;<br />
              &lt;stop offset=".6" stop-color="black"/&gt;<br />
              &lt;stop offset=".9" stop-color="white"/&gt;<br />
              &lt;stop offset="1" stop-color="black"/&gt;<br />
              &lt;/radialGradient&gt;<br />
              &lt;rect fill="url(#r)" y="60" width="200" height="80"/&gt;</code>
            </td>
          </tr>
        </tbody>
      </table>
      <h4 id="stop-opacity">Stop-opacity</h4>
      <p>In addition to specifying the color of a &lt;stop&gt; within a gradient, we may also specify its opacity through 
		an attribute known as stop-opacity. We may thus make gradients act like differential masks, gradually allowing 
		an image underneath to fade in to view.</p>
	  <p class="codeExample">&lt;stop offset=".8" stop-color="black" stop-opacity="0.5"/&gt;</p>
      <p>Stop-opacity (like regular opacity of drawn objects) takes on values between 0 (transparent) and 1.0 (opaque).</p>
      <p>Here are some examples in which stop-opacity has been used with gradients to allow differing amounts of what is 
		underneath to be visible along a partly transparent gradient.</p>
      <table class="example">
		<caption>Various applications of stop-opacity within gradients</caption>
		<tbody>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/364284f2.png" alt="one gradient with three rotations" id="graphics58" height="202" width="146" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/2f252727.jpg" alt="stop-opacity used to change color tones" id="graphics59" height="178" width="192" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/43b45639.png" alt="superimposed gradients reminiscent of flame" id="graphics60" height="201" width="164" />
            </td>
          </tr>
          <tr>
            <th>
              Superimposition of three copied but rotated linear gradients.
            </th>
            <th>
              Changing tonalities with a radial gradient over an &lt;image&gt;
            </th>
            <th>
              Two radial gradients superimposed
            </th>
          </tr>
          <tr>
            <td colspan="3" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/55f2e56c.png" alt="use of spreadMethod to make wild pattern" id="graphics61" height="310" width="563" />
            </td>
          </tr>
          <tr>
            <th colspan="3">
              Two radial gradients with spreadMethod="repeat" (see below)
            </th>
          </tr>
          <tr>
            <td colspan="3">
              These examples may be seen at<br />
              <ul>
                <li>
                  <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/gradient10.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/gradient10.svg</a>
                </li>
                <li>
                  <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/gradient9.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/gradient9.svg</a>
                </li>
                <li>
                  <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/gradient7.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/gradient7.svg</a>
                </li>
                <li>
                  <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/gradient11c.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/gradient11c.svg</a>
                </li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>
      <h4 id="spreadMethod">spreadMethod</h4>
      <p>The spreadMethod determines how the gradient will fill a shape if it happens to "run out" before the image is filled. 
		Suppose, as in the example below left, we have a radial gradient which fills an ellipse but the stops of which are 
		so close to the center that its effect is constrained to a small portion of the ellipse. We might choose to replicate 
		that fill pattern replicating the color transitions multiplicative outward as shown in the example on the right. The two 
		examples are the same except that the latter one has an attribute of spreadMethod="repeat" defined. In order for this 
		method to work, the attribute gradientUnits="userSpaceOnUse" must also be assigned.</p>
      <table class="example">
        <tbody>
          <tr>
            <th>
              spreadMethod is undefined
            </th>
            <th>
              spreadMethod="reflect"
            </th>
          </tr>
          <tr>
            <td colspan="2" style="text-align:center">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m5f379987.png" alt="radialGradient with and without spreadMethod" id="graphics62" height="237" width="452" />
            </td>
          </tr>
          <tr>
            <td>
              <pre><code>&lt;radialGradient id="gradient1"
  cx="30%" cy="60%" r="31" fx="26%" fy="34%"&gt;<br />
  &lt;stop offset="0" stop-color="grey"/&gt;<br />
  &lt;stop id="OF" offset="0.5" stop color="white"/&gt;<br />
  &lt;stop offset="1" stop-color="black"/&gt;<br />
&lt;/radialGradient&gt;</code></pre>
            </td>
            <td>
              <pre><code>&lt;radialGradient id="gradient1"
  cx="30%" cy="60%" r="31" fx="26%" fy="34%"<br />
  spreadMethod="reflect" gradientUnits="userSpaceOnUse"&gt;<br />
  &lt;stop offset="0" stop-color="grey"/&gt;<br />
  &lt;stop id="OF" offset="0.5" stop-color="white"/&gt;<br />
  &lt;stop offset="1" stop-color="black"/&gt;<br />
&lt;/radialGradient&gt;</code></pre>
            </td>
          </tr>
        </tbody>
      </table>
      <h3 id="patterns">Patterns</h3>
      <p>Like a gradient, a pattern defines a fill method that may be applied to a given shape. In the case of a 
		pattern though, we may specify some graphics that fill a given rectangle within a pattern, and then allow 
		the pattern to replicate across the region being filled. An example should make it fairly clear.</p>
      <p>We define three identical ellipses in close proximity to one another:</p>
      <p class="codeExample">
        &lt;g id="ovals3" fill="#835" stroke-width=".7" stroke="#006"&gt;<br />
        <span>&lt;ellipse cx="16" cy="8" rx="4" ry="2"/&gt;</span><br />
        <span>&lt;ellipse cx="8" cy="3" rx="4" ry="2"/&gt;<span><br />
        <span>&lt;ellipse cx="5" cy="11" rx="4" ry="2"/&gt;</span><br />
        &lt;/g&gt;<br />
      </p>
      <p>Note that these ellipses all fit inside the rectangle (0,0) to (22,15) without any of the ellipses extending past 
		the edges. Now, we will build a pattern-space: a rectangle of size 22 by 15, in which the three ovals are placed. 
		(We use the patternUnits attribute to make sure the coordinates of the pattern conform to the absolute viewing window 
		rather than to fractions of the object being filled.)</p>
      <div class="codeExample">
        &lt;pattern id="Oval" patternUnits="userSpaceOnUse" width="22" height="15" &gt;<br />
        <span>&lt;use xlink:href="ovals3"/&gt;</span><br />
        &lt;/pattern&gt;
      </div>
		<p>We then define a region (in this case another ellipse) and let the pattern called "Oval" be used to fill it.</p>
      <p class="codeExample">&lt;ellipse fill="url(#Oval)" cx="50%" cy="50%" rx="20%" ry="14%"/&gt;</p>
	  <p>Now we put it all together:</p>
      <table class="example">
		<caption>The definition and use of a &lt;pattern&gt;</caption>
        <tbody>
          <tr>
            <th>The pattern itself (scale x 6):</th>
            <td rowspan="2">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/957b3a5.png" alt="Three ovals to be used in a pattern" id="graphics63" height="91" width="134" />
            </td>
          </tr>
          <tr>
            <td><pre>&lt;g id="ovals3" fill="#835" stroke-width=".7" stroke="#006"&gt;
  &lt;ellipse cx="16" cy="8" rx="4" ry="2"/&gt;
  &lt;ellipse cx="8" cy="3" rx="4" ry="2"/&gt;
  &lt;ellipse cx="5" cy="11" rx="4" ry="2"/&gt;
&lt;/g&gt;</pre></td>
          </tr>
          <tr>
            <th colspan="2">Applied to a region</th>
          </tr>
          <tr>
            <td colspan="2"><pre>&lt;defs&gt;
  &lt;pattern id="Oval" patternUnits="userSpaceOnUse" width="22" height="15" &gt;
    &lt;use xlink:href="ovals3"/&gt;
  &lt;/pattern&gt;
&lt;/defs&gt;
&lt;ellipse fill="#7ac" cx="50%" cy="50%" rx="20%" ry="14%"/&gt;
&lt;ellipse fill="url(#Oval)" cx="50%" cy="50%" rx="20%" ry="14%"/&gt;</pre></td>
          </tr>
          <tr>
            <td colspan="2">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/a7bc72.png" alt="use of pattern atop a blue background" id="graphics64" height="163" width="341" />
            </td>
          </tr>
          <tr>
            <td colspan="2">This example may be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/pattern1d.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/pattern1d.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>In the above example, note that another ellipse (the blue one) has been placed under the pattern just to help see how 
		the pattern, when not completely filled, is actually transparent.</p>
      <p>The objects we place inside a pattern can be numerous and complex, as shown in the following example, where the objects 
		are ellipses filled with reflected gradients.</p>
      <table class="example">
         <caption>A pattern space filled with reflected gradients in ovals.</caption>
        <tbody>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/17eec9cc.jpg" alt="a complex pattern" id="graphics65" height="181" width="398" />
            </td>
          </tr>
        </tbody>
      </table>
      <h3 id="masks_clips">
        Masks and clip-paths
      </h3>
      <p>
        While using the stop-opacity of a gradient can allow us to appear to clip or crop an underlying image down to a smaller region in the shape of either a rectangle (in the case of linear gradients) or ellipse (in the case of radial gradients), this technique gives us no easy way to clip down to an arbitrary polygon<sup><a class="footnoteanc" href="#footnote13sym" id="footnote13anc">13</a></sup>.
      </p>
      <p>
        Masks and clip-paths are a more realistic approach to cutting a shape out of an underlying picture.
      </p>
      <p>The &lt;mask&gt; and &lt;clipPath&gt; tags provide similar sets of capabilities. We may think of a &lt;clipPath&gt; as a special case of a &lt;mask&gt; which is slightly simpler to use, but not quite so powerful. As such, we will introduce it first.</p>

      <p id="clipPath"><strong>the &lt;clipPath&gt;</strong></p>
      <p>We use a &lt;clipPath&gt; to carve a shape into another graphic element.</p>
      <p>That is, a &lt;clipPath&gt; is a container for a set of graphic elements (any combination of 
	<a href="http://www.w3.org/TR/SVG/paths.html#PathElement">'path'</a>, <a href="http://www.w3.org/TR/SVG/text.html#TextElement">'text'</a>, 
	<a href="http://www.w3.org/TR/SVG/shapes.html#RectElement">'rect'</a>, <a href="http://www.w3.org/TR/SVG/shapes.html#CircleElement">'circle'</a>, 
	<a href="http://www.w3.org/TR/SVG/shapes.html#EllipseElement">'ellipse'</a>, <a href="http://www.w3.org/TR/SVG/shapes.html#LineElement">'line'</a>,
	<a href="http://www.w3.org/TR/SVG/shapes.html#PolylineElement">'polyline'</a>, <a href="http://www.w3.org/TR/SVG/shapes.html#PolygonElement">'polygon'</a>,
	<a href="http://www.w3.org/TR/SVG/struct.html#ImageElement">'image'</a> and <a href="http://www.w3.org/TR/SVG/struct.html#UseElement">'use'</a>), 
	which when applied to another graphic element, through its clip-path attribute, results in the restriction of the visible part of 
	that graphic element to the defined clipPath.</p>
    <p>In the example below, an &lt;image&gt; tag is defined with a clip-path attribute referring to to a simple &lt;clipPath&gt; 
	containing an ellipse. The rendered portion of the image is limited to those pixels that are within the ellipse. As with 
	gradients and other SVG items containing references to things defined elsewhere in the document, the clipPath is given 
	an <em>id</em> and then the thing to be clipped by it refers to that id within its <em>clip-path</em> attribute.</p>
      <table class="example">
        <caption>A simple &lt;clipPath&gt; applied to an &lt;image&gt;</caption>
        <tbody>
          <tr>
            <td class="center">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/6215a0f8.jpg" alt="bitmapped image restricted to clipPath" id="graphics66" />
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>
&lt;clipPath id="CP"&gt;
&lt;ellipse cx="330" cy="80" rx="70" ry="25"/&gt;
&lt;/clipPath&gt;

&lt;image xlink:href='thesoul2.jpg' y="0" x="200" width="35%" height="40%" 
clip-path="url(#CP)"/&gt;
  </code>
  
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>We may insert more than one graphic element inside a clipPath, and the graphic element may itself be complex (in 
		the sense that a fill-method="evenodd" assignment would render the region with more than one contiguous sub-region). 
		If an element is complex in this way, then it must have its clip-method (rather than its fill-method) set to "evenodd." 
		The example below shows a clipPath containing three shapes inside it: two simple ellipses and a complex path with two 
		distinct subregions. A single rectangle has been placed "behind" the image, so that we may observe that the regions 
		cropped away from the rendered image are indeed invisible.</p>
      <table class="example">
        <caption>&lt;clipPath&gt; containing three graphic elements and applied to an &lt;image&gt;</caption>
        <tbody>
          <tr>
            <td class="center">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/6db54f68.jpg" alt="bitmap clipped by complex regions" id="graphics67" />
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;rect x="322" y="0" height="200" width="20"
   fill="url(#g)"/&gt;
&lt;clipPath id="CP"&gt;
   &lt;ellipse cx="335" cy="25" rx="70" ry="25"/&gt;
   &lt;ellipse cx="335" cy="80" rx="90" ry="25"/&gt;
   &lt;path d="M 270 140 A 65 30 0 1 1 270 141 M 308
   128 A 25 7 0 1 1 308 129" clip-rule="evenodd"/&gt;
&lt;/clipPath&gt;
&lt;image xlink:href='thesoul2.jpg' y="0" x="200"
width="35%" height="40%" clip-path="url(#CP)"/&gt;
</code>
</pre>
            </td>
          </tr>
          <tr>
            <td>
              This example may be see at <a style="font-size: 12px;" href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath1.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath1.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>Two &lt;clipPath&gt;s may be intersected. The following demonstrates a picture being clipped first to 
		a star-shaped region "ST". The result, "I", is then reused (being reflected and translated) with a new clip-path 
		applied &mdash; one that happens to coincide with a rectangle, "R", that passes beneath it and is reused to form 
		the second clipping path, "C2" . The example is an interesting one since it illustrates some of the complex ways in 
		which SVG objects can be combined with one another.</p>
      <table class="example">
         <caption>Repeated clippings of an &lt;image&gt;: first to a star, then to a rectangular subregion of the star.</caption>
        <tbody>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/34ebe989.jpg" alt="intersection of clipPaths" id="graphics68" />
            </td>
          </tr>
          <tr>
            <td>
              <pre>&lt;clipPath id="ST" &gt;
  &lt;path d = "M 204 247 24 189 135 343 135 152 24 306 z"/&gt;
&lt;/clipPath&gt;

&lt;image xlink:href='p76.jpg' y="140" x="-30" id="I"
width="35%" height="40%" clip-path="url(#ST)"/&gt;

&lt;rect id="R" x="0%" y="215" height="16%" width="100%" fill="#734" opacity=".4"/&gt;

&lt;clipPath id="C2"&gt;
   &lt;use xlink:href="#R"/&gt;
&lt;/clipPath&gt;

&lt;use xlink:href="#I" clip-path="url(#C2)" transform="translate(416,0) scale(-1,1)"/&gt;</pre>
            </td>
          </tr>
          <tr>
            <td>A similar example can be seen at <a style="font-size: 12px;" href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>Above, we have taken the result "I" of a clipping operation and applied another clip to that. We might accomplish a 
		similar result, following from the above code by applying the "ST" <em>clipPath</em> as a clipping path to 
		another <em>clipPath</em> containing the rectangle "R" as shown in the following code.</p>
		<p class="codeExample">&lt;clipPath id="C3" clip-path="url(#ST)"&gt;<br />
              <span>&lt;use xlink:href="#R"/&gt;</span><br />
              &lt;/clipPath&gt; &lt;image xlink:href='../p76.jpg' y="150" x="350" width="35%" height="40%" clip-path="url(#C3)"/&gt;</p>
      <p>It should also be noted that the major SVG browsers show some inconsistent behavior regarding <em>clipPaths</em> at the 
		current point in time. While all browsers seem to agree on the handling of the earlier example involving two &lt;image&gt; 
		tags above, the addition of additional complexity in the URL cited as viewed in different browsers is markedly different, with 
		some, but not all of the differences being attributable to the presence of SMIL. Neither Firefox, Safari, nor Chrome seems to 
		appreciate the application of a clip-path directly to a clipPath, though Opera and ASV+IE behave as one might expect on 
		the basis of intuition alone.</p>
      <p>Because of the expressive power of SVG, there are often multiple ways to accomplish the same end. As demonstrated below, we might 
		clip an image to a shape using the clipPath, as we have investigated in this section, but we might also use the &lt;mask&gt;, 
		a composite filter (covered in the next chapter), or simply overlay a rectangle with a hole in it (the least elegant of the 
		approaches). All but the last approach actually remove unwanted parts of the picture as is illustrated by the rectangle which 
		appears behind the first three images, but is interrupted by the overlaid region in the fourth.</p>
      <table class="example">
        <caption>Clipping to a shape using clipPath, mask, composite, and overlay.</caption>
        <tbody>
          <tr>
            <td>
              <pre>&lt;clipPath id="CP"&gt;
  &lt;ellipse cx="50%" cy="65" rx="15%" ry="60"/&gt;
&lt;/clipPath&gt;

&lt;image xlink:href='p78.jpg' y="0" x="30%" width="35%" height="160" clip-path="url(#CP)"/&gt;</pre>
            </td>
            <td rowspan="4">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/7c756afa.jpg" alt="several different ways of restricting one shape to the outline of another" id="graphics69" />
            </td>
          </tr>
          <tr>
            <td>
              <pre>&lt;mask id="Ma"&gt;
  &lt;ellipse cx="55%" cy="190" rx="15%" ry="60" fill="white"/&gt;
&lt;/mask&gt;

&lt;image xlink:href='thesoul2.jpg' y="110" x="30%" width="35%" height="160" mask="url(#Ma)"/&gt;</pre>
            </td>
          </tr>
          <tr>
            <td><pre>&lt;ellipse style="filter:url(#B)" cx="50%" cy="315" rx="15%" ry="60"/&gt;
&lt;filter id="B"&gt;
  &lt;feImage xlink:href='p74.jpg' y="240" height="160" width="90%"/&gt;
  &lt;feComposite operator="in" in2="SourceGraphic" /&gt;
&lt;/filter&gt;</pre>
            </td>
          </tr>
          <tr>
            <td><pre>&lt;image xlink:href='p76.jpg' y="380" x="300" width="300" height="155"/&gt;
&lt;path d="M 300 380 L 600 380 600 535 300 535 M
320 457 A 120 60 0 1 1 320 458" fill="white" fill-rule="evenodd"/&gt;</pre>
            </td>
          </tr>
        </tbody>
      </table><a name="mask" id="mask"></a>
      <p>
        <strong>The &lt;mask&gt;</strong>
      </p>
      <p>
        As can be seen from the above illustration, the mask and the clipPath have much in common. The fundamental difference is that while the clipPath provides an all-or-none clipping function, the mask can provide partial occlusion of the underlying object based on color values provided within the mask.
      </p>
      <p>
        In a sort of simplest case (see the figure "<em>Clipping to a shape using clipPath, mask, composite, and overlay</em>" above), a mask, just like a clipPath, provides a region that divides the object to be clipped into two parts: the visible (<em>black</em> or opaque) part and the invisible (<em>white</em> or transparent) part. A mask also allows, however, for this division to provide an alpha channel to an object based on color or transparency values of the mask. That is, suppose instead of merely clipping a bitmap or other graphic we wish to make parts of it invisible or partly visible, while we might see a gradual transition from invisible to visible in other parts.
      </p>
      <p>
        To illustrate the difference between a clipPath and a Mask, consider the following example.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="426">
        <col width="410" />
        <tbody>
          <tr>
            <td class="caption">
              A gradient &lt;mask&gt; applied to a bit of &lt;text&gt;
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m270b1a50.jpg" alt="a gradient gradually masking a text" id="graphics70" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;linearGradient id="gradient1" &gt;<br />&lt;stop offset="0.0" stop-color="black"/&gt;<br />&lt;stop offset="1" stop-color="white"/&gt;<br />&lt;/linearGradient&gt;<br /><br />&lt;mask id="Ma"&gt;<br />&lt;rect x="300" y="300" width="400" height="100"<br />fill="url(#gradient1)"/&gt;<br />&lt;/mask&gt;<br /><br />&lt;text x="220" y="365" font-family="impact"<br />font-size="52" mask="url(#Ma)" fill="black"&gt;
<br />Some Masked Text: it outsprawls its mask<br />&lt;/text&gt;</code>
</pre>
            </td>
          </tr>
          <tr>
            <td class="example">
              This example may be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/mask6.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/mask6.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        A simple linear gradient is defined ranging from black to white as we move from left to right. The gradient is applied to a rectangle starting at (x,y)=(300,300) and ending at (x+w,y+h)=(700,400). The rectangle is not actually visible since it is part of a mask that has id="Ma". The mask is then applied to a text object, the bounds of which extend well beyond the rectangle of the mask, in both horizontal directions. Since <em>black</em>, at the left side of the mask, is equivalent (at least in the case of RGB images) to "opaque," the text is hidden at that side. As we move toward the right (which in this case coincides with <em>white</em> and hence "transparent") the text becomes more visible (since its mask is more transparent).
      </p>
      <p>
        In the next example, we look a bit closer at the mask, this time using four different transparency levels (also known as alpha values) within the mask, applied through four separate rectangles.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="550">
        <col width="550" />
        <tbody>
          <tr>
            <td class="caption">
              Discrete levels of masking opacity
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m5a1fc942.png" alt="Discrete levels of masking opacity" id="graphics71" height="256" width="422" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;g id="<strong>RS</strong>"&gt;
  &lt;rect x="300" y="100" width="100" height="100" fill="rgb(25%,25%,25%)"/&gt;
  &lt;rect x="400" y="100" width="100" height="100" fill="rgb(50%,50%,50%)"/&gt;
  &lt;rect x="500" y="100" width="100" height="100" fill="rgb(75%,75%,75%)"/&gt;
  &lt;rect x="600" y="100" width="100" height="100" fill="rgb(100%,100%,100%)"/&gt;
&lt;/g&gt;

&lt;text x="315" y="175" font-family="impact"
  font-size="52" fill="red"&gt;<strong>unmasked values</strong>&lt;/text&gt;
&lt;use xlink:href="<strong>#RS</strong>" transform="translate(0,200)"/&gt;
&lt;rect x="250" y="246" height="12" width="500" fill="grey"/&gt;
&lt;mask id="<strong>Ma</strong>"&gt;
  &lt;use xlink:href="<strong>#RS</strong>" transform=" scale(1,2)"/&gt;
&lt;/mask&gt;

&lt;g id="G" mask="url(<strong>#Ma</strong>)"&gt;
  &lt;text x="340" y="365" font-family="impact"
    font-size="52" fill="red" &gt;<strong>Masked values</strong>&lt;/text&gt;
  &lt;rect x="300" y="200" height="15" width="400"fill="red" /&gt;
  &lt;text x="300" y="275" font-family="impact"
    font-size="52" fill="red"&gt;<strong>25% 50% 75% 100%</strong>&lt;/text&gt;
  &lt;rect x="300" y="285" height="15" width="400" fill="red"/&gt;
&lt;/g&gt;</code>
</pre>
            </td>
          </tr>
          <tr>
            <td class="example">
              This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/mask4.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/mask4.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In this case we have, within the mask, a group of four rectangles with transparency ranging from 25% to 100%, arranged from left to right. The words "unmasked values" appear without any mask applied, while the words "Masked values" have had the mask applied. The bottom two thirds of the image, in fact, all have had the same mask applied (as members of a group to which the mask is actually applied), so that we may see exactly where the 25% mask (and the other values) actually kick in.
      </p>
      <p>
        The above example serves to demonstrate that masks may have discretely defined regions with discrete transparency levels. The next example is a closer look at the continuous case of gradient, or continuous, levels of change, this time, applied radially, rather than linearly.
      </p>
      <table border="1" cellpadding="7" cellspacing="0">
        <tbody>
          <tr>
            <td class="caption">
              Application of a radial gradient &lt;mask&gt; to an &lt;image&gt;
            </td>
          </tr>
          <tr>
            <td class="center" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/65caa667.jpg" alt="radial transparency over a bitmap" id="graphics72" height="290" width="365" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;radialGradient id="gradient1" &gt;
  &lt;stop offset="0.0" stop-color="black"/&gt;
  &lt;stop offset="0.5" stop-color="white"/&gt;
  lt;stop offset="1" stop-color="black"/&gt;
&lt;/radialGradient&gt;

&lt;mask id="Ma"&gt;
  &lt;ellipse cx="50%" cy="39%" rx="20%" ry="25%"
  fill="url(#gradient1)"/&gt;
&lt;/mask&gt;
  
&lt;image xlink:href='p0.jpg' y="10%" x="26%"
  width="50%" height="65%" mask="url(#Ma)"/&gt;</code>
</pre>
            </td>
          </tr>
          <tr>
            <td class="example">
              An animated version of this example can be seen at<br />
              <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/mask2.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/mask2.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The three dashed lines are all significant here: the outermost coincides with the outer edge of the ellipse. Note that moving from this edge outward, the underlying rectangular image ceases to be visible since it is effectively clipped by the mask. At the very centermost point, (50%,39%), the image again becomes invisible, since at offset=0, the center of the ellipse, the value is black which corresponds to opacity in the mask. The second ellipse, corresponding roughly to the contours of the face, represents an ellipse with rx="25%" and ry="19.5%". That is it is an ellipse that coincides with the middle stop of the gradient. It is at that contour level, where the opacity of the mask is zero, meaning that it is there where the image is most visible. The reader may benefit, also, from observing how the grid lines (to which the mask has also been applied), disappear and then reappear as we move outward from the center. The mask is hiding them in exactly the same way as it hides the face.
      </p>
      <p>
        Through the application of richer masks, the effects can become more striking. The following represents two applications to underlying bitmapped images of masks that contain reflected gradients. In the first case the focal point of the gradient has been set to be determined by mouse movement, in the second, a series of underlying colored stripes interact visually with the image at the points of its transparency, as determined by the mask.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="560">
        <col width="258" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Reflected radial gradients as masks applied to &lt;image&gt; tags
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/1a7100cd.jpg" alt="Reflected radial gradients as masks" id="graphics73" height="240" width="259" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m6e3d8017.jpg" alt="Reflected radial gradients as masks" id="graphics74" height="240" width="270" />
            </td>
          </tr>
        </tbody>
      </table>
      <h3 id="filters">
        Filters: blurring, distortion, etc.
      </h3>
      <p>
        SVG has a wealthy set of options for manipulating pictures (either drawn or bitmapped). These are options attached to the &lt;filter&gt; object: a bag of tricks both diverse and, in some cases, complex. Unfortunately, the filters are apparently difficult to implement by the browser developers, and so as of this writing all of the features seem to have been implemented in Opera, some of the features are not implemented in ASV+Internet Explorer, several more are not yet implemented in Firefox. None, I think have yet been implemented in Safari or Chrome. The development of SVG has split into two tracks &mdash; those trying to implement an acceptable subset of SVG (called "SVG Tiny") on small-display mobile devices, and those working toward compliance with the superset, sometimes called "SVG Full". Fortunately SVG Full and SVG Tiny are consistent with one another, so it is just a matter of making sure that the features you desire reach the audience you seek to reach, which has been the same fundamental problem with cross-platform computing since it got started in the 1950's.
      </p>
      <p>
        Another note that one of my reviewers recommends, is that I warn you, the reader, that you may want to skip ahead to other sections. As he puts it: "people will likely get bogged down" in this chapter. The good news is that you don't need to know it for what comes later!
      </p>
      <p>
        SVG's filtering options are called filter <em>primitives</em><sup><a class="footnoteanc" href="#footnote14sym" id="footnote14anc">14</a></sup>. As primitives they are probably not semantically complete in the sense of allowing us to form all possible expressions (whatever that might mean in the language of imagery). They also lack the irreducibility that one often associates with semantic primitives: many equivalent results can be expressed in several different ways<sup><a class="footnoteanc" href="#footnote15sym" id="footnote15anc">15</a></sup>.
      </p>
      <p>
        Filters can be computationally quite time consuming. The larger the region they are applied to, the slower they may take to render. This is particularly relevant when one considers animating any of the attributes of these filter effects.
      </p>
      <p>
        This treatment of SVG's filters will not be exhaustive. Let us examine a few of the filter primitives to give a basic sense of how they work and what they do.
      </p><a name="filter_basic" id="filter_basic"></a>
      <p>
        <strong>The basic &lt;filter&gt;</strong>
      </p>
      <p>
        A &lt;filter&gt; is applied to another object much as a clipPath or gradient &mdash; namely through a filter="url(#filtername)" attribute defined within the object to which the filter will be applied. The &lt;filter&gt; tag itself must have one or more filter primitives inside it; those primitive operations will be conducted in the order they are defined, from top to bottom.
      </p>
      <pre>
<code class="code" style="width: 350px;"><em>Example syntax:</em>
&lt;filter id="F"&gt;
  &lt;anyParticularPrimitive1&gt;
  &lt;anyParticularPrimitive2&gt;
   ...
  &lt;anyParticularPrimitiveN&gt;
&lt;/filter&gt;

&lt;anyParticularSVGObjectOrGroup filter="url(#F)"/&gt;
    </code>
</pre><a name="filter_primitives" id="filter_primitives"></a>
      <p>
        <strong>Simpler filter primitives</strong>
      </p>
      <p>
        Some filters are composite filters in the sense that they require the prior definition of other filters. Others are a bit simpler, in that they may be applied directly to graphic objects without advance buildup. We'll begin the study of filters with the simpler ones: feGaussianBlur, feColorMatrix, and feSpecularLighting. Later we'll cover the more complex ones. Now, let's get right on to some real examples.
      </p>
      <h4 id="feGaussianBlur">
        feGaussianBlur<sup><a class="footnoteanc" href="#footnote16sym" id="footnote16anc">16</a></sup> 
      </h4>
      <p>
        This filter blurs an image. The parameter associated with this filter is the standard deviation (stdDeviation) which controls the distance from which neighboring pixels will be allowed to influence a pixel and hence, the amount of blurring.
      </p>
      <p>
        First, a filter is set up with an &lt;feGaussianBlur&gt; inside:
      </p>
      <pre>
<code class="code">&lt;filter id="A"&gt;<br /> &lt;feGaussianBlur stdDeviation="1" /&gt;<br />&lt;/filter&gt;</code>
</pre>
      <p>
        Then the &lt;filter&gt; is applied to an image to be blurred.
      </p>
      <pre>
<code class="code">&lt;rect x="42%" y="10%" width="16%" height="25%" <br />fill="white" filter="url(#A)"/&gt;<br /></code>
</pre>
      <p>
        The following shows the effect of increasing the value of stdDeviation on two different images on a black background.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="182" />
        <col width="183" />
        <col width="182" />
        <tbody>
          <tr>
            <td colspan="3" class="caption">
              Effect of <strong>s</strong>=stdDeviation on feGaussianBlur
            </td>
          </tr>
          <tr>
            <td colspan="3" valign="top">
              <code>&lt;filter id="A"&gt;&lt;feGaussianBlur stdDeviation=<em><strong>S</strong></em>/&gt;&lt;/filter&gt;</code>
            </td>
          </tr>
          <tr>
            <td colspan="3" valign="top">
              <code>&lt;rect x="42%" y="10%" width="16%" height="25%" filter="url(#A)" fill="white"/&gt;</code>
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m145d9ca.png" alt="blur of rectangle, SD=2" id="graphics75" height="200" width="200" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/48fab52f.png" alt="blur of rectangle, SD=10" id="graphics76" height="200" width="200" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m3154d288.png" alt="blur of rectangle, SD=25" id="graphics77" height="200" width="200" />
            </td>
          </tr>
          <tr>
            <td>
              <em><strong>S=2</strong></em>
            </td>
            <td>
              <em><strong>S=10</strong></em>
            </td>
            <td>
              <em><strong>S=25</strong></em>
            </td>
          </tr>
          <tr>
            <td colspan="3" valign="top">
              <code>&lt;image x="42%" y="10%" width="16%" height="25%" filter="url(#A)" xlink:href="p0.jpg"/&gt;</code>
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m1bd70337.png" alt="blur of image, SD=2" id="graphics78" height="200" width="200" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m4c0b0e6e.png" alt="blur of image, SD=10" id="graphics79" height="200" width="200" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/1e7fb87f.png" alt="blur of image, SD=25" id="graphics80" height="200" width="200" />
            </td>
          </tr>
          <tr>
            <td>
              <em><strong>S=2</strong></em>
            </td>
            <td>
              <em><strong>S=10</strong></em>
            </td>
            <td>
              <em><strong>S=25</strong></em>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Observe that the blurred object expands beyond its original bounds and that values outside its boundary are considered to be transparent so that any background present (in this case, monochromatic black) will be visible inside the edges of the image itself. To restrict the image so it does not bleed beyond its boundaries, one can either set the x, y, height and width attributes of the filter itself (the easiest way), or use another filter primitive, the feOffset, discussed later in this chapter.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="280" />
        <col width="281" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Restricting the extent of a filter to the size of the source image.
            </td>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/73f75d0e.png" alt="restriction of filter scope" id="graphics81" height="150" width="352" />
            </td>
          </tr>
          <tr>
            <th>
              Restricted to size of source image
            </th>
            <th>
              Unrestricted to size of source image
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;filter id="B" x="0%" y="0%" width="100%" height="100%"&gt;<br />&lt;feGaussianBlur stdDeviation="25"/&gt;<br />&lt;/filter&gt;</code>
</pre>
            </td>
            <td>
              <pre>
<code>&lt;filter id="A"&gt;<br />&lt;feGaussianBlur stdDeviation="25"/&gt;<br />&lt;/filter&gt;</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        It is also worth noting that if &lt;feGaussianBlur&gt; takes two parameters, rather than one, for its stdDeviationattribute, then the first will represent horizontal blurring, while the second represents vertical blurring. The statement
      </p><code class="line">&lt;feGaussianBlur id="fGB" stdDeviation="25, 0" /&gt;</code>
      <p>
        will blur the object only horizontally, in ways that, for a monochromatic rectangle might resemble a linear gradient with three equidistant stops.
      </p>
      <h4 id="feColorMatrix">
        feColorMatrix
      </h4>
      <p>
        The feColorMatrix primitive allows the redefinition of colors within an image, based on the ability to multiply each pixel's RGB and alpha levels by numeric coefficients. In the more complex situation, users may specify an entire matrix of twenty coefficients (4 by 5) to be multiplied by the one-by-four vector representing the color value of a given pixel. In simpler situations, predefined matrices have been associated with special flags (such as "saturate", "hueRotate", or "luminanceToAlpha") meaning one may simply specify one of the flags to perform the indicated operation.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="541">
        <col width="249" />
        <col width="262" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              feColorMatrix type="saturate"
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m2f510974.jpg" alt="unfilterd" id="graphics82" height="180" width="168" />
            </td>
            <td class="center">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m49ca3f33.jpg" alt="desaturate" id="graphics83" height="180" width="168" />
            </td>
          </tr>
          <tr>
            <th>
              Original Image
            </th>
            <th>
              Filtered image
            </th>
          </tr>
          <tr>
            <td>
              <code>&lt;image x="25%" y="0" width="25%" height="35%" xlink:href="p2.jpg"/&gt;</code>
            </td>
            <td>
              <pre>
<code>&lt;filter id="F"&gt;<br />&lt;feColorMatrix type="saturate"/&gt;<br />&lt;/filter&gt;<br /><br />&lt;image x="50%" y="0" width="25%" height="35%"<br />xlink:href="p2.jpg" filter="url(#F)"/&gt;</code>
</pre>
            </td>
          </tr>
          <tr>
            <td colspan="2" class="example">
              An animated example of this may be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/filterColorMatrixSaturate.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/filterColorMatrixSaturate.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Below are the results of several experiments with type="matrix" in which we may specify our own matrix to be multiplied by the pixel values of the image. We begin by observing that multiplying the identity matrix (in which values [i,i]=1):
      </p>
      <blockquote>
        <pre>
<code>1 0 0 0 0<br />0 1 0 0 0<br />0 0 1 0 0<br />0 0 0 1 0</code>
</pre>
      </blockquote>
      <p>
        by an image would result in no change whatever to it.
      </p>
      <p>
        The rows of the matrix represent respectively R,G,B, and alpha, so for example, in the second image we see that the alpha channel is being positively influenced by red, blue and green, while each of those colors negatively influences itself. The result is much like a black and white negative with transparency being maximized where the original image is brightest. The range of effects presented should allow the reader, with some experimentation of her own, to get a feel for how these matrix transformations work.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="541">
        <col width="369" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              feColorMatrix type="saturate"
            </td>
          </tr>
          <tr>
            <td>
              <br />
              <br />
              <br />
              <br />
              <strong>Original image</strong><br />
              <br />
              <br />
              <br />
            </td>
            <td rowspan="5">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/39484acd.jpg" alt="feColorMatrix type=matrix" id="graphics84" height="720" width="150" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;feColorMatrix type="matrix"
values="-1  0  0 0 0 
  0 -1  0 0 0 
  0  0 -1 0 0 
  1  1  1 0 0
"/&gt;&lt;!-inverse hi-contrast B/W w alpha&mdash;&gt;</code>
</pre>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;feColorMatrix type="matrix" 
values="-1 3 3 0 -.5 
  0 0 0 0  0 
  0 0 0 0  0 
  0 0 0 1  0
"/&gt;&lt;!-hyperred&mdash;&gt;</code>
</pre>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;feColorMatrix type="matrix" 
  values=" 1.5 -0.25 -0.25 0  0 
  -0.25   1.5 -0.25 0  0
  -0.25 -0.25  1.5  0  0 
    0     0     0   1  0
"/&gt;&lt;!-oversaturate&mdash;&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;feColorMatrix type="matrix" 
values=  "3 -1 -1 0 0 
  -1  3 -1 0 0 
  -1 -1  3 0 0 
   0  0  0 1 0
"/&gt;&lt;!-supersaturate&mdash;&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td class="example" colspan="2">
              This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/filterColorMatrixMat.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/filterColorMatrixMat.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The values of the matrix above do not need to be typeset as they are. They could be specified simply as a space delimited string. The above format helps with legibility for both author and reader.
      </p><a name="feConvolveMatrix" id="feConvolveMatrix"></a>
      <p>
        <strong>feConvolveMatrix</strong>
      </p>
      <p>
        This filter allows what in image processing is known as a convolution filter. It allows us to define a square matrix (typically n by n for some odd number n) in which the center cell of the matrix refers to the pixel itself, and the cells above, left, below and right of it within the matrix, refer to the pixels above, left, below, and to the right of that pixel in the source image. The numeric coefficients in the matrix define the weight that each neighboring pixel will have in the calculation of the new color value of that pixel. In the simplest case, the matrix
      </p>
      <blockquote>
        <pre>
<code>0 0 0<br />0 1 0<br />0 0 0</code>
</pre>
      </blockquote>
      <p>
        leaves any image unaffected, since the new value of a pixel will be equal to 1 times its current value plus the sum of zero times the values of its eight nearest neighbors (those immediately N, NE, E, SE, S, SW, W, and NW of it).
      </p>
      <p>
        A convolution matrix is defined as the value of the attributes kernelMatrix within an &lt;feConvolveMatrix&gt; as follows:
      </p>
      <pre>
<code class="code">&lt;filter id="edge"&gt;<br />  &lt;feConvolveMatrix order="3" <br />  kernelMatrix=" <br /> -1 -1 -1<br />  -1 7 -1<br />  -1 -1 -1 <br />  " /&gt;<br />&lt;/filter&gt;<br /><br />&lt;image id="M4" x="465" xlink:href="p17.jpg" <br />width="150" height="175"<br />filter="url(#edge)" /&gt;<br /></code>
</pre>
      <p>
        We might expect the above to exaggerate those pixels that are very different from their neighbors, since each pixels neighboring pixels are weighted negatively.
      </p>
      <p>
        The convolution matrix specified by
      </p>
      <blockquote>
        <pre>
<code>
kernelMatrix=" 
-1 -1 -1 -1 -1 -1 -1
 0  0  0  0  0  0  0
 0  0  0  0  0  0  0
 2  2  2  3  2  2  2
 0  0  0  0  0  0  0
 0  0  0  0  0  0  0
-1 -1 -1 -1 -1 -1 -1
"<br /></code>
</pre>
      </blockquote>
      <p>
        will have the effect of striping an image horizontally (akin to applying a horizontal blur). That is because a pixel is averaged with all the pixels, within radius two, that are at the same height. The pixel itself has only a bit more weight than its horizontal neighbors. Likewise the fact that we have chosen to degrade pixels based on similarity to those some vertical distance away, means that we will tend to sharpen our horizontal edges, a bit, since those are where differences between regions are most pronounced and where pixel values will tend to be exaggerated relative to neighbors. To see the effect of these striping convolutions, let us apply both a predominantly horizontal and a predominantly vertical striping effect to the small grained fill pattern, url(#Oval), developed in the last section.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="376" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Matrices for vertical and horizontal striping
            </td>
          </tr>
          <tr>
            <td>
              <code>&lt;ellipse fill="url(#Oval)" cx="50%" cy="50%" rx="10%" ry="10%"/&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/67dc2d28.png" alt="original image" id="graphics85" height="112" width="183" />
              <p>
                The original image
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;filter id="vstripe"&gt;
  &lt;feConvolveMatrix order="7" 
  kernelMatrix=" 
  -1 0 0 2 0 0 -1
  -1 0 0 2 0 0 -1
  -1 0 0 2 0 0 -1
  -1 0 0 1 0 0 -1
  -1 0 0 2 0 0 -1
  -1 0 0 2 0 0 -1
  -1 0 0 2 0 0 -1
 " /&gt;
&lt;/filter&gt;
</code>
</pre>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m5365f2de.png" alt="vertically striped by matrix" id="graphics86" height="117" width="183" />
              <p>
                Vertical striping
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;filter id="hstripe" x="0" y="0" width="1" height="1"&gt;
 &lt;feConvolveMatrix order="7" 
  kernelMatrix=" 
  -1 -1 -1 -1 -1 -1 -1
   0  0  0  0  0  0  0
   0  0  0  0  0  0  0
   2  2  2  3  2  2  2
   0  0  0  0  0  0  0
   0  0  0  0  0  0  0
  -1 -1 -1 -1 -1 -1 -1
  "/&gt;
&lt;/filter&gt;
</code>
</pre>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m58ba615d.png" alt="horizontally striped by matrix" id="graphics87" height="111" width="183" />
              <p>
                Horizontal striping
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Lastly, are a series of other matrices performing a variety of image manipulations, to show not only some of the sorts of manipulations possible, but also to give some insights into how these convolutions work.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="103" />
        <col width="104" />
        <col width="104" />
        <col width="104" />
        <col width="104" />
        <tbody>
          <tr>
            <td colspan="5" class="caption">
              Different kernel matrices for the feConvolveMatrix primitive
            </td>
          </tr>
          <tr>
            <td colspan="5" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/2b742dd1.jpg" alt="same image with different kernel matrices" id="graphics88" height="187" width="772" />
            </td>
          </tr>
          <tr>
            <td>
              <code>&lt;image id="M4" x="155" xlink:href="p17.jpg" width="150" height="175"/&gt;</code>
            </td>
            <td>
              <pre>
<code>kernelMatrix="
   1 -1  1
  -1 -1 -1
   1 -1  1 
"
</code>
</pre>
            </td>
            <td>
              <pre>
<code>kernelMatrix="
   1  -1  1 
  -1 -.1 -1
   1  -1  1 
"
   </code>
</pre>
            </td>
            <td>
              <pre>
<code>kernelMatrix="
  -1 -1 -1
  -1  7 -1
  -1 -1 -1 
"
   </code>
</pre>
            </td>
            <td>
              <pre>
<code>kernelMatrix="
  1  1   1  1  1 
  1 -2  -2 -2  1 
  1 -2 .01 -2  1
  1 -2  -2 -2  1 
  1  1   1  1  1
"
</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The National Institute of Health has for many years provided a freeware package known as NIH Image which does a variety of interesting image analytic operations including convolutions. The National Institute of Standards provides some informative reading on convolution filters and image processing in general<sup><a class="footnoteanc" href="#footnote17sym" id="footnote17anc">17</a></sup>. 
      </p>
      <p>
        Additionally, a goodly collection of actual convolution filters that the reader may find useful can be found at <a href="http://www.opengl.org/resources/code/samples/advanced/advanced97/notes/node152.html">OpenGL.org</a>.
      </p>
      <h4 id="feComponentTransfer">
        feComponentTransfer
      </h4>
      <p>
        The &lt;feComponentTransfer&gt; primitive allows the independent redefinition of each of the four color channels: R,G, B, and A (alpha). It allows the adjustment of brightness and contrast through application of any of a variety of different functions to any or all channels of an image. The types of adjustment allowed include identity, table, <em>discrete</em>, <em>linear</em>, and <em>gamma</em>. <em>discrete</em> can be used to posterize an image (that is to reduce it to fewer color values). <em>linear</em> is used for simple brightening and darkening (or contrast adjustment) while <em>table</em> can be used to remap the function (like discrete) only continuously.
      </p>
      <table border="1" cellpadding="0" cellspacing="0" width="577">
        <col width="382" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Some uses of &lt;feComponentTransfer&gt;
            </td>
          </tr>
          <tr>
            <td>
              <div class="center">
                The unfiltered image.
              </div><code>&lt;image x="5%" y="2%" height="25%" width="20%" xlink:href="p84.jpg"/&gt;</code>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m16348885.jpg" alt="unfiltered image" id="graphics89" height="137" width="170" />
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;filter id="inverse"&gt;<br /> &lt;feComponentTransfer&gt;<br />  &lt;feFuncR type="table" tableValues="1 0"/&gt;<br />  &lt;feFuncG type="table" tableValues="1 0"/&gt;<br />  &lt;feFuncB type="table" tableValues="1 0"/&gt;<br /> &lt;/feComponentTransfer&gt;<br />&lt;/filter&gt;<br /></code>
</pre>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/mef43d19.jpg" alt="inverted chroma" id="graphics90" height="137" width="169" />
            </td>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <p>
                Here, with type='table' we invert the chromatic range. We take the normal range from 0 to 1 and map to a new distribution: 0→1 and 1→0, and all in between, for each of the three channels of the image.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;filter id="discrete"&gt;<br /> &lt;feGaussianBlur stdDeviation="1.5" /&gt;<br /> &lt;feComponentTransfer&gt;<br /> &lt;feFuncR type="discrete" tableValues="0 .5 1 1"/&gt;<br /> &lt;feFuncG type="discrete" tableValues="0 .5 1"/&gt;<br /> &lt;feFuncB type="discrete" tableValues="0"/&gt;<br /> &lt;/feComponentTransfer&gt;<br />&lt;/filter&gt;<br /></code>
</pre>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/51bdcbf.jpg" alt="posterized image" id="graphics91" height="138" width="169" />
            </td>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <p>
                This option maps the red values in the interval [0,1] to one of the three values as follows:
              </p>
              <p>
                (0 to .25) →0; (.25 to .50) →.5; (.50 to .75 and.75 to 1.0) →1.
              </p>
              <p>
                The green channel is mapped to either 0%, 50% or 100% green with the threshold between these levels being chosen halfway between the endpoints. The blue channel (relatively insignificant in this particular image) is dampened to black (removing its effect altogether). The source image has no alpha channel (i.e., it is everywhere opaque), hence there is no need to modify that channel.
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        An example of type="linear" is displayed in the section on &lt;feTurbulence&gt; a bit later in this chapter.
      </p>
      <h4 id="feMorphology">
        feMorphology
      </h4>
      <p>
        Among these filter primitives that take a simple input from a drawn object and produce a visible result effect is &lt;feMorphology&gt;. It is a rather simple effect, having just two parameters controlling the type and magnitude of the effect. The W3C has this to say about &lt;feMorphology&gt;: "This filter primitive performs 'fattening' or 'thinning' of artwork. It is particularly useful for fattening or thinning an alpha channel."<sup><a class="footnoteanc" href="#footnote18sym" id="footnote18anc">18</a></sup> 
      </p>
      <h4 id="standalone_filter_primitives">
        Filter primitives that stand alone
      </h4>
      <p>
        A few interesting filters exist which do not necessarily receive input, per se, but rather can create imagery by themselves. They are most commonly used in conjunction with other filters but can be most handy when it comes to building imagery or in processing of other images. The most important of these are feFlood, feTile, feTurbulence, feDiffuseLighting and feSpecularLighting.
      </p>
      <h4 id="feFlood">
        feFlood
      </h4>
      <p>
        &lt;feFlood&gt; gives a new way of drawing a rectangle on the screen. The difference between it and other rectangles is that it can easily be combined on-the-fly with a variety of other filters as will be demonstrated shortly. In the following example, an &lt;feFlood&gt; primitive is applied to each of three objects: two rectangles and an ellipse. The geometry here is worth describing in some detail so that we might be able to make some sense of the relative versus absolute coordinates so often used within SVG.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="541">
        <col width="525" />
        <tbody>
          <tr>
            <td class="caption">
              &lt;feFlood&gt; applied to three shapes
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m5a208ea.png" alt="&lt;feFlood&gt; applied to three shapes" id="graphics92" height="158" width="365" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;filter id="F"&gt;<br /> &lt;feFlood x="50%" y="150" width="40" height="20" <br />  flood-color="grey" flood-opacity=".5"/&gt;<br />&lt;/filter&gt;<br />&lt;rect x="100" y="100" width="100" height="100" filter="url(#F)" /&gt;<br />&lt;rect x="200" y="100" width="100" height="100" filter="url(#F)" /&gt;<br />&lt;ellipse cx="350" cy="150" rx="30" ry="50" filter="url(#F)" /&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Observe, in the figure above, that the &lt;feFlood&gt; consists of a small grey rectangle. The "x" attribute is set as 50% while the other attributes are all in absolute coordinates. When the filter is applied to each of three shapes, the rectangle begins halfway from the left edge of each. Note that the filter's rectangle is not clipped to the shape of the ellipse it is applied to. In fact, like other stand-alone operators, &lt;feFlood&gt; is applied to a rectangle that coincides with the filter space &mdash; either inherited from the object (as in this case), or as applied through the attributes, x, y, width, and height in the filter tag itself.
      </p>
      <p>
        The feFlood becomes considerably more interesting when combined with feTile &mdash; a process by which patterns (much like the &lt;pattern&gt; object but without actually being rendered) may be created and stored away for subsequent use by other filters.
      </p>
      <p>
        The feFlood filter primitive was one of the later ones implemented in browsers. Currently though (spring 2009) it is available in Opera, FF and ASV+IE.
      </p>
      <h4 id="feImage">
        feImage
      </h4>
      <p>
        Just as feFlood allows the introduction of a colored rectangle into a filter, feImage allows the introduction of a rectangular bitmap into a filter. If for example, we wished to let each of several rectangles overlay the same bitmapped graphic, then we might filter each of those rectangles with a filter that contains the feImage primitive. &lt;feImage&gt; involves no parameters; it simply inserts an external image file into a filter processing stream.
      </p>
      <p>
        Because it is difficult to use the &lt;feImage&gt; construct without the use of multiple inputs to a filter, an example will be given under our discussion of &lt;feMerge&gt; later in this chapter.
      </p>
      <h4 id="feTurbulence">
        feTurbulence
      </h4>
      <p>
        &lt;feTurbulence&gt; is used to create textures. It creates patterns of smooth visual noise that fill a rectangle with rather pleasant swirls of pastel coloration. From the W3C's SVG 1.1 specification, we find that it
      </p>
      <blockquote class="q">
        <p>
          "creates an image using the Perlin turbulence function. It allows the synthesis of artificial textures like clouds or marble." <sup><a class="footnoteanc" href="#footnote19sym" id="footnote19anc">19</a></sup> 
        </p>
      </blockquote>
      <p>
        Like &lt;feFlood&gt;, &lt;feTurbulence&gt; fills a rectangle with new content. It has one required parameter <em>baseFrequency</em> and a variety of optional parameters as well. In the simplest case the primitive is used as follows:
      </p>
      <pre>
<code class="code">&lt;filter id="T1"&gt;<br />  &lt;feTurbulence baseFrequency=".04"/&gt;<br />&lt;/filter&gt;<br />&lt;rect x="30" y="10" height="100" width="100" filter="url(#T1)"/&gt;<br /></code>
</pre>
      <p>
        A more fully populated example of the syntax of the primitive may be seen here:
      </p>
      <pre>
<code class="code">&lt;filter id="T10"&gt;<br /> &lt;feTurbulence baseFrequency=".01" type="fractalNoise" <br />  numOctaves="3" seed="23" stitchTiles="stitch" /&gt;<br />&lt;/filter&gt;<br /></code>
</pre>
      <p>
        By varying the values of the parameters <em>baseFrequency,</em> <em>numOctaves</em> (which by default is 1.0), <em>type</em> (which by default is "turbulence"), <em>stitchTiles</em> ("noStitch" by default) and <em>seed</em>("0" by default), we can produce numerous interesting types of pattern as shown in the following diagram.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="104" />
        <col width="105" />
        <col width="105" />
        <col width="106" />
        <col width="100" />
        <tbody>
          <tr>
            <td colspan="5" class="caption">
              Various stand-alone uses of &lt;feTurbulence&gt;
            </td>
          </tr>
          <tr>
            <td rowspan="3" colspan="4">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m3e5cbe9a.jpg" alt="several uses of feTurbulence as explained in table" id="graphics93" height="348" width="462" />
            </td>
            <th>
              <br />
              Effects of seed and numOctaves<br />
            </th>
          </tr>
          <tr>
            <th>
              Effects of numOctaves and baseFrequency<br />
            </th>
          </tr>
          <tr>
            <th>
              Effects of<br />
              type and baseFrequency
            </th>
          </tr>
          <tr>
            <td class="matrix">
              A.<br />
              &lt;feTurbulence baseFrequency<br />
              = ".04"/&gt;
            </td>
            <td class="matrix">
              B.<br />
              &lt;feTurbulence baseFrequency<br />
              = ".04"<br />
              numOctaves="2"/&gt;
            </td>
            <td class="matrix">
              C.<br />
              &lt;feTurbulence baseFrequency = ".04"<br />
              numOctaves="2" seed="201"/&gt;
            </td>
            <td class="matrix">
              D.<br />
              &lt;feTurbulence baseFrequency<br />
              = ".04"<br />
              numOctaves="5"<br />
              seed="201"/&gt;
            </td>
            <td rowspan="3"></td>
          </tr>
          <tr>
            <td class="matrix">
              E.<br />
              &lt;feTurbulence baseFrequency<br />
              = ".04"/&gt;
            </td>
            <td class="matrix">
              F.<br />
              &lt;feTurbulence baseFrequency<br />
              = ".01"/&gt;
            </td>
            <td class="matrix">
              G.<br />
              &lt;feTurbulence baseFrequency<br />
              = ".1" numOctaves="1"
            </td>
            <td class="matrix">
              H.<br />
              &lt;feTurbulence baseFrequency<br />
              = ".1" numOctaves="3" /&gt;
            </td>
          </tr>
          <tr>
            <td class="matrix">
              I.<br />
              &lt;feTurbulence baseFrequency<br />
              = ".04"<br />
              type = "fractalNoise"/&gt;
            </td>
            <td class="matrix">
              J.<br />
              &lt;feTurbulence baseFrequency<br />
              = ".01"<br />
              type = "fractalNoise" numOctaves = "3"/&gt;<br />
            </td>
            <td class="matrix">
              K.<br />
              &lt;feTurbulence baseFrequency<br />
              = ".04,.1" /&gt;
            </td>
            <td class="matrix">
              L.<br />
              &lt;feTurbulence baseFrequency<br />
              = ".1,.01" /&gt;
            </td>
          </tr>
        </tbody>
      </table>
      <h5>
        numOctaves
      </h5>
      <p>
        In the above examples, note that as we move across the first row from A through D, we vary the <em>numOctaves</em> and also the seed. As <em>numOctaves</em> grows from the default value of 1.0 to 2, and finally to 5, the grain of the pattern becomes tighter and its fractal complexity appears to increase.
      </p>
      <h5>
        seed
      </h5>
      <p>
        The purpose of seedis to provide a different start position for the random number generator underlying the function. Note that as we move from cell A to either cell B or cell E, the transition is gradual across the cell boundary. That is, the function is continuous across these areas of the table seeded with the same random number. As we move across the boundary from B to C, where the seed changes, the function no longer appears to be continuous, though continuity is preserved (even despite the octave change) across the boundary between C and D.
      </p>
      <h5>
        baseFrequency
      </h5>
      <p>
        The second row investigates changes in baseFrequency, which is sort of like a scaling variable affecting the size of the associated patterns. If we were to change <em>baseFrequency</em> through a SMIL animation (discussed later) we would see the overall pattern remain intact as it expands and moves away from the origin. Cell F has the largest grained pattern of these shown, with a <em>baseFrequency</em> value less than the others. <em>baseFrequency</em> controls, primarily, the size of the grain of the distortion map. Notice that cells G and H which share seedand <em>baseFrequency</em> values, but differ in <em>numOctaves</em> still appear to be continuous across the G/H boundary.
      </p>
      <p>
        In cells K and L, we observe that we may specify different values of <em>baseFrequency</em> for the horizontal and vertical directions,
      </p><code class="line">baseFrequency= ".1,.01"</code>
      <p>
        imparting a directional grain to the pattern. This can come in quite handy in uses of <em>feTurbulence</em> in conjunction with other effects, in creating striation as part of our textures.
      </p>
      <h5>
        type
      </h5>
      <p>
        There are two values of <em>type</em> in the SVG 1.1 specification: type="turbulence" (the default) and type="fractalNoise". In cells I and J we look at the effect of type="fractalNoise". The other ten cells all use the default value.
      </p>
      <p>
        &lt;feTurbulence&gt; used in conjunction with other filters can yield a broad range of quite interesting effects. We will discuss the chaining together and composition of multiple filters shortly, but here are the combined effects of turbulence with saturation (using feColorMatrix) and sharpening (using feConvolveMatrix).
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="136" />
        <col width="142" />
        <col width="134" />
        <col width="121" />
        <tbody>
          <tr>
            <td colspan="4" class="caption">
              Effects of sharpening with or without color adjustment
            </td>
          </tr>
          <tr>
            <td rowspan="2" colspan="3">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m24c44c01.jpg" alt="sharpening turbulence" id="graphics94" height="249" width="436" />
            </td>
            <td>
              <p>
                Not sharpened
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                Sharpened with<br />
              </p>
              <pre>
<code>&lt;feConvolveMatrix 
 order="3" 
 kernelMatrix=" 
    1  -1  1
   -1 -.1 -1
    1  -1  1 
 "/&gt;
</code>
</pre>
            </td>
          </tr>
          <tr>
            <th>
              Not color-adjusted
            </th>
            <th>
              Super-saturated
            </th>
            <th>
              Unsaturated
            </th>
            <td></td>
          </tr>
        </tbody>
      </table>
      <p>
        Enhancing the contrast of an &lt;feTurbulence&gt; plot:
      </p>
      <table border="1" cellpadding="0" cellspacing="0" width="577">
        <col width="382" />
        <tbody>
          <tr>
            <td>
              <pre>
<code>&lt;filter id="heavycloud"&gt;<br /> &lt;feTurbulence baseFrequency=".01" numOctaves="3" seed="200"/&gt;<br /> &lt;feComponentTransfer&gt;<br /> &lt;feFuncR type="linear" slope="4" intercept="-1"/&gt;<br /> &lt;feFuncG type="linear" slope="4" intercept="-1"/&gt;<br /> &lt;feFuncB type="linear" slope="4" intercept="-1"/&gt;<br /> &lt;feFuncA type="linear" slope="0" intercept="1"/&gt;<br /> &lt;/feComponentTransfer&gt;<br /> &lt;feColorMatrix type="saturate" result="A"/&gt;<br />&lt;/filter&gt;<br /></code>
</pre>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m502067be.jpg" alt="turbulence with enhanced contrast" id="graphics95" height="147" width="192" />
            </td>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <p>
                Here we start with turbulence and then use a linear function to exaggerate the slope of the color values for all three channels, other than alpha, which we dampen out by letting opacity become 1.0 everywhere.
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Herewith two more samplings of various combined effects that involve feTurbulence.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="279" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Various effects involving feTurbulence
            </td>
          </tr>
          <tr>
            <td>
              Text and oval distorted using feDisplacement applied to feTurbulence.
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m2a543465.png" alt="Text and oval distorted using feDisplacement applied to feTurbulence." id="graphics96" height="150" width="282" />
            </td>
          </tr>
          <tr>
            <td>
              Several copies of an image distorted using feDisplacement applied to feTurbulence.
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m440ad504.jpg" alt="Several copies of an image distorted using feDisplacement applied to feTurbulence" id="graphics97" height="144" width="215" />
            </td>
          </tr>
          <tr>
            <td>
              Application of feTurbulence to an image, through a mask.
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m7b464bbd.jpg" alt="Application of feTurbulence to an image, through a mask" id="graphics98" height="144" width="194" />
            </td>
          </tr>
        </tbody>
      </table>
      <hr />
      <table border="1" cellpadding="7" cellspacing="0" width="493">
        <col width="153" />
        <col width="142" />
        <col width="154" />
        <tbody>
          <tr>
            <td colspan="3" class="caption">
              Various textural effects
            </td>
          </tr>
          <tr>
            <td colspan="3" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/48dbdb98.jpg" alt="Various textural effects" id="graphics99" height="304" width="480" />
            </td>
          </tr>
          <tr>
            <td class="matrix">
              A &mdash;<br />
              baseFrequency = ".23" with radialGradient overlay
            </td>
            <td class="matrix">
              <p>
                B &mdash;
              </p>
              <p>
                baseFrequency = ".007,.25" with feFlood (to add light brown) and feColorMatrix (to add red tones
              </p>
            </td>
            <td class="matrix">
              <p>
                C &mdash;<br />
                baseFrequency = ".15" with feDisplacementMap
              </p>
              <p>
                Base rectangle with black stroke is heavily perturbed. Decorative overlays of other rectangles are also used.
              </p>
            </td>
          </tr>
          <tr>
            <td class="matrix">
              <p>
                D &mdash;
              </p>
              <p>
                baseFrequency = ".2" streaked with &lt;feConvolveMatrix&gt; and with radialGradient overlay
              </p>
            </td>
            <td class="matrix">
              <p>
                E. &mdash;
              </p>
              <p>
                Same as B, but with slightly different colors and secondary feTurbulence for finer-grained distortion
              </p>
            </td>
            <td class="matrix">
              <p>
                F &mdash;
              </p>
              <p>
                baseFrequency=".2,.4"
              </p>
              <p>
                with feFlood and feColorMatrix and secondary turbulence
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <h4 id="feDiffuseLighting_feSpecularLighting">
        feDiffuseLighting and feSpecularLighting
      </h4>
      <p>
        Numerous techniques exist within SVG for designing and controlling the placement of light sources. Many of these effects can be simulated through the overlay of partly transparent gradients, but the effects are powerful and quite useful for those who already know something of the landscape of lighting effects. Usually one will want to combine these effects using the various methods for combining multiple filter effects discussed later, but here is one example of the use of feSpecularLighting to create an image.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="541">
        <col width="525" />
        <tbody>
          <tr>
            <td class="caption">
              Placing an &lt;fePointLight&gt; on a black background
            </td>
          </tr>
          <tr>
            <td class="center" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m24845380.png" alt="use of fePointLight" id="graphics100" height="199" width="302" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;filter id = "I"&gt;<br /> &lt;feSpecularLighting specularExponent="25" lighting-color="white"&gt;<br />  &lt;fePointLight x="400" y="100" z="100"/&gt;<br />  &lt;/feSpecularLighting&gt;<br />&lt;/filter&gt;<br />&lt;rect fill="black" width="100%" height="100%" /&gt;<br />&lt;rect filter="url(#I)" width="100%" height="100%" /&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <h4 id="filter_utility">
        Utility filters (feTile and feOffset)
      </h4>
      <p>
        Two filter primitives which neither operate on raw objects, nor produce stand-alone imagery are discussed a bit separately since they can sometime provide useful results.
      </p>
      <h4 id="feTile">
        feTile
      </h4>
      <p>
        &lt;feFlood&gt; is to &lt;rect&gt; as &lt;feImage&gt; is to &lt;image&gt;. Likewise, &lt;feTile&gt; is directly akin to &lt;pattern&gt;. It allows us to bring repeating patterns of imagery into the filter apparatus, so that we might then use it to create effects. Herewith is a simple use of the &lt;feTile&gt; primitive:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              Building tiled layers within a filter using &lt;feTile&gt;
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/ee6a82d.jpg" alt="use of feTile" id="graphics101" height="168" width="356" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;rect x="0" y="0" height="100%" width="100%" fill="purple"/&gt;<br />&lt;filter id="T" filterUnits="objectBoundingBox" x="0" y="0" height="100%" width="100%" &gt;<br /> &lt;feImage xlink:href="p17.jpg" result="one"<br /> x="0" y="15" width="50" height="50"/&gt;<br /> &lt;feImage xlink:href="p84.jpg" result="two" <br /> x="25" y="0" width="50" height="50"/&gt;<br /> &lt;feFlood x="25" y="18" width="50" height="10" flood-color="yellow" <br />flood-opacity=".5" result="three" /&gt;<br /> &lt;feFlood x="45" y="0" width="10" height="70" flood-color="cyan" result="Z"/&gt;<br /> &lt;feMerge&gt;<br />  &lt;feMergeNode in="Z"/&gt;<br />  &lt;feMergeNode in="one"/&gt;<br />  &lt;feMergeNode in="two"/&gt;<br />  &lt;feMergeNode in="three"/&gt;<br />  &lt;/feMerge&gt;<br /> &lt;feTile/&gt;<br />&lt;/filter&gt;<br />&lt;rect x="0" y="0" height="40%" width="50%" filter="url(#T)" /&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        As can be seen from the above, &lt;feTile&gt; merely takes the imagery that exists within the filter and fills the filter space with it.
      </p>
      <h4 id="feOffset">
        feOffset
      </h4>
      <p>
        This is used to move a chunk of imagery, typically the SourceGraphic or the BackgroundImage, around a bit within a filter for purposes of slight realignment. The following drop shadow result is accomplished with &lt;feOffset&gt;. We proceed by taking in an image and applying a blur filter. That blurred image is then offset (20 pixels to the right and 15 pixels down) and stored as result "B". Result B is then merged under the original SourceGraphic to create the effect.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              &lt;feOffset&gt; to create a blurred drop shadow.
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m16b0e38d.jpg" alt="blurred drop shadow" id="graphics102" height="185" width="576" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;filter id="offset" x="-20%" y="-10%" height="130%" width="140%"&gt;<br /> &lt;feGaussianBlur stdDeviation="10"/&gt;<br />  &lt;feOffset dx="20" dy="15" result="B"/&gt;<br /> &lt;feMerge&gt;<br />  &lt;feMergeNode in="B"/&gt;<br />  &lt;feMergeNode in="SourceGraphic"/&gt;<br />  &lt;/feMerge&gt;<br />&lt;/filter&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table><a name="Combining_Filter_Primitives" id="Combining_Filter_Primitives"></a>
      <p>
        <strong>Combining Filter Primitives</strong>
      </p>
      <p>
        There are a variety of ways of combining filter primitives. One way is to apply one filter to an object, then nest the object within a &lt;g&gt; which has its own filter applied.
      </p>
      <pre>
<code class="code">&lt;filter id="F1"&gt;<br /> &lt;someFilterPrimitive1/&gt;<br />&lt;/filter&gt;<br />&lt;filter id="F2"&gt;<br /> &lt;someFilterPrimitive2/&gt;<br />&lt;/filter&gt;<br /><br />&lt;g filter="url(#F2)"&gt;<br />&lt;rect height="20%" width="15%" filter="url(#F1)"/&gt;<br />&lt;/g&gt;<br /></code>
</pre>
      <p>
        An equivalent result can be obtained by chaining filter primitives together within a single &lt;filter&gt; element as follows:
      </p>
      <pre>
<code class="code">&lt;filter id="Fs"&gt;<br /> &lt;someFilterPrimitive1/&gt;<br /> &lt;someFilterPrimitive2/&gt;<br />&lt;/filter&gt;<br />&lt;rect height="20%" width="15%" filter="url(#Fs)"/&gt;<br /></code>
</pre>
      <p>
        In the above, we assume that filterPrimitive1 was the essence of #F1, while filterPrimitive2 was the essence of #F2. The latter approach is likely to be more efficient time-wise because it withholds any rendering while processing is still taking place. The run-time behavior of these filters can be a serious consideration, since some of the filters we have discussed in this section take on the order of seconds, rather than milliseconds to perform, at least on contemporary machines.
      </p>
      <p>
        In addition to being able to sequentially chain together the results of different filter primitives, where each successive filter takes the output of the preceding filter (known as its "result") as its input (known as its "in") it is also possible to combine filters in more complex orders.
      </p>
      <p>
        First, consider the default way in which filters handle multiple effects. Ordinarily, the first primitive within a &lt;filter&gt; receives, as input, the "SourceGraphic" &mdash; the element to which the filter has been applied. For example, if we define
      </p><code class="line">&lt;rect filter="url(#Fs)" ... /&gt;</code>
      <p>
        then it is that rectangle that is considered to be the SourceGraphic of the filter "Fs." Each primitive in succession (FP1, FP2, ...FPk), takes the output or "result" from the previous filter as if it were its input. We show two equivalent approaches the first which just uses default values of the <em>in</em> and <em>result</em> of successive filters, while the second makes all those default values explicit. There would be no reason to specify the values of inor resultin the following example, but the example may help make it clear what is meant by the inand the <em>result</em> of a filter. In both cases, it is the final filter, from which the output is rendered into the affected graphical objects.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="560">
        <col width="177" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Two equivalent approaches to sequential multi-filter processing
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;filter id="Fs"&gt;<br /> &lt;FP1/&gt;<br /> &lt;FP2/&gt;<br /> &lt;FP3/&gt;<br /> &lt;FP4/&gt;<br /> &lt;FP5/&gt;<br />&lt;/filter&gt;<br /></code>
</pre>
            </td>
            <td>
              <pre>
<code>&lt;filter id="Fs"&gt;<br /> &lt;FP1 in="SourceGraphic" result="A"/&gt;<br /> &lt;FP2 in="A" result ="B" /&gt;<br /> &lt;FP3 in="B" result ="C" /&gt;<br /> &lt;FP4 in="C" result ="D" /&gt;<br /> &lt;FP5 in="D" /&gt;<br />&lt;/filter&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <th colspan="2" valign="top">
              In the above, <em>FPx</em> refers to any filter primitive (such as feGaussianBlur, etc.)
            </th>
          </tr>
        </tbody>
      </table>
      <p>
        Once we know where the SourceGraphic enters into the computations and how results are named and reused, then we are in a position to start varying the order and using those more complex filter primitives that combine results of two or more primitives, hence chaining filter primitives together in more complex and interesting ways.
      </p>
      <p>
        SVG also gives access to the graphical content underneath a given image. That is, the state of the rendered imagery in the layer below the filtered object may itself be used as a part of the filter. This allows combinations of an image with its background using techniques for combining two images: feMerge, feBlend, feComposite, and feDisplacementMap. The use of BackgroundImage to do this will be revisited shortly.
      </p>
      <p>
        The following are filters which operate on two or more images, or which utilize as input, the output of other filters. We'll start with the simpler ones and move on from there.
      </p><a name="feMerge" id="feMerge"></a>
      <p>
        <strong>feMerge</strong>
      </p>
      <p>
        The feMerge filter allows the combination of filters concurrently, rather than serially (as in the earlier examples). Rather than each filter being applied to the output of the preceding filter, feMerge gives us a way to temporarily store the output of each filter. Once several layers have been created and stored as the results of different primitives, then they may be placed on the canvas in order from bottom to top. Topmost layers should have some transparency (or incompleteness) in the fill area, so as to allow those layers underneath to be visible<sup><a class="footnoteanc" href="#footnote20sym" id="footnote20anc">20</a></sup>. 
      </p>
      <p>
        In the following example, we are interested in converting an image from standard RGB to partial transparency, in this case using the darkest parts of the image, so that an underlying color shines through. In this case, 'yellow' created as a part of the filter, is used.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              Using &lt;feMerge&gt; to combine &lt;feFlood&gt; with &lt;feColorMatrix&gt; applied to &lt;image&gt;
            </td>
          </tr>
          <tr>
            <td class="center" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m3d683640.jpg" alt="combined filters on an image" id="graphics103" height="240" width="229" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;filter id="twoF" x="0%" y="0%" width="100%" height="100%"&gt;
  &lt;feFlood flood-color="yellow" result="A"/&gt;
  &lt;feColorMatrix type="matrix" in="SourceGraphic" result="B"
    values=
    "1 0 0 0 0 
     0 1 0 0 0 
     0 0 1 0 0 
     1 1 1 0 0
    "/&gt;
  &lt;feMerge&gt;
    &lt;feMergeNode in="A"/&gt;
    &lt;feMergeNode in="B"/&gt;
  &lt;/feMerge&gt;
&lt;/filter&gt;
&lt;image x="35%" y="20%" xlink:href="p84.jpg" 
  filter="url(#twoF)" height="50%" width="30%"/&gt;
</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        What we have done above, is to create a yellow rectangle with the &lt;feFlood&gt;. We then store it temporarily in the variable "A". Next we use the &lt;feColorMatrix&gt; to operate on the SourceGraphic (the JPEG image). In the top three rows of the color matrix, we preserve the RG and B channels but in the last, or alpha, row, we let positive values in any of the three channels contribute positively to the alpha channel, hence creating transparency in the darker parts of the image. This interim result is labeled "B." We then rebuild the image by laying down the interim results: first A, then atop that B. Since B is now partially transparent we may see the yellow, underneath.
      </p>
      <p>
        &lt;feMerge&gt; allows for any number of &lt;feMergeNode&gt;s to be inserted into the filter, so that we may build rather complex objects with it.
      </p>
      <p>
        The reader may realize that there are at least two other ways of accomplishing the above effect. One is to simply build a yellow &lt;rect&gt;, under the &lt;image&gt;.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="296">
        <col width="280" />
        <tbody>
          <tr>
            <td class="caption">
              <p>
                Build &lt;rect&gt; underneath &lt;image&gt;
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;filter id="twoD"&gt;<br /> &lt;feColorMatrix type="matrix"<br /> values="1 0 0 0 0 <br /> 0 1 0 0 0 <br /> 0 0 1 0 0 <br /> 1 1 1 0 0"/&gt;<br />&lt;/filter&gt;<br />&lt;rect x="3%" y="20%" height="50%" width="30%" fill="yellow"/&gt;<br />&lt;image x="3%" y="20%" xlink:href="p80.jpg" filter="url(#twoD)" height="50%" width="30%"/&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The advantage of the &lt;feMerge&gt; approach shown earlier, is that it is portable. We may apply this filter to <em>any</em> image we wish to without having to build a &lt;rect&gt; underneath it. If we wish to add or withdraw such an effect dynamically, it will be much cleaner since the effect (including its color) is entirely self-contained.
      </p>
      <p>
        Another approach is to build a &lt;rect&gt; on top of the image and then using the BackgroundImage (as discussed momentarily) to "swap" the order of the two images within the filter.
      </p>
      <p>
        Here's another example of the use of &lt;feMerge&gt;, this time in conjunction with &lt;feImage&gt;.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="572">
        <col width="556" />
        <tbody>
          <tr>
            <td class="caption">
              Bringing a bitmap into a filter with &lt;feImage&gt;
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/5238cf11.jpg" alt="use of &lt;feImage&gt; to insert a bitmap in a filter stream" id="graphics104" height="288" width="552" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;filter id="I2" x="0" y="0" height="100%" width="100%"&gt;<br />&lt;feImage xlink:href='p84.jpg' result="A"/&gt;<br />&lt;feColorMatrix type="matrix" result="B" in="SourceGraphic"<br /> values="1 0 0 0 0 , 0 1 0 0 0 , 0 0 1 0 0 , 1 1 1 0 0"/&gt;<br />&lt;feMerge&gt;<br /> &lt;feMergeNode in="A"/&gt;<br /> &lt;feMergeNode in="B"/&gt;<br />&lt;/feMerge&gt;&lt;/filter&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In the above, a particular image is brought in through an &lt;feImage&gt; and laid down at the beginning of the &lt;feMerge&gt;.While effects such as seen above could probably be accomplished through other means (such as &lt;mask&gt; with transparency), the ability to bring an image directly into the processing stream is certainly convenient.
      </p>
      <h4 id="Filtering_backgrounds">
        Filtering graphics along with their backgrounds
      </h4>
      <p>
        By increasing the transparency of all or part of an SVG graphic, we allow whatever is underneath it (its <em>background</em>) to become at least partly visible. However the opacity of the top layer does not really allow what is underneath it to <em>interact</em> with it in any substantial way. Though background content may be visible, it is not available for modification or use within the current filter when it is viewed only through the transparency of what is atop it. Just as we may refer to the SourceGraphic as the object to which the filter has been applied, we may also refer to the BackgroundImage as whatever happens to be behind it.
      </p>
      <p>
        In order to allow the content of BackgroundImage to be made available to a filter, a container (a &lt;g&gt; or a &lt;use&gt;) that contains both the SourceGraphic and any underlying elements desired to be filtered with it must be instructed to make that background content available to the filter through setting its <em>enable-background</em> attribute to "new":
      </p><code class="line">&lt;g enable-background="new"&gt;</code>
      <p>
        An illustration using &lt;feMerge&gt; may demonstrate how this can prove useful. We will apply a Gaussian blur to a source image, and a slightly different blur to its background to see how this allows filters to simultaneous manipulate two images with a single filter.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="280" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Accessing and using BackgroundImage in a filter
            </td>
          </tr>
          <tr>
            <td colspan="2" class="center" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m3f06e7da.png" alt="using and not using BackgroundImage" id="graphics105" height="200" width="389" />
            </td>
          </tr>
          <tr>
            <th>
              Left: making use of BackgroundImage within a filter with feMerge
            </th>
            <th>
              Right: the same filter without merging of BackgroundImage
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code>
&lt;filter id="BI" &gt;
  &lt;feGaussianBlur stdDeviation="35" /&gt;
  &lt;feComponentTransfer result="A"&gt;
    &lt;feFuncA type="linear" slope="1.1" intercept="0"/&gt;
  &lt;/feComponentTransfer&gt;
  &lt;feGaussianBlur in="BackgroundImage" 
                  stdDeviation="20,1" result="B"/&gt;
  &lt;feMerge&gt;
    &lt;feMergeNode in="A"/&gt;
    &lt;feMergeNode in="B"/&gt;
  &lt;/feMerge&gt;
&lt;/filter&gt;
</code>
</pre>
            </td>
            <td>
              <pre>
<code>
&lt;filter id="SI" &gt;
  &lt;feGaussianBlur in="BackgroundImage" stdDeviation="20,1"/&gt;
  &lt;feGaussianBlur in="SourceGraphic" stdDeviation="35" /&gt;
  &lt;feComponentTransfer &gt;
    &lt;feFuncA type="linear" slope="1.1" intercept="0"/&gt;
  &lt;/feComponentTransfer&gt;
&lt;/filter&gt;
</code>
</pre>
            </td>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <p>
                <em>The two SourceGraphics and the three underlying horizontal stripes that constitute the BackgroundImage</em>
              </p>
            </td>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <pre>
<code>
&lt;g enable-background="new"&gt;
  &lt;rect x="0" y="12%" height="4%" width="100%" fill="grey"/&gt;
  &lt;rect x="0" y="22%" height="4%" width="100%" fill="grey"/&gt;
  &lt;rect x="0" y="32%" height="4%" width="100%" fill="grey"/&gt;
  &lt;rect x="11%" y="10%" height="30%" width="18%" filter="url(#BI)" fill="white"/&gt;
  &lt;rect x="38%" y="10%" height="30%" width="18%" filter="url(#SI)" fill="white"/&gt;
&lt;/g&gt;

</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In the above illustration, the three vertical stripes, though lying below the SourceGraphic (the blurred white rectangle) have not been included in the &lt;g&gt; that has enable-background turned on, hence they are not affected by the filter #BI. Note how the three horizontal stripes in the left image (constituting BackgroundImage) have been horizontally blurred and have been layered atop the SourceGraphic. At right, though the BackgroundImage has been made accessible to the filter and a temporary image of it after horizontal blurring has been made, that result has not been shared with the feMerge and hence is discarded prior to rendering.
      </p>
      <h4 id="feBlend">
        feBlend
      </h4>
      <p>
        &lt;feBlend&gt; is used to blend, or mix two images together with a variety of simple methods (i.e., values of the <em>mode</em> attribute): "normal","screen","multiply","lighten", and "darken."
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              FeBlend applied to BackgroundImage using, from left to right, modes "normal","screen","multiply","lighten", and "darken."
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/1e8c8a0d.jpg" alt="feBlend in different modes" id="graphics106" height="128" width="576" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;filter id="normal"&gt;
&lt;feBlend mode="normal" in2="BackgroundImage" in="SourceGraphic"/&gt;
&lt;/filter&gt;
</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        &lt;feBlend&gt; receives input from two sources rather than just one, allowing it to take results from other filters as well as SourceGraphic (the default<sup><a class="footnoteanc" href="#footnote21sym" id="footnote21anc">21</a></sup> ) or BackgroundImage. As such it can combine quite sophisticated processes.
      </p>
      <p>
        The values of its <em>mode</em> attribute are as they would be in a photo editing program like Adobe Photoshop�. Stated informally, these modes work as follows:
      </p>
      <ul>
        <li>normal &mdash; allows BackgroundImage (or other in2) to be visible only if SourceGraphic (or other in) contains transparency.
        </li>
        <li>screen &mdash; allows each image's values to add brightness to the other.
        </li>
      </ul>
      <p class="explain">
        example:<br />
        white screen black = white<br />
        <span style="font-style: italic; color: black;">and</span><br />
        red (#FF0000) screen grey (#808080) = #ff8080 ("rose" or a rose-like color)
      </p>
      <ul>
        <li>multiply &mdash; allows values of the images to subtract brightness from one another
        </li>
      </ul>
      <p class="explain">
        example:<br />
        white mult black = black<br />
        <span style="font-style: italic; color: black;">and</span><br />
        red (#FF0000) mult grey (#808080) = #800000 (a shade of red darker than "darkred")
      </p>
      <ul>
        <li>lighten &mdash; takes the brighter value of the two images at each pixel
        </li>
      </ul>
      <p class="explain">
        example:<br />
        white lighten black = white<br />
        <span style="font-style: italic; color: black;">and</span><br />
        red (#FF0000) lighten grey (#808080) = #ff8080 ("rose")
      </p>
      <ul>
        <li>darken &mdash; takes the darker value of the two images at each pixel.
        </li>
      </ul>
      <p class="explain">
        example:<br />
        white darken black = black<br />
        <span style="font-style: italic; color: black;">and</span><br />
        red (#FF0000) darken grey (#808080) = #800000 ("darker red")
      </p>
      <h4 id="feComposite">
        feComposite
      </h4>
      <p>
        Neither &lt;feMerge&gt; nor &lt;feBlend&gt; presents us with a way to either average or intersect two images.&lt;feComposite&gt; can be used for that work. It allows the superimposition of the footprints of images as well as the relative blending of their pixel values. Like &lt;feMerge&gt; it takes two inputs <em>in</em> and <em>in2</em>. By default, <em>in</em> is the SourceGraphic.
      </p>
      <p>
        A typical use would look like
      </p>
      <p class="code">
        &lt;filter id="in"&gt;<br />
        &lt;feComposite in2="BackgroundImage" operator="in" /&gt;<br />
        &lt;/filter&gt;
      </p>
      <p>
        The operator attribute takes values of "in", "over","out","atop","xor", and "arithmetic". All of these except "arithmetic" are simple attributes, but when "arithmetic" is specified, four other parameters are invoked: k1, k2, k3, and k4. These assign weights respectively to: a component representing the multiple of the two images, the linear effect of the first image, the linear effect of the second image, and an intercept or brightness adjustment. In the following illustration, when operator is arithmetic, then k1="0" k2="1" k3="-1" and k4="1", meaning that the SourceGraphic(in) contributes positively, the BackgroundImage(in2) contributes negatively and brightness has been boosted.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              Illustration of four values of <em>operator</em> in<em>&lt;feComposite&gt;</em>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m7ba312dd.jpg" alt="feComposite with operator" id="graphics107" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Of the various operator values, "arithmetic" and "in", probably are most useful. "Arithmetic" is useful since it allows percentage-based blending of two images (much like opacity) as well as more complex effects as shown above. "In" is useful since it constrains the presence of one image to the footprint of another, much like a clipPath, but done as a part of a filter stream.
      </p>
      <h4 id="feDisplacementMap">
        feDisplacementMap
      </h4>
      <p>
        This effect is a bit different from others in the sense that it converts pixel color values in one image into geometric distortions of another image.
      </p>
      <p>
        &lt;feDisplacmentMap&gt; takes in(SourceGraphic by default) and in2, and uses a specified channel (R,G,B, or A) of in2to serve as displacement values which determine the direction and distance each pixel of <em>in</em> will be moved in either the x or y (or both) direction.
      </p>
      <p>
        For example, if we chose to use the Red channel of in2to horizontally distort in, and if the underlying image represented by in2is say, a red and black checkerboard (high on Red on the red squares and low on Red on the black squares) then those pixels of in which lie above red squares will be moved to the right, while those above black squares will be moved to the left.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              Using a checkerboard to displace parts of an image.
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m5be80d8b.jpg" alt="bitmapped image displaced by checkerboard" id="graphics108" height="180" width="288" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;filter id="d" x="0%" y="0%" height="100%" width="100%"&gt;
  &lt;feDisplacementMap scale="100" in2="BackgroundImage" xChannelSelector="R"/&gt;
&lt;/filter&gt;
&lt;g enable-background="new"&gt;
  &lt;rect x="24%" y="16%" height="66%" width="52%" fill="url(#Pattern)"/&gt;
  &lt;image filter='url(#d)' xlink:href="p17.jpg" 
   x="34%" y="22%" width="35%" height="50%" /&gt;
&lt;/g&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td class="example">
              An example using feDisplacementMap with SMIL can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/filterDisplacementMap9.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/filterDisplacementMap9.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In the illustration above, we signify that we wish to use the Red channel and that we wish it to be used for horizontal distortion, when we specify
      </p><code class="line">xChannelSelector="R" .</code>
      <p>
        The scale attribute (100 in this case) determines the magnitude of the distortion (100 pixels). A value of zero would mean that no displacement of pixels will occur.
      </p>
      <p>
        In the above example, slight discoloration of the warped image occurs in ASV+IE, though the Opera browser keeps the image as we would expect it. Firefox, as of this writing, does not manage &lt;feDisplacementMap&gt;. One suggestion as to how to circumvent the discoloration would be to adjust the colorspace-interpolation-filters to "linearRGB." Another way would be to bring the image into the filter through an &lt;feImage&gt; as shown in the following:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              &lt;feDisplacementMap&gt; as a part of a more complex filter
            </td>
          </tr>
          <tr>
            <td class="center" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/ma4d7e6d.jpg" alt="feDisplacementMap with feImage" id="graphics109" height="180" width="288" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;filter id="d" x="10%" y="-5%" height="100%" width="100%"&gt;
   &lt;feImage xlink:href="p17.jpg" result="M" /&gt;
   &lt;feDisplacementMap in="M" in2="BackgroundImage" scale="100" xChannelSelector="R"/&gt;
&lt;/filter&gt;

&lt;rect id="screen" x="0%" y="0%" height="100%" width="100%" fill="black"/&gt;
&lt;g enable-background="new"&gt;
   &lt;rect x="24%" y="16%" height="66%" width="52%" fill="url(#Pattern)"/&gt;
   &lt;rect filter='url(#d)' x="250" y="150" width="300" height="300" /&gt;
&lt;/g&gt;</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The fact that we used both red squares and the red channel is really unimportant. We are restricting to just the red channel, so that "red" "white" "yellow" or "magenta" squares, all of which are 100% on their red channel would all have had the same result. That is, had we used white squares instead of red, the result would have been the same, since white, restricted to the Red channel is "#FF" which translates to 100%.
      </p>
      <p>
        Clearly this filter primitive has lots of potential for creating interesting effects with various warping gradients. The following example uses an underlying reflected gradient.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="273" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              A reflected radial gradient (left) and its use in &lt;feDisplacementMap&gt; (right)
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m12348261.jpg" alt="reflected radial gradient" id="graphics110" height="180" width="300" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/4b1a1b1a.jpg" alt="image displaced by reflected radial gradient" id="graphics111" height="180" width="300" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        We may use &lt;feDisplacementMap&gt; to define distortions that go beyond those allowed by the isometric spatial transformations: translate, rotate, scale, and skew. Based on continuous radial, and linear gradients, particularly as enhanced by &lt;feTurbulence&gt; it should be possible to build warps of almost any kind desired.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              A few distortions (random and customized)
            </td>
          </tr>
          <tr>
            <td class="center" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/2b760136.jpg" alt="text and ellipse displaced by feTurbulence" id="graphics112" height="175" width="332" />
            </td>
          </tr>
          <tr>
            <th class="center" valign="top">
              Some text and an ellipse warped through &lt;feDisplacement&gt; by &lt;feTurbulence&gt;
            </th>
          </tr>
          <tr>
            <td valign="top"></td>
          </tr>
          <tr>
            <td class="center" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/7e380a2b.jpg" alt="text and ellipse displaced by gradient" id="graphics113" height="175" width="299" />
            </td>
          </tr>
          <tr>
            <th valign="top">
              Some text and an ellipse warped through &lt;feDisplacement&gt; by a rotated linear gradient.
            </th>
          </tr>
          <tr>
            <td class="example">
              This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/filterDisplacementMap5a.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/filterDisplacementMap5a.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <h2 id="SMIL_animations">
        Chapter IV - SMIL animations embedded in SVG
      </h2>
      <h4 id="SMIL_overview">
        Overview of SMIL
      </h4>
      <p>
        Synchronized Multimedia Integration Language, or SMIL, is a language separate from, but closely integrated with SVG. It allows for various animation effects to be used in conjunction with SVG.
      </p>
      <p>
        SMIL has been a W3C recommendation since 1998 when version 1.0 was adopted<sup><a class="footnoteanc" href="#footnote22sym" id="footnote22anc">22</a></sup>. The SMIL working group has remained active since then with version 2.1 becoming a recommendation in December 2005.
      </p>
      <p>
        SMIL's applications are not limited to the SVG environment, being appropriate for multimedia developments in a variety of other contexts, including HTML. The W3C has this to say about SMIL<sup><a class="footnoteanc" href="#footnote23sym" id="footnote23anc">23</a></sup> :
      </p>
      <blockquote class="q">
        <p>
          "The Synchronized Multimedia Activity designed the Synchronized Multimedia Integration Language (SMIL, pronounced "smile") for choreographing multimedia presentations where audio, video, text and graphics are combined in real time. SMIL is a W3C Recommendation that enables authors to specify and control the precise time a sentence is spoken and make it coincide with the display of a given image."
        </p>
      </blockquote>
      <p>
        This discussion of SMIL will be limited to its application within SVG, and even then, will cover only a fraction of this rather vast landscape<sup><a class="footnoteanc" href="#footnote24sym" id="footnote24anc">24</a></sup>. For a broader consideration, there are numerous references available on the web, and several books including one by two members of the SMIL Working Group<sup><a class="footnoteanc" href="#footnote25sym" id="footnote25anc">25</a></sup>.
      </p>
      <p>
        SMIL is an example of what is known as declarative animation (related to declarative programming). Rather than specifying the details of how to do something (as in an imperative language), a declarative approach specifies what the end result is supposed to be and leaves the details of implementation up to the client software. Other examples of declarative approaches include HTML, PostScript, and SVG. With each, the programmer/developer describes something like a &lt;circle&gt; and lets the device implement it to the best of its ability. The developer does not need to worry about kerning of characters, placement of pixels, anti-aliasing, dithering and fill-region algorithms. In fact the entire field of vector graphics is sort of a case in point: one describes the thing to be drawn and then different devices (like a screen or a printer) will render the underlying concept in, perhaps, very different ways. <sup><a class="footnoteanc" href="#footnote26sym" id="footnote26anc">26</a></sup> 
      </p>
      <p>
        An example:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="560">
        <col width="141" />
        <col width="135" />
        <col width="240" />
        <tbody>
          <tr>
            <td colspan="3" class="caption">
              Progress of a simple SMIL animation
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/4061059e.png" alt="at start oval has rx=10" id="graphics114" height="128" width="140" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m78c9c220.png" alt="midway in size and in time" id="graphics115" height="128" width="140" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/185d1a9e.png" alt="largest oval appears halfway through the time interval" id="graphics116" height="128" width="240" />
            </td>
          </tr>
          <tr>
            <th>
              Prior to clicking "GO"
            </th>
            <th>
              1 (or 3) seconds elapsed
            </th>
            <th>
              2 seconds elapsed
            </th>
          </tr>
          <tr>
            <td colspan="3" valign="top">
              <pre>
<code>&lt;ellipse cx="150" cy="75" rx="10" ry="40" fill="grey"&gt;<br /> &lt;animate attributeName="rx" begin="G.click" end="S.click" dur="4s" <br /> values="10; 110; 10" repeatCount="indefinite"/&gt;<br />&lt;/ellipse&gt;<br />&lt;g id="G"&gt;<br />&lt;rect x="85" y="130" height="20" width="60" fill="#bbb"/&gt;<br />&lt;text x="90" y="148" font-size="20" fill="black"&gt;GO<br />&lt;/g&gt;<br />&lt;g id="S"&gt;<br />&lt;rect x="150" y="130" height="20" width="60" fill="black"/&gt;<br />&lt;text x="155" y="148" font-size="20" fill="white"&gt;STOP<br />&lt;/g&gt;</code>
</pre>
            </td>
          </tr>
          <tr>
            <td colspan="3" class="example">
              This example may be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/SMIL1.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/SMIL1.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Above, we have two rectangles each inside &lt;g&gt;s named either "G" (for "GO") or "S" (for "STOP"). Unlike in HTML, neither "button" has an event handler directly associated with its code. Instead, the "arming" of the button is done by any of the things that will respond to it. The ellipse has had a special tag, &lt;animate&gt;, inserted into it. That's where the SMIL takes place.
      </p>
      <p>
        Let's take a closer look:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="220" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              The animate tag in SVG/SMIL
            </td>
          </tr>
          <tr>
            <th>
              The code
            </th>
            <th>
              The meaning
            </th>
          </tr>
          <tr>
            <td>
              <code>&lt;animate</code>
            </td>
            <td valign="top">
              <p>
                The tag is embedded in the middle of the SVG object to be animated, in this case an ellipse.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <code>attributeName="rx"</code>
            </td>
            <td valign="top">
              <p>
                This identifies which attribute of the parent object (ellipse) will be modified by the animation.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <code>begin="G.click"</code>
            </td>
            <td valign="top">
              <p>
                This says that the animation will begin when the object with id="G" is clicked upon.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <code>end="S.click</code>
            </td>
            <td valign="top">
              <p>
                This says that the animation will finish when the object with id="S" is clicked upon.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <code>dur="4s"</code>
            </td>
            <td valign="top">
              <p>
                This says the animation will last 4 seconds.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <code>values="10;110; 10"</code>
              </p>
            </td>
            <td valign="top">
              <p>
                This establishes the values of the animated attribute (rx), which will begin at 10 (pixels) increase incrementally to 110 (pixels) and finish back at 10 again. By default, 110 will be reached halfway between the beginning and end of the animation: namely after 2.0 seconds have elapsed.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <code>repeatCount="indefinite"</code>
            </td>
            <td valign="top">
              <p>
                This means the animation will keep going indefinitely. That it will continue repeating until "S" is clicked.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <code>/&gt;</code>
            </td>
            <td valign="top">
              <p>
                This terminates the &lt;animate&gt; tag.
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        An important observation from the above, is that we do not tell this infinite loop how often it is to refresh the screen; we trust the browser to figure that out for us based on the description of what we want to have happen. Again the emphasis is on what is done rather than how to do it.
      </p>
      <p>
        Another thing to note is that in this case we wish to have the ellipse grow and then shrink again (gradually in both directions). To do this, we specify the maximum value (110), place it in the middle of the two minima (10) at either end of the values list, and let the browser figure out that 110 will occur halfway through the 4 second animation.
      </p>
      <h4 id="smil_vs_js">
        Comparison with JavaScript animation
      </h4>
      <p>
        Before plunging into SMIL's capabilities and exploring the syntax of the &lt;animate&gt; and allied tags, we'll make a brief comparison to another prevalent approach to web-based animation. If you are not familiar with JavaScript-based animation, then you may wish to skip this section. For those with prior knowledge of JavaScript animation, it may help to put SMIL animation in a helpful cognitive framework. This section is not required for an understanding of SMIL; rather it is a justification for why you should learn SMIL! It is easier.
      </p>
      <p>
        While this book discusses the ASV+IE, Firefox, Opera, Safari and Chrome browsers, only ASV+IE and Opera support most of SMIL at the current time, while Safari's support is somewhat fledgling, having just been introduced in Safari 4 beta in early 2009. JavaScript is supported in all five environments. Some might view this as reason to dismiss SMIL right here and now, but by the time this book reaches your hands, it is quite possible that Firefox and other browsers will be quite close to having SMIL implemented within their SVG suite.
      </p>
      <p>
        In JavaScript, animation is usually created using the methods setTimeout() or setInterval() (associated with the window object). These methods allow repeated updates of the screen after changing certain attributes of the objects on the screen.
      </p>
      <p>
        Suppose, for example, we wish to move an object around on the screen by changing the values of its x and y coordinates of a &lt;div&gt; that contains it. (Typically, the object will be a child of an absolutely positioned &lt;div&gt; tag.) With every refresh of the screen (happening every <em>dt</em> units of time) we move the &lt;div&gt; <em>dx</em> pixels horizontally and <em>dy</em> pixels vertically. The author of such an animation must guess the screen refresh rate of a typical visitor's client software and then adjust <em>dt</em>, <em>dx</em>, and <em>dy</em> accordingly so that <em>dx</em> and <em>dy</em> are kept as small as possible subject to the constraint that the browser must do all that it needs to in <em>dt</em> units of time. That is, the author must engage in guesswork and experimentation to determine what will produce a smooth animation. If we make <em>dt</em> too small then the CPU and screen of the user's machine may not be able to perform all the calculations that we require of it. If <em>dt</em> is too large, the object will appear to move very slowly, implying that we may wish to increase dx and dy to increase the speed. This however, is fraught with problems since values of <em>dx</em> and <em>dy</em> that are too large will result in apparent large jerking leaps across the screen.
      </p>
      <p>
        Another complexity is involved in setting up multiple independent animations running in parallel. This has been rather notorious for the difficulty of managing the timing. Typically, one sets up a large central timing loop in which all animated objects are updated every <em>dt</em> units of time &mdash; the problem is that not all animations will look quite right if they are all running in integer multiples of the same <em>dt</em>, which is what happens with the central timing loop. Alternatively, one may try to set up multiple setTimeout loops, but the problem here (as oft reported) is that any synchrony associated with the separate loops tends to dissipate over time, particularly when the JavaScript application is taxing the CPU to begin with.
      </p>
      <p>
        In contrast, the declarative animation of SMIL lets the browser software handle all these decisions since the locus of the animation is kept directly affiliated with the animated object.
      </p>
      <p>
        Herewith, a side-by-side comparison of the two different approaches to setting up an oscillating ellipse as in the above example.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="280" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Oscillating ellipse &mdash; two approaches with similar results
            </td>
          </tr>
          <tr>
            <th>
              SMIL animation
            </th>
            <th>
              JavaScript animation
            </th>
          </tr>
          <tr>
            <td valign="bottom">
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;<br />&lt;ellipse cx="150" cy="75" <br /> rx="10" ry="40" fill="blue"&gt;<br /> &lt;animate attributeName="rx" <br /> dur="4s" values="10;110;10" <br /> repeatCount="indefinite"/&gt;<br />&lt;/ellipse&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
            <td>
              <pre>
<code>
&lt;svg xmlns="http://www.w3.org/2000/svg"
 onload="startup(evt)"&gt;
  &lt;script&gt;
  &lt;![CDATA[
  var xmlns="http://www.w3.org/2000/svg"
  var E;
  function startup(evt){
   E=document.getElementById("E");
   oscillate(10,110,10,1);
  }
  function oscillate(thin,wide,curx,dir){
   E.setAttributeNS(null,"rx",curx);
   curx+=dir;
   if (curx&gt;wide||curx&lt;thin ) {
    s="oscillate(" window.settimeout(s,10);
    dir=-dir;
   }
  }
&lt;/script&gt;
&lt;ellipse id="E" cx="150" cy="75" rx="10" ry="40" fill="blue"/&gt;
&lt;/svg&gt;

</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Note that there is considerably less code to maintain, and considerably less complexity in the code with SMIL for this sort of animation<sup><a class="footnoteanc" href="#footnote27sym" id="footnote27anc">27</a></sup>. It should also be stated that the behavior of these two approaches is not completely equivalent. On the Windows machine I am using today, the JavaScript approach runs slightly faster in ASV+Internet Explorer. An older machine will run it slower. This can be changed by adjusting the timing &mdash; currently it changes the radius of the ellipse one pixel every 10 milliseconds. In Opera, the JavaScript animation is not smooth (appearing to jerk just a bit), though the SMIL animation is quite smooth.
      </p>
      <p>
        One pleasant feature about the SMIL approach is the close integration of the animation with the object itself. Note that the &lt;animate&gt; tag is nested directly within the &lt;ellipse&gt; rather than in a function located elsewhere and relying on at least some global variables.
      </p>
      <p>
        Not all animated effects are best in SMIL. Many types of animation (like setting a variety of objects bouncing off of one another) are simply not feasible in SMIL. However, both SMIL and JavaScript-based animations are possible in SVG, so that the developer has both sets of capabilities at his or her disposal.
      </p>
      <p>
        Most simple SMIL animations appear at least as smooth if not smoother than their JavaScript counterparts. At first glance, some SMIL animations may seem more sluggish than their JavaScript counterparts. In general, it seems that so long as the attributes being animated and the objects to which they belong remain relatively simple, SMIL animations will be just as robust and often smoother than JavaScript animations for the same purpose. There are examples<sup><a class="footnoteanc" href="#footnote28sym" id="footnote28anc">28</a></sup> , however where the JavaScript animation will appear smoother than its SMIL counterpart. Many of these differences are likely to be browser-dependent.
      </p>
      <p>
        In some tests of the relative priorities given to SMIL and JavaScript animation, when both are running and when the calculations or screen I/O overwhelm the processor, it was found that both the ASV+IE and Opera browsers give first priority to the SMIL animation, attempting to accomplish those tasks first before any JavaScript is attempted<sup><a class="footnoteanc" href="#footnote29sym" id="footnote29anc">29</a></sup>. This means, on occasion, that applications which rely on both may end up with the JavaScript completely stalled.
      </p>
      <h4 id="basic_smil">
        Basic SMIL animation
      </h4>
      <p>
        Let's start with a sort of simplest case: a rectangle that moves across the screen from left to right.
      </p>
      <pre>
<code class="code">&lt;rect x="10%" y="20" height="100" width="50" fill="blue"&gt;<br />&lt;animate attributeName="x" dur="4" values="10%;90%" /&gt;<br />&lt;/rect&gt;</code>
</pre>
      <p>
        In this case we've specified exactly three attributes: the attribute being changed (<em>attributeName</em>), the duration of the effect (<em>dur</em>) and the starting and ending values of the animated attribute. This results in a blue rectangle that starts moving when the page is loaded, moves across the window (until it is 90% of the way across), stops for a moment's hesitation<sup><a class="footnoteanc" href="#footnote30sym" id="footnote30anc">30</a></sup> , and then resets itself to its original, pre-animated, position. If we had begun with the assignment x="50%" instead of x="10%" we would see no difference in the appearance of the animation from beginning throughout its duration (since by the time the screen is rendered the animation has already begun), but at the end of the animation, the rectangle will reset to x="50%": hence a difference in how it terminates.
      </p>
      <p>
        We may also make all these measures not in terms of relative screen coordinates like 95%, but in absolute pixel amounts like 120, if we so prefer.
      </p>
      <p>
        If we wished to have the animation stop at its last position, instead of reverting to its first, we could add the attribute
      </p><code class="line">fill="freeze"</code>
      <p>
        If we wished for the animation to move smoothly rightward (until 90% of the way across the screen) and then return smoothly to the beginning, we simply add another value to the values list.
      </p>
      <pre>
<code class="code">&lt;rect x="10%" y="20" height="100" width="50" fill="blue"&gt;<br />&lt;animate attributeName="x" dur="4" values="10%;90%;10%" /&gt;<br />&lt;/rect&gt;</code>
</pre>
      <p>
        This succeeds in moving the rectangle all the way across the screen and back in the same four seconds used to move it just one direction in the earlier example. If we wished the last two animations to move at the same speed, then we would double the duration, since the distance to be traveled is twice what it was.
      </p>
      <p>
        We note also that the animation will reach its maximum value of x (90%) exactly halfway through the four seconds, since 90% is at the midpoint (the median position) of the three values contained in the values list. That is to say:
      </p><code class="line">values="10%;90%;10%"</code><br />
      and<br />
      <code class="line">values="10%;50%;90%;50%;10%"</code>
      <p>
        are equivalent (since 50% is halfway between 10% and 90%), while
      </p><code class="line">values="10%;90%;10%"</code><br />
      and<br />
      <code class="line">values="10%;30%;90%;30%;10%"</code>
      <p>
        are not. The latter values list will cause the rectangle to move faster during its middle half (the second and third of the four intervals determined by the five endpoints) than during its beginning or end.
      </p>
      <p>
        If we wish the animation not to stop but to run itself three times (at four seconds apiece), then we add an attribute:
      </p><code class="line">repeatCount="3"</code>
      <p>
        If we wish it not to stop but to keep going, then
      </p><code class="line">repeatCount="indefinite"</code>
      <p>
        will do the trick. It will keep going either until the page is closed, or the animation is stopped through some event, as discussed shortly.
      </p><a name="timing" id="timing"></a>
      <p>
        <strong>Multiple animations and timing</strong>
      </p>
      <p>
        It is important to realize that we may animate more than one element at a time:
      </p>
      <pre>
<code class="code">&lt;rect x="50%" y="20" height="5%" width="5%" fill="blue"&gt;<br /> &lt;animate attributeName="x" dur="2" values="10%;90%;10%" /&gt;<br /> &lt;animate attributeName="y" dur="2" values="10%;90%;10%" /&gt;<br />&lt;/rect&gt;<br /></code>
</pre>
      <p>
        This code succeeds in moving the rectangle back and forth diagonally across the screen, from upper left to lower right.
      </p>
      <p>
        In this example, the timing of both the <em>x</em> and <em>y</em> attributes are the same, meaning that both values reach their maxima and minima at the same time (as in a typical single loop JavaScript animation). This need not be the case however. The following code creates an animation in which the circle bounces about the screen like a billiard ball:
      </p>
      <pre>
<code class="code">&lt;circle cx="50%" cy="20" r="5%" fill="blue"&gt;<br /> &lt;animate attributeName="cx" dur="2.7" values="5%;95%;5%" <br /> repeatCount="indefinite" /&gt;<br /> &lt;animate attributeName="cy" dur="3" values="5%;95%;5%" <br /> repeatCount="indefinite" /&gt;<br />&lt;/circle&gt;<br /></code>
</pre>
      <p>
        This particular animation will repeat itself every 27 seconds, since 27 is the smallest number that is evenly divisible by both 3 and 2.7 &mdash; a necessary condition for the periodicities of <em>cx</em> and <em>cy</em> to synchronize. Observe, also that the angles involved in the bouncing of this billiard ball are all in the neighborhood of 45 degrees (assuming a square screen) since the values 2.7 and 3.0 are close in magnitude. If we wanted the bouncing to be more vertical than horizontal, then we could merely decrease the duration of the <em>cy</em> variable to something like:
      </p><code class="line">&lt;animate attributeName="cy" dur="0.5" values="5%;95%;5%"<br />
      repeatCount="indefinite" /&gt;</code>
      <p>
        while keeping the duration of <em>cx</em> unchanged. Alternatively, to the same end, we could also increase the number of key values for <em>cy</em> as follows:
      </p><code class="line">&lt;animate attributeName="cy" dur="3" repeatCount="indefinite" values="5%;95%;5%;95%;5%;95%;5%" /&gt;</code>
      <p>
        It is well worth pointing out that the types of the values should match. For example, if we were to try to interpolate between the value "0" and the value "50%", the browsers can be expected to use discrete animation in such a case. There are good reasons for this. I will leave finding those reasons as an exercise for the reader. ☺
      </p>
      <h4 id="keyTimes">
        keyTimes
      </h4>
      <p>
        In such animations, though we have succeeded in varying the horizontal and vertical components of the velocity independently, the apparent overall speed of the movement remains constant. We may vary the apparent speed through the use of the <em>keyTimes</em> attribute.
      </p>
      <p>
        What <em>keyTimes</em> does for us is to allow the values to provide an uneven distribution over the time interval. Ordinarily, when we specify something like <code>values="5%; 95%; 5%"</code>, those values for the animated variable correspond to the times 0%, 50% and 100% (as a percent of the way through the animation). The statement <code>values="5%; 10%; 95%; 10%; 5%"</code> would, by default, correspond to the times (0%; 25%; 50%; 75%; 100%) &mdash; that is, five "key times" associated with the four intervals between the beginning and end of the animation. Accordingly, the animation given by
      </p><code class="line">&lt;animate attributeName="cy" dur="0.5" values="5%;95%;5%" repeatCount="indefinite" /&gt;</code>
      <p>
        is equivalent to the one specified by:
      </p><code class="line">&lt;animate attributeName="cy" dur="0.5" values="5%;95%;5%" keyTimes="0; .5; 1" repeatCount="indefinite" /&gt;</code>
      <p>
        The <em>keyTimes</em> attribute, by default, breaks the animation duration into N equal intervals, where N is the number of values in the <em>values</em> attribute. <em>keyTimes</em>, like <em>values</em>, is a semi-colon delimited list that serves to determine when, in the course of the animation each of the values should be attained by the animated object. We may change the time at which the animation will reach intermediate values, by making unequal the intervals specified within <em>keyTimes</em>. The animation
      </p><code class="line">&lt;animate attributeName="cy" dur="10" values="5%;95%;5%"<br />
      keyTimes="0; .1; 1" repeatCount="indefinite" /&gt;</code>
      <p>
        will make the attribute <em>cy</em> take on its value of 95% after one second (the duration, 10 seconds, multiplied by the second key time: 0.1). The ellipse will, however, take nine seconds to get back to the starting position, meaning that it moves considerably faster in the first second than in the remaining time.
      </p>
      <h4 id="keySplines">
        keySplines
      </h4>
      <p>
        Thus far each of the animations we have considered (changing x and y coordinates) will result in animations for which both a) the paths traversed by the objects will be piecewise linear and b) the derivative of the velocity curve will be either constant or discontinuous. That is if there is to be any change of direction, speeding up or slowing down, then these changes will be sudden or discrete rather than gradual and continuous. There is, however, another timing control mechanism, known as <em>keySplines</em> which allows us to change the curve governing the rate of change over the <em>keyTimes</em> interval from 0 to 1 and thus produce gradual rates of change to an object's attributes.
      </p>
      <p>
        If we specify that
      </p><code class="line">calcMode="spline"</code>
      <p>
        then we are in a position to be able to use <em>keySplines</em> to make transitions among the <em>keyTimes</em> follow cubic splines rather than simple component-wise linear chunks.
      </p>
      <p>
        This topic is a bit complex, and since it is not crucial to one's understanding of SMIL animation, one might wish to skip ahead. Nevertheless, herewith is some discussion and examples of the use of <em>keySplines</em>.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="517">
        <col width="501" />
        <tbody>
          <tr>
            <td class="caption" valign="top">
              A series of points traversed by a moving object using <em>keySplines</em>.
            </td>
          </tr>
          <tr>
            <td class="center" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/ma343712.png" alt="progress of an animation with keySplines" id="graphics117" height="250" width="395" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;circle cx="50%" cy="20" r="5%" fill="blue"&gt;
  &lt;animate attributeName="cx" dur="3" values="5%; 95%;5%" 
     repeatCount="indefinite" /&gt;
  &lt;animate attributeName="cy" dur="6s" values="5%; 95%;5%" keyTimes="0;0.5; 1"
     calcMode="spline" keySplines="1 0 0 1; 0 0 1 1" repeatCount="indefinite" /&gt;
&lt;/circle&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Here, the path followed during the first half of the animation is the path on which points 1,2,3,4,5, and 6 lie. After the midpoint of the animation, the blue circle returns to its initial position via the line 6, 7, 8, 9, 10. If calcMode="spline" were not invoked, the animation would follow the path (10,9,8,7,6,7,8,9,10) repeatedly. The keySplines attribute contains a series of two control points in the (timein, timeout) plane, or four integers for every inter-keyTimes interval: in other words, we will have 4(n-1) integers for n keyTimes. Each pair of control points defines an approach gradient between the associated pair of key values. In this example, we will begin at (t=0, y=5%) and follow the spline attracted first by (t=1, y=5%) (all the while x is increasing linearly); then attracted by (t=0, y=95%) and finally ending up (at the end of the first transition) at (t=1, y=95%) namely halfway through the animation at position #6. (since x with half the duration has already been reset to its endpoint, 5%). The animation will speed up considerably between positions #3 and #4 since that is when the time deformation is greatest. The animation continues back along the two lines, since the keySplines path "0 0 1 1" does not alter the time sequence in the second half of the animation.
      </p>
      <p>
        One more example may help to clarify a bit.
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
<code>&lt;circle cx="50%" cy="20" r="5%" fill="blue"&gt;
   &lt;animate attributeName="cx" dur="3" values="5%;50%;95%;50%;5%"
      keyTimes="0;0.25;0.5;0.75; 1" calcMode="spline" 
      keySplines="0 0 1 1;0 .5 .5 1;0 0 1 1; 0 .5 .5 1"
      repeatCount="indefinite" 
   /&gt;
   &lt;animate attributeName="cy" dur="3s" values="50%;5%;50%;95%;50%" 
      keyTimes="0;0.25;0.5;0.75; 1" calcMode="spline"
      keySplines="0 .5 .5 1;0 0 1 1; 0 .5 .5 1 ;0 0 1 1"
      repeatCount="indefinite"
   /&gt;
&lt;/circle&gt;</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In the above the blue circle will follow the path given, more simply, by the ellipse
      </p><code class="line">&lt;ellipse cx="50%" cy="50%" rx="45%" ry="45%" /&gt;</code>
      <p>
        Were it not for the keySplines, the animation would follow a diamond connecting the four midpoints of the bounding rectangle of the screen. However since time runs linearly in the x direction while warped in the y direction and vice versa, the path ends up being bowed. The other thing about the above animation is that it speeds up considerably at the position of the key values; since that is where the time gradient changes most rapidly.
      </p>
      <p>
        In case this seems a bit complex, it is. The W3C has this<sup><a class="footnoteanc" href="#footnote31sym" id="footnote31anc">31</a></sup> to say on the subject:
      </p>
      <blockquote class="q">
        <p>
          <em>When a keySplines attribute is used to adjust the pacing between values in an animation, the semantics can be thought of as changing the pace of time in the given interval. An equivalent model is that keySplines simply changes the pace at which interpolation progresses through the given interval. The two interpretations are equivalent mathematically, and the significant point is that the notion of "time" as defined for the animation function f(t) should not be construed as real world clock time. For the purposes of animation, "time" can behave quite differently from real world clock time.</em>
        </p>
      </blockquote>
      <p>
        The reader will perhaps be relieved to discover that there are simpler ways to get an object to travel along a particular path during animation than by warping the time-space continuum. We will turn to other varieties of animation very shortly.
      </p>
      <h4 id="animation_varieties">
        Varieties of animation
      </h4>
      <p>
        Before moving to other aspects of SMIL, a couple of observations should be made. The author of an SVG document is not limited to one animated object, nor just a few per page. I have tested the embedding of several thousand independent objects each with independent SMIL animations, and generally (depending on the complexity of the features being animated), the browsers keep up fairly well.
      </p>
      <p>
        We might also encourage ourselves to remember that almost anything can be animated. In reading the W3C recommendation, finding something that cannot be animated is rather rare<sup><a class="footnoteanc" href="#footnote32sym" id="footnote32anc">32</a></sup>. Animation is a most interesting aspect of SVG. It also can be quite instructive to the learner: by animating an attribute, one can gain a very concrete sense of what exactly it is that that attribute controls. Here is a brief listing of some of the types of effects one can create &mdash; some with rather stunning results:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="464">
        <col width="448" />
        <tbody>
          <tr>
            <td class="caption">
              Various animatable attributes of objects
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                The cx, cy, rx and ry of an ellipse
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                The height of an image
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                The opacity of an image
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                The scale of an feDisplacementMap
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                The focal points and radius of a reflected radial gradient
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                The offset and stop-opacity of a stop in a radial gradient
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                The baseFrequency or seed of an feTurbulence
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                The height of a rectangle contained in a pattern
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                The values of an feColorMatrix
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        We also have the capability to animate features which are multi-valued, path-based, transformational, non-numeric, or chromatic. We will discuss examples of each, in turn.
      </p>
      <h4 id="multi-valued_animation">
        animation of multi-valued attributes
      </h4>
      <p>
        Thus far, all the animated effects we have investigated for SMIL have involved single-valued (or scalar) attributes: such things as the height of a rectangle, the radius of a circle. However in some cases, the value of an attribute may be a list (or vector) with multiple values in it. An obvious example is the d attribute of a path: a space delimited list of x and y coordinates. Well, it so turns out, that we can animate these sorts of things as well, provided the number of items in the lists associated with the animated attributes matches up. If a path has 17 points at the beginning of the animation it should have 17 points throughout the animation.
      </p>
      <p>
        Then, (provided that the lists match up in quantity and are numeric), SMIL interpolates by generating intermediate frames. It's great for animating B&eacute;zier curves to give character to a contour or allow a complex shape to mutate gradually. Here's a simple example:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="529">
        <col width="160" />
        <col width="161" />
        <col width="163" />
        <tbody>
          <tr>
            <td colspan="3" class="caption">
              Gradually changing one control point in the "d" attribute of a cubic spline curve
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m65a1ddfa.png" alt="animated bezier curve stage 1" id="graphics118" height="209" width="161" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m466e04e5.png" alt="animated bezier curve stage 2" id="graphics119" height="209" width="161" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m35803976.png" alt="animated bezier curve stage 3" id="graphics120" height="209" width="161" />
            </td>
          </tr>
          <tr>
            <td>
              <p>
                Beginning (0 seconds)
              </p>
              <p>
                C2=(100,400)
              </p>
            </td>
            <td>
              <p>
                Middle of first half
              </p>
              <p>
                (about 0.5 sec)
              </p>
              <p>
                C2 ≈(100,250)
              </p>
            </td>
            <td>
              <p>
                End of first half (1 sec) C2=(100,100)
              </p>
            </td>
          </tr>
          <tr>
            <td colspan="3" valign="top">
              <pre>
<code>&lt;animate attributeName="d" dur="2s" repeatCount="indefinite" values=<br />"M 100 200<br />  C 100 150 250 150 100 100 <br /> C 0 50 <b>100 400</b> 100 200<br />;<br />M 100 200<br /> C 100 150 250 150 100 100 <br /> C 0 50 <b>100 100</b> 100 200<br />;<br />M 100 200<br /> C 100 150 250 150 100 100 <br /> C 0 50 <b>100 400</b> 100 200<br />" /&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td class="example" colspan="3">
              This example may be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/path10.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/path10.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In this example, only one point has been changed, to make the example simple enough to read. But that is not at all a requirement. I've created animations of B&eacute;ziers that contain several hundred points, and the animations appear to transition quite smoothly.
      </p>
      <h4 id="follow-paths">
        Following paths
      </h4>
      <p>
        One of the most convenient and pleasant aspects of SVG is the fact that we may build a path, and let an object follow it over time. Given the complexity of B&eacute;zier curves for example, being able to instruct an object "follow this path" without having to calculate, in your code, where the path actually is in (x,y) coordinates, is remarkably handy and user-friendly. It is not too tricky, so here's an example.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="560">
        <col width="544" />
        <tbody>
          <tr>
            <td class="caption">
              Using &lt;animateMotion&gt; to follow a &lt;path&gt;. Five stages of a repeating animation.
            </td>
          </tr>
          <tr>
            <td class="center" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m4bdde40a.png" alt="Five stages of an animation moving along a curve" id="graphics121" height="200" width="419" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;path id="curve" stroke="black" fill="none" stroke-width="5"
    d="M 110,200 C 300,130 400,350 450,150 500,-50 -90,270 110,200" /&gt;

&lt;ellipse cx="7" cy="-5" rx="20" ry="14" fill="#aaa" stroke="#666" 
     stroke-width="2" opacity=".8"&gt;
   &lt;animateMotion dur="2s" rotate="auto" repeatCount="indefinite" &gt;
      &lt;mpath xlink:href="#curve"/&gt;
   &lt;/animateMotion&gt;
&lt;/ellipse&gt;
 </code>
</pre>
            </td>
          </tr>
          <tr>
            <td class="example">
              This example may be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/SMIL7g.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/SMIL7g.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In the above, the path (with id="curve") describes a smooth curve using two cubic transitions. It begins and ends at the same (x,y) coordinate, (110,200). The &lt;ellipse&gt; is instructed to follow "curve" through the use of an &lt;animateMotion&gt; containing an embedded reference to the path by its id. We specified rotate="auto" so that the ellipse will actually rotate as it moves around the path so that its orientation parallels that of the path. Another matter worth noting is the initial position of the ellipse. Observe that ellipse #2 is just slightly above the curve. This is because its initial position cy=-5 becomes translated into an offset relative to its ultimate position on the curve<sup><a class="footnoteanc" href="#footnote33sym" id="footnote33anc">33</a></sup>. 
      </p>
      <p>
        Timing of the motion is uniform relative to the length of the curve. If we wish to vary the timing, and make it differential over the path, then we can apply <em>keySplines</em> as discussed above in the case of the &lt;animate&gt; tag. The following can be inserted into the above example, replacing the earlier &lt;animateMotion&gt; to change the motion so that it appears to hesitate twice in each traversal of its path
      </p>
      <pre>
<code class="code">&lt;animateMotion dur="2s" keyTimes="0;.6;1"<br />calcMode="spline" keySplines="0 0 1 0;0 0 1 0"<br />rotate="auto" repeatCount="indefinite" &gt;<br />&lt;mpath xlink:href="#curve"/&gt;<br />&lt;/animateMotion&gt;<br /></code>
</pre><a name="transformation_animation" id="transformation_animation"></a>
      <p>
        <strong>Animation of transformations</strong>
      </p>
      <p>
        Not all SVG objects share the same collection of attributes. A rectangle and an image share the attributes x, y, height and width, but an ellipse has cx, cy, rx, and ry to control its placement on the screen. A common way of moving all these objects about on the screen is a natural thing for a developer to want. Likewise we might wish to be able to change the size and rotation of objects without having to calculate the new coordinates and replot a new curve. We have seen (in Chapter 2) how to use the transform tag to rotate, translate, and scale objects, so it might appear obvious to try something like:
      </p>
      <pre>
<code class="code">&lt;someSVGtag transform="rotate(90)"&gt;<br />&lt;animate attributeName="transform" dur="2s"<br />values="rotate(90);rotate(180)" /&gt;<br />&lt;/someSVGtag&gt;<br /></code>
</pre>
      <p>
        It doesn't work quite that way, but that's actually close to how it does work. You may recall then when we wanted to rotate a linearGradient we used something called &lt;gradientTransform&gt;. Likewise, to rotate an animation we use &lt;animateTransform&gt;. An example:
      </p>
      <pre>
<code class="code">&lt;ellipse cx="280" cy="175" rx="100" ry="50" fill="blue"&gt;<br />&lt;animateTransform attributeName="transform" type="rotate" dur="2.5" <br /> from="360,280,175" to="0,280,175" repeatCount="indefinite"/&gt;<br />&lt;/ellipse&gt;<br /></code>
</pre>
      <p>
        This succeeds in drawing a blue ellipse and then rotating it 360 degrees counterclockwise every 2.5 seconds.
      </p>
      <p>
        We discussed the impact that one transform will have on the next in Chapter 2 (section 4: "Multiple transformations and more"). Likewise during animation, we may be interested in, for example, keeping an object in the same relative screen location while changing its scale and rotating it, hence in applying more than one &lt;animateTransform&gt; to a given object.
      </p>
      <pre>
<code class="code">&lt;ellipse cx="216" cy="242" rx="160" ry="219" fill="#964"&gt;<br /> &lt;animateTransform attributeName="transform" type="translate" dur="4s" <br /> values="0,0;-110,-140;0,0" repeatCount="indefinite"/&gt;<br /> &lt;animateTransform attributeName="transform" additive="sum" type="scale" <br /> dur="4s" values="1;1.5;1" repeatCount="indefinite"/&gt;<br /> &lt;animateTransform attributeName="transform" additive="sum" type="rotate" <br /> dur="7s" values="0,216 242;360 216 242" repeatCount="indefinite"/&gt;<br />&lt;/ellipse&gt;<br /></code>
</pre>
      <p>
        Just as we had to adjust for the effect that one transform had on the object when applying another with static images, we likewise must do so with moving images. The above example will both rotate and resize an ellipse, but preserve its center.
      </p>
      <p>
        In order to do this, we require that the attribute
      </p><code class="line">additive="sum"</code>
      <p>
        be set to prevent the previous animations from being ignored.
      </p>
      <h4 id="non-numeric_animation">
        Animation of non-numeric attributes
      </h4>
      <p>
        While SMIL provides for smooth transitions between attributes with numeric values, these are not the only sorts of attributes that can be animated. A couple of examples are provided to encourage the reader to think broadly about SMIL's utility.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="136" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Various non-numeric but useful animations.
            </td>
          </tr>
          <tr>
            <td>
              The xlink:href of an &lt;image&gt;. It creates an image "rollover" transitioning between 3 images, and showing each for 2 seconds apiece
            </td>
            <td>
              <pre>
<code>&lt;image x="25%" y="26%" xlink:href="p80.jpg" <br /> mask="url(#Ma)" width="30%" height="50%"&gt;<br />&lt;animate attributeName="xlink:href" dur="6s" <br /> values="p1.jpg;p12.jpg;p9.jpg" repeatCount="indefinite"/&gt;<br />&lt;/image&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td>
              The fill of a &lt;rect&gt;. Color values are interpolated smoothly.
            </td>
            <td>
              <pre>
<code>&lt;rect x="29%" y="65%" fill="cyan" filter="url(#twoE)" <br /> height="25%" width="20%"&gt;<br /> &lt;animate attributeName="fill" dur="15s" <br /> values="green;yellow;magenta;white;cyan " <br /> repeatCount="indefinite"/&gt;<br />&lt;/rect&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td>
              The flood-color of an &lt;feFlood&gt;. Color values are interpolated smoothly.
            </td>
            <td>
              <pre>
<code>&lt;animate attributeName="flood-color" dur="10s" <br /> values="cyan;yellow;green;magenta;white;purple" <br /> repeatCount="indefinite"/&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td>
              The mode of an &lt;feBlend&gt;. Useful for seeing how &lt;feBlend&gt; modes actually work..
            </td>
            <td>
              <pre>
<code>&lt;filter id="sample"&gt;<br /> &lt;feBlend mode="darken" in2="BackgroundImage" <br /> in="SourceGraphic"&gt;<br /> &lt;animate attributeName="mode" dur="5s" <br /> values="screen;multiply;lighten;darken;" <br /> repeatCount="indefinite"/&gt;<br /> &lt;/feBlend&gt;<br />&lt;/filter&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        If values of an attribute cannot be interpolated between, that is not a problem for SMIL. If intermediate values (as in the modes of an &lt;feBlend&gt; or the files associated with an &lt;image&gt; are the values chosen, then each value is simply kept for an appropriate fraction of the duration of the animation.
      </p>
      <p>
        On the other hand, since the values of colors associated with the "fill" attribute can be interpolated, the browser will actually do so (at least ASV+IE and Opera where these effects can be observed).
      </p>
      <p>
        SVG actually contains an &lt;animateColor&gt; tag, though it appears to offer little, if anything, that cannot be done with the animation of the fill, stroke, or flood-color attributes as in the above examples.
      </p>
      <h4 id="start_animation">
        Starting an animation, with time or events, and using &lt;set&gt; to set the value of an attribute
      </h4>
      <p>
        A given SVG page may combine textual information with interesting graphics. That is clearly part of the appeal of SVG and the web in general (else we'd still all be using gopher<sup><a class="footnoteanc" href="#footnote34sym" id="footnote34anc">34</a></sup> ). Suppose that we would like our visitors to be able to read our information for a few seconds before certain animations begin &mdash; perhaps we fear that our graphics might be so compelling that they might overwhelm the message. We could tell our marketing division that if they are really worried then they should tone down the graphics a bit, or we could simply delay their onset.
      </p>
      <p>
        Another scenario that makes more sense to this academic fellow is this: suppose I wish to have several objects following one another around a path &mdash; spaced out at equal intervals around the path. I that case, I can animate each but delay when it is that they begin. Each earlier one can be given a head start along the path. We may do that by specifying a begin attribute of, say begin="1.0s" to delay the onset of the animation of one of the things we wish to hold back.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              Two ellipses following the same path; one is halfway behind the other
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;path id="curve" stroke="black" fill="none" stroke-width="5"<br />d="M 110,150 C 300,80 400,300 450,100 500,-100 -90,220 110,150" /&gt;<br />&lt;ellipse rx="20" ry="12" fill="#aaa" stroke="#666" stroke-width="2" opacity=".8"&gt;<br /> &lt;animateMotion dur="2s" rotate="auto" repeatCount="indefinite" &gt;<br /> &lt;mpath xlink:href="#curve"/&gt;<br /> &lt;/animateMotion&gt;<br />&lt;/ellipse&gt;<br /><br />&lt;ellipse rx="20" ry="12" fill="#aaa" stroke="#666" stroke-width="2" opacity=".8"&gt;<br /> &lt;animateMotion dur="2s" begin="1" rotate="auto" repeatCount="indefinite" &gt;<br /> &lt;mpath xlink:href="#curve"/&gt;<br /> &lt;/animateMotion&gt;<br />&lt;/ellipse&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In the above, the two ellipses are identical except for the "begin='1'" assignment in the second. Since "1" = "1.0s" is half of dur="2s", the second animation will begin halfway through the other's traversal of the path.
      </p>
      <p>
        The only problem with this approach is that during that first second while it is waiting to start, the second ellipse is rendered, but at its origin (0,0) (since neither cx or cy is specified, their default values are each zero). That may be undesirable, or, at best, odd. How might we keep the image invisible while it is waiting to start?
      </p>
      <table style="left: 25%;" border="1" cellpadding="7" cellspacing="0" width="447">
        <col width="431" />
        <tbody>
          <tr>
            <th>
              Before the second animation gets started.<br />
              (Note the ellipse waiting in the corner.)
            </th>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m3c4c1b7b.png" alt="newborn ellipse waiting to be animated" id="graphics122" height="191" width="432" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Well, like many things in SVG, there is more than one way, and each is instructive in its own way.
      </p>
      <p>
        First, we might proceed as follows: instead of positioning the ellipse-in-waiting at (0,0) why don't we just place it on the curve? We know, for example, that the point (450,100) lies on the curve (it is the last of a cubic triplet in the d attribute) and it would seem to be about halfway along the curve. So, let's try the following:
      </p><code class="line">&lt;ellipse id="secondEllipse" cx="450" cy="100" ... &gt;</code>
      <p>
        There are three problems with this. The first, possibly minor issue, is that the second ellipse will appear in its initial and unrotated orientation. It will not be pointing in the same direction as the curve. The second is that the point (450,100) is probably not the exact midpoint of the curve. This is perhaps not a major issue either. The biggest problem, though, is that the positioning of the thing will be done relative not just to the curve but to its own offset relative to (0,0). Ultimately the underlying transformations (rotation, scale, and translation) will be amplified by its now large distance from the origin (and hence the curve itself). The second ellipse will not in fact follow the curve but some strangely distorted and amplified shadow of it (most of which exists off-screen in this case).
      </p>
      <p>
        Alternatively, we could animate the opacity of the second ellipse, having it wait until after it has moved from its initial position (0,0) onto the curve, thereupon to become visible.
      </p>
      <pre>
<code class="code">&lt;ellipse cx="0" cy="0" rx="20" ry="12" fill="#aaa" <br /> stroke="#666" stroke-width="2" opacity="0"&gt;<br /> &lt;animate attributeName="opacity" values="0;.8" dur="1" begin="1" <br /> fill="freeze"/&gt;<br /> &lt;animateMotion dur="2s" begin="1" rotate="auto" <br /> repeatCount="indefinite" &gt;<br /> &lt;mpath xlink:href="#curve"/&gt;<br /> &lt;/animateMotion&gt;<br />&lt;/ellipse&gt;<br /></code>
</pre>
      <p>
        We had to remember to set the initial value of its opacity to zero, since the onset of the animation is delayed by a second, meaning that its initial value of zero under the animation will not be encountered until the animation stops. We also have to set fill="freeze" so that the opacity retains its final value and does not reset to the initial value.
      </p>
      <p>
        The above succeeds in bringing the second ellipse onto the curve at 1.0 seconds, but at zero opacity. It then begins moving and gradually fading into view over the next second. This works just fine and is a somewhat pleasant effect.
      </p>
      <p>
        This approach with fading an object in by adjusting its opacity is, however, a bit fancier than we may have intended for this relatively simple problem. The goal was to prevent the object from becoming visible until its animation started.
      </p>
      <p>
        It turns out there is a simpler way to control such a thing in SVG &mdash; the &lt;set&gt;. In the above example, instead of the &lt;animate attributeName="opacity" ...&gt; tag, use this:
      </p><code class="line">&lt;set attributeName="opacity" to=".8" begin="1" /&gt;</code>
      <p>
        It keeps the second ellipse invisible until one second after the animations begin (which is just at the time it is introduced onto the path).
      </p>
      <p>
        A more modular solution which lets the onset of the &lt;set&gt; coincide directly with the beginning of the &lt;animateMotion&gt; (rather than having both rely on the same unit of measured time: 1.0s) is given by the following:
      </p>
      <pre>
<code class="code">&lt;ellipse cx="0" cy="0" rx="20" ry="12" fill="#aaa" <br /> stroke="#666" stroke-width="2" opacity="0"&gt;<br /> &lt;set attributeName="opacity" to=".8" begin="M.begin" /&gt;<br /> &lt;animateMotion id="M" dur="2s" begin="1" rotate="auto" <br /> repeatCount="indefinite" &gt;<br /> &lt;mpath xlink:href="#curve"/&gt;<br /> &lt;/animateMotion&gt;<br />&lt;/ellipse&gt;<br /></code>
</pre>
      <p>
        We give the &lt;animateMotion&gt; an id ("M") and then let the "begin" of the &lt;set&gt; be triggered by the "begin" of "M." My wife would call this a "puckish solution."
      </p><code class="line">begin="M.begin"</code>
      <p>
        The above is an example of an animation (in this case a set &mdash; a sort of a degenerate case of an animation) being triggered by an event. We'll discuss this in just a bit more detail now, since it is popular and natural to use a mouse-click to start an animation.
      </p>
      <dl>
        <dd>
          <table border="1" cellpadding="7" cellspacing="0" width="505">
            <col width="139" />
            <col width="144" />
            <col width="178" />
            <tbody>
              <tr>
                <td colspan="3" class="caption">
                  Animation triggered by mouse-click
                </td>
              </tr>
              <tr>
                <td>
                  <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/8eb98fa.png" alt="stage 1: large font" id="graphics123" height="50" width="100" />
                </td>
                <td>
                  <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/7f7edf57.png" alt="stage 2: small font" id="graphics124" height="50" width="97" />
                </td>
                <td>
                  <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m60f3ac90.png" alt="stage 3: large font" id="graphics125" height="50" width="100" />
                </td>
              </tr>
              <tr>
                <th>
                  Before begin
                </th>
                <th>
                  At begin
                </th>
                <th>
                  After dur="6s"
                </th>
              </tr>
              <tr>
                <td colspan="3" valign="top">
                  <pre>
<code>&lt;text x="35%" y="35%" font-size="30" fill="red"&gt;<br /> &lt;animate attributeName="font-size" begin="click" <br /> values="8;50;8" dur="6" repeatCount="indefinite"/&gt;<br />Click&lt;/text&gt;<br /></code>
</pre>
                </td>
              </tr>
            </tbody>
          </table>
        </dd>
      </dl>
      <p>
        When we click on the text object (the parent of the &lt;animate&gt; and hence, the target of the click), the animation begins, looping from a size 8 font to a size 50 font every 6 seconds.
      </p>
      <p>
        What is noteworthy about this (and may seem different from what the JavaScript programmer may be familiar with) is that the event handler is assigned to the object receiving the click by some other object, in this case the &lt;animate&gt;. This is interesting since we may have multiple objects whose animations are all triggered by a click on the &lt;text&gt; though their identities are more or less unknown to the developer who looks only at the source code associated with the &lt;text&gt; itself.
      </p>
      <p>
        Let's extrapolate a bit and make the example above have a bit more behavior. It is common in the world of the web and in user-interface practice in general, to have things which act like buttons (by triggering events) also <em>feel</em> like buttons. That is, in the real world, a button tends to have a bit of give to it: brushing your hand against the toaster accidentally does not turn it on (either the toaster or the hand). We often make our virtual buttons responsive, in somewhat the same way, to let the user know that it is a button, and hence, that it may do something when clicked. A common trick for this is to give it a rollover effect. This can be achieved quite easily in SVG.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="505">
        <col width="139" />
        <col width="144" />
        <col width="178" />
        <tbody>
          <tr>
            <td colspan="3" class="caption">
              Button with rollover effect
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/8eb98fa.png" alt="resting state: text is grey" id="graphics126" height="50" width="100" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m4c8f8a81.png" alt="on mouseover: text is black" id="graphics127" height="50" width="100" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/8eb98fa.png" alt="on mouseout: text is grey" id="graphics128" height="50" width="100" />
            </td>
          </tr>
          <tr>
            <th>
              Before begin
            </th>
            <th>
              When mouse enters
            </th>
            <th>
              When mouse exits
            </th>
          </tr>
          <tr>
            <td colspan="3" valign="top">
              <pre>
<code>&lt;text x="35%" y="35%" font-size="30" fill="grey"&gt;<br /> &lt;animate attributeName="font-size" begin="click" <br /> values="8;50;8" dur="6" repeatCount="indefinite"/&gt;<br /> &lt;set attributeName="fill" to="black" begin="mouseover" /&gt;<br /> &lt;set attributeName="fill" to="grey" begin="mouseout" /&gt;<br />Click&lt;/text&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The above text will still expand and shrink as before but we note that we have also affiliated with the text the ability to respond to two new events: the event of when the mouse moves over it and then another when the mouse departs.
      </p>
      <p>
        As we saw in an earlier example in this section (where we transitioned the opacity of ellipses to follow a curve), objects need not be triggered by events on nearby objects (in the sense of proximity in the document). We saw how
      </p><code class="line">&lt;set attributeName="opacity" to=".8" begin="M.begin" /&gt;</code>
      <p>
        relied on an event associated with an object named M. We can also delay the onset of the second to follow the onset of the first by one second:
      </p><code class="line">begin="M.begin+1"</code>
      <p>
        Suddenly SMIL's timing starts to take on a richer character altogether! Likewise we may start an animation of object A with a mouse-click on object B.
      </p><code class="line">begin="B.click"</code>
      <p>
        And we might also use something of the following type:
      </p><code class="line">begin="0s;B.click"</code>
      <p>
        This means begin (the &lt;animation&gt; or &lt;set&gt;) either at zero seconds (when the page loads) or when a button is clicked. Using either of two ways to start an animation doesn't make sense, though, until we first can figure out how to stop an animation.
      </p>
      <h4 id="stopping_animation">
        Stopping an animation
      </h4>
      <p>
        There are several fairly straightforward ways to stop an animation<sup><a class="footnoteanc" href="#footnote35sym" id="footnote35anc">35</a></sup>. 
      </p>
      <p>
        We might:
      </p>
      <ol>
        <li>Let it stop of its own accord, on the completion of its duration or its repeatCount;
        </li>
        <li>Put a statement of the form end="S.click" in the &lt;animate&gt; tag and then build a "stop button" whose id="S". Clearly end="S.mouseover" end="otherAnim.begin" etc. would all do the trick as well;
        </li>
        <li>Intervene with it through JavaScript (by removing the &lt;animate&gt; from the DOM, by modifying the time of its <em>end</em> attribute, or by issuing an animateId.endElement() statement);
        </li>
        <li>Use a JavaScript statement, pauseAnimations( ) to halt all SMIL animations in the entire SVG document.
        </li>
      </ol>
      <p>
        For now, approaches 1 and 2 are relevant to SMIL, while the others await our discussion of scripting.
      </p>
      <p>
        While approaches 1 and 2 above, should follow fairly directly from the above section (on starting an animation), an interesting problem emerges if we try to create an on/off button which both starts and stops a given animation. The problem and its solution are just instructive enough, that it may prove useful to examine it in some detail.
      </p>
      <p>
        To have a single button on a page which both starts and stops an animation seems like a natural thing. To have two buttons, one that starts something and another that stops it is fairly straightforward:
      </p>
      <p>
        First we build a couple of buttons. We'll put text ("go" or "stop") on top of rectangles and put the text and its rectangle in a group with an id (so that clicks on either the text or the rectangle behind it are responded to by the group):
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="572">
        <col width="556" />
        <tbody>
          <tr>
            <td class="caption">
              A start and a stop button
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/6415b25e.png" alt="green button marked 'go' and red one marked 'stop'" id="graphics129" height="50" width="193" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;g id="stop" fill="#f88"&gt;<br /> &lt;rect id="button" x="250" y="200" height="30" width="75" fill="inherit"/&gt;<br /> &lt;text x="260" y="220" font-size="20" fill="red"&gt;STOP<br />&lt;/g&gt;<br />&lt;g id="go" transform="translate(-100,0)" fill="#8f8" &gt;<br /> &lt;use xlink:href="#button"/&gt;<br /> &lt;text x="270" y="220" font-size="20" fill="green"&gt;GO<br />&lt;/g&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Clearly we could make much fancier looking buttons, but here we're interested more in making the code legible than in making the buttons fancy.
      </p>
      <p>
        Now, we want to make an animation which responds appropriately to clicks on the other button.
      </p>
      <p>
        Let's make an animation which stops when "stop" is clicked.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              An animation (an ellipse following a curve) that stops when the "stop" button is clicked
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/43cdd689.png" alt="stop and go buttons and ellipse on curve" id="graphics130" height="175" width="346" />
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;ellipse rx="20" ry="12" fill="#aaa" stroke="#666" stroke-width="2" opacity=".8"&gt;<br /> &lt;animateMotion id="One" dur="2s" end="stop.click" fill="freeze" <br />  rotate="auto" repeatCount="indefinite" &gt;<br />  &lt;mpath xlink:href="#curve"/&gt;<br /> &lt;/animateMotion&gt;<br />&lt;/ellipse&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The reason we include
      </p><code class="line">fill="freeze"</code>
      <p>
        above is that without it, the ellipse would revert to its initial position at cx=0; cy=0. This keeps it at its last position when the animation stops.
      </p>
      <p>
        This works just fine. Now how do we get the "go" button to work as well? It would seem natural to use
      </p><code class="line">begin="go.click"</code>
      <p>
        inserted into the &lt;animateMotion&gt; tag. The problem is that then the animation <em>never starts</em>, until we push the "go" button. We wanted the animation to start when the page loads <em>or</em> when the go button is clicked. A solution:
      </p><code class="line">begin="0s;go.click"</code>
      <p>
        This means start the animation either at zero seconds (i.e., when the page loads), <em>or</em> when the "go" button is clicked. This does the trick.
      </p>
      <p>
        As long as we're concentrating on what is becoming a rather lengthy piece of code, let's work a bit further in this direction. Let's get two ovals following one another around the curve, and have them both start and stop when the buttons are clicked. But let us still have the second one start a second later than the first. Here's how to get the second animation to start a second after the first.
      </p>
      <pre>
<code class="code">&lt;ellipse cx="0" cy="0" rx="20" ry="12" fill="#aaa" stroke="#666" stroke-<br />width="2" opacity="0"&gt;<br /> &lt;set attributeName="opacity" to=".8" begin="One.begin+1" /&gt;<br />  &lt;animateMotion dur="2s" begin="One.begin+1" id="M" <br />end="stop.click" fill="freeze" rotate="auto" <br />repeatCount="indefinite" &gt;<br /> &lt;mpath xlink:href="#curve"/&gt;<br /> &lt;/animateMotion&gt;<br />&lt;/ellipse&gt;<br /></code>
</pre>
      <p>
        Just like the first, animation, we stop this one based on a click on "stop." But instead of trying to have the animation begin at 1s (which indeed delays its beginning to one second after the loading of the page) we set its onset to
      </p><code class="line">begin="One.begin+1"</code>
      <p>
        The onset is, hence, relative to the beginning of the first animation, but delayed one second. That way, whether the first animation begins through loading of the page, or through a mouse click, the second animation follows a second behind.
      </p>
      <p>
        But how might we make it so that one button does both starting and stopping. It is quite easy in JavaScript, but that topic awaits a later chapter. How to use SMIL to do this is the question.
      </p>
      <p>
        The first way we'll consider is to actually put two buttons in the same location (mimicking one button) and letting a click on either hide itself and reveal the other.
      </p>
      <pre>
<code class="code">&lt;text id="start" x="35%" y="35%" font-size="30" fill="Green"&gt;<br /> &lt;set attributeName="display" to="none" begin="start.click" /&gt;<br /> &lt;set attributeName="display" to="inline" begin="stop.click " /&gt;<br />Start<br />&lt;/text&gt;<br />&lt;text id="stop" x="35%" y="35%" font-size="30" fill="red" display="none"&gt;<br /> &lt;set attributeName="display" to="inline" begin="start.click " /&gt;<br /> &lt;set attributeName="display" to="none" begin="stop.click" /&gt;<br />Stop<br />&lt;/text&gt;<br /></code>
</pre>
      <p>
        Then it is simply a matter of affiliating the cessation of the animation with the stop button (when it is visible) and the animation's begin with the start button.
      </p><code class="line">&lt;animateMotion dur="3s" begin="start.click" end="stop.click" ... " &gt;</code>
      <p>
        Clearly, the key here is to make it look as though the state of the button is changing, when in fact the entire button is being replaced by another.
      </p>
      <p>
        To actually have one button that serves as both a start and stop button, here is a solution that does the trick (though the activity is triggered by mousedown and mouseup events rather than successive clicks):
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="282" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              One ring to bind them
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m5f640f41.png" alt="green 'go' button before start" id="graphics131" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/766c2567.png" alt="red 'stop' button after start" id="graphics132" />
            </td>
          </tr>
          <tr>
            <th>
              Before button is pushed
            </th>
            <th>
              While button is depressed.
            </th>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <pre>
<code>&lt;ellipse rx="20" ry="12" fill="#aaa" stroke="#666" stroke-width="2" opacity="0"&gt;<br /> &lt;set attributeName="opacity" to=".8" begin="One.begin" /&gt;<br /> &lt;animateMotion id="One" dur="2s" end="Bset.end" fill="freeze" begin="Bset.begin"<br />  rotate="auto" repeatCount="indefinite" &gt;<br />  &lt;mpath xlink:href="#curve"/&gt;<br /> &lt;/animateMotion&gt;<br />&lt;/ellipse&gt;<br />&lt;g id="B"&gt;<br /> &lt;rect x="250" y="200" height="30" width="75" fill="#8f8"&gt;<br />  &lt;set attributeName="fill" to="#f88" begin="B.mousedown" end="B.mouseup"/&gt;<br /> &lt;/rect&gt;<br /> &lt;text x="260" y="220" font-size="20" &gt;<br /> &lt;tref id="label" fill="green" xlink:href="#go"&gt;<br /> &lt;set attributeName="fill" to="red" begin="B.mousedown" end="B.mouseup"/&gt;<br />  &lt;set id="Bset" attributeName="xlink:href" to="#stop" begin="B.mousedown" <br /> end="B.mouseup"/&gt;<br /> &lt;/tref&gt;<br /> &lt;/text&gt;<br />&lt;/g&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td colspan="2" class="example" valign="top">
              This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/SMIL7h.svg">http://srufaculty.sru.edu/david.dailey/svg/newstuff/SMIL7h.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The mouse events change not only the fill attributes of the &lt;text&gt; and the &lt;rect&gt;, begin and stop the animation of the &lt;ellipse&gt; but also change the text displayed on the button. This last result is accomplished through the use of a &lt;tref&gt;, a child of a &lt;text&gt; node that allows the text itself to be animated.
      </p>
      <p>
        In the following chapter (under <a href="#SMIL_javascript">SMIL to JavaScript event passing</a>), we will find that SMIL events can be used to trigger JavaScript functions, extending its capabilities even further.
      </p>
      <p>
        In conclusion, SMIL is a very compact and efficient way of directing complex events with minimal script. It is accessible to script, and hence, compatible with it. It is a type of choreography that seems to be commanding the attention of influential people. It is quite likely that we will see more of it and allied technologies popping up here and there in web development during the foreseeable future.
      </p>
      <h2 id="JavaScript">
        Chapter V - Dynamic SVG and JavaScript
      </h2><a name="why_script" id="why_script"></a>
      <p>
        <strong>Why scripting?</strong>
      </p>
      <p>
        Some of the readers of this book may have programmed extensively in many languages. Others may never have written serious programs. Others still may have dabbled, through a perhaps inspired process of trial and error, with minor modifications to a JavaScript program that they found attached to an HTML document developed by someone else. Still others may be unaware of the difference between a programming language and a markup language.
      </p>
      <p>
        To those who know programming beyond a cursory introduction, the scope of what programming might add to SVG is immediately obvious. To the others, it is recommended that you read carefully through Appendix II in which JavaScript is introduced in a rather abbreviated way, focusing on those aspects most likely to help with one's SVG development.
      </p>
      <p>
        Regardless of the reader's vantage point, an explanation of "why scripting?" is probably in order. Given how flexible SVG is, with its compound filters and its SMIL animation that enables message passing between objects, what can scripting do for us that we cannot do already?
      </p>
      <p>
        Traditionally, we distinguish between programming languages and simple sets of commands (like batch files) by virtue of three important constructs: the ability to define variables which store information for later use, conditional logic (if some condition is met, then perform some specific action, otherwise don't), and looping (keep doing something again and again until some condition is met). Once one has those three constructs in a language then one can do pretty much whatever can be specifically defined<sup><a class="footnoteanc" href="#footnote36sym" id="footnote36anc">36</a></sup>. Let's look at SVG in these terms.
      </p>
      <p>
        We can store information in objects (though it isn't clear how we might later use that information without programming):
      </p><code class="line">&lt;rect id="specialMessageForWhomsoeverKnowsHowToReadIt" x="100" ...&gt;</code>
      <p>
        We can also loop until some condition is met or let it begin conditionally (when, for example, a mouse clicks) using a SMIL animation.
      </p><code class="line">&lt;animate dur="2s" end="someAct.end" fill="freeze" begin="Button.click" repeatCount="indefinite" &gt;</code>
      <p>
        So, what is programming going to do for us that SVG with SMIL can't? The concept is probably a hard one to characterize completely. A course in Theory of Computing would probably give the reader a good idea, but absent that I will attempt to illustrate the concept with a few examples:
      </p>
      <p>
        Without programming in SVG we cannot
      </p>
      <ul>
        <li>Create a new object wherever the user clicks the mouse;
        </li>
        <li>Build objects with random values for their attributes;
        </li>
        <li>Allow objects to have their attributes modified (nontrivially) by users;
        </li>
        <li>Allow moving objects to have their directions or velocities adjusted (nontrivially) by the user;
        </li>
        <li>Detect the distance between moving objects on the screen ;
        </li>
        <li>Build a 3D rendering of a cylinder tumbling about in space;
        </li>
        <li>Build something which acts like a &lt;select&gt; object in HTML;
        </li>
        <li>Simulate the movement of armies of grasshoppers over an infinite meringue pie.
        </li>
      </ul>
      <p>
        From my experience as a college teacher, I have discovered that not all people would share all of the above as personal interests. However, one can take some comfort, perhaps, in realizing that, if one wanted to, one could do any of the above with the right program. I would venture to suggest that not all of these programs, though, have yet been written. You might have to do it yourself.
      </p>
      <p>
        Another note that I should mention in this context: there have been a variety of good "libraries" developed to help with the deployment of scripting in the context of SVG. Several have large and useful open-source components. I would love it if one of the readers would volunteer a chapter on this topic, as I haven't frankly followed these developments at all closely. The Dojo Toolkit (see http://www.dojotoolkit.org/) and Gemi (http://www.dotuscomus.com/svg/) are two of those that I know enough about to recommend exploring further.
      </p>
      <h4 id="Getting_started">
        Getting started
      </h4>
      <p>
        Let us start rather modestly, with figuring out how to activate simple scripts based on actions done by our users<sup><a class="footnoteanc" href="#footnote37sym" id="footnote37anc">37</a></sup> or <em>visitors</em>. I'll try to follow the goal of keeping examples simple, brief and crisp, in hopes that the material will make sense to programmers and non-programmers alike. But toward the end of this chapter and to some extent in the next chapter (on SVG and HTML), a few longer examples will be included. This is, in part, since the nature of this <em>book</em> has changed from its original conception as a print document to a web-based version. Longer examples can be comprehended more fully by interacting with them on the web, and at least one of the book's reviewers recommended that a few more complex examples be included. The authorial intent, though of keeping the examples brief and self-contained, is nonetheless, reiterated. If you are one of those readers who is a non-programmer, then please be comforted to know that a sincere attempt has been made to keep things simple when possible!
      </p>
      <p>
        Let's see if we can do a very simple thing: activate an "alert box"<sup><a class="footnoteanc" href="#footnote38sym" id="footnote38anc">38</a></sup> as soon as our SVG page loads. If we are familiar with launching scripts from HTML we might be tempted to try something like the following:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="582">
        <col width="281" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              A first (but partially unsuccessful) attempt to launch a JavaScript function when a page loads
            </td>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <pre>
<code>&lt;svg onload="alert('message')"&gt;<br />&lt;ellipse cx="75" cy="75" rx="40" ry="30" fill="blue"/&gt;<br />&lt;/svg&gt;</code>
</pre>
            </td>
          </tr>
          <tr>
            <th>
              When the page loads in Opera 9.0
            </th>
            <th>
              When the page loads in ASV3.03+IE
            </th>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m496295a8.jpg" alt="picture of page in Opera with alert box" id="graphics133" height="156" width="261" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/285d4a1a.jpg" alt="picture of page in ASV+IE with alert box" id="graphics134" height="156" width="252" />
            </td>
          </tr>
          <tr>
            <th colspan="2" valign="top">
              When the page loads in <em>Firefox1.5</em>
            </th>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m6da4c8c3.jpg" alt="picture of page in Firefox with source code only" id="graphics135" height="191" width="566" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        When we do this, we'll discover that when the page is viewed in either Opera 9.0 or ASV+Internet Explorer, then an "alert()" actually appears as desired. But, it is worth noting, ASV+IE does not render the image until after the alert is dispatched while Opera 9.0 does. And to our dismay, Firefox, or for that matter, Opera 9.6, Safari 3.2.2 and Chrome 1.0, don't render the page at all, instead revealing an error message.
      </p>
      <p>
        It turns out that this is not these other browsers' fault. Their behavior is consistent with the W3C standards on being "namespace aware." In Chapter 2 we discovered that the &lt;svg&gt; tag needed a bit more to be <em>proper</em>. Specifically, W3C recommends (and most browsers require) that for an SVG document to be properly formed the &lt;svg&gt; tag must contain a namespace declaration.
      </p><code class="line">&lt;svg xmlns="http://www.w3.org/2000/svg" onload="alert('message')"&gt;</code>
      <p>
        would suffice for this purpose since, Firefox reading the document as XML now knows what XML namespace to use to interpret the file. But so long as we're at it we might as well add an additional namespace declarations:
      </p>
      <pre>
<code class="line">&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;</code>
</pre>
      <p>
        This allows us to use xlink (as in <code>&lt;use xlink:href="OBJ" /&gt;</code>) if we like. Most authors recommend that both namespace declarations be used in all SVG documents if for no other reason than to avoid potential problems later on. There are times at which we might like to add in additional xml namespaces, particularly in dealing with compound documents which intermingle different XML languages. We might for example wish to add such things as
      </p>
      <pre>
<code class="line"><br />xmlns:ev="http://www.w3.org/2001/xml-events"<br />or<br />xmlns:math="http://www.w3.org/1998/Math/MathML"<br />or even<br />xmlns:html="http://www.w3.org/TR/xhtml1/strict"</code>
</pre>
      <p>
        So, throughout this treatment, we will assume that our opening &lt;svg&gt; tag looks like this:
      </p>
      <pre>
<code class="code">&lt;svg xmlns="http://www.w3.org/2000/svg"<br /> xmlns:xlink="http://www.w3.org/1999/xlink"&gt;</code>
</pre>
      <h4 id="interactivity">
        Simple interactivity
      </h4>
      <h5 id="simple_events">
        simple events
      </h5>
      <p>
        We have seen how to fire a simple JavaScript command ("alert()") from the event caused by the loading of an SVG Document.
      </p>
      <pre>
<code class="code"><br />&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"<br />onload="alert('message')"&gt;<br />&lt;ellipse cx="75" cy="75" rx="40" ry="30" fill="blue"/&gt;<br />&lt;/svg&gt;</code>
</pre>
      <p>
        Unfortunately, we also saw that ASV+Internet Explorer differs from the other browsers in its definition of "onload," since in the above code, ASV+IE fires the alert before the ellipse is drawn, while in FF and Opera the ellipse is visible while the alert box is displayed. In ASV+Internet Explorer, and at times in the other browsers, the load is viewed as having taken place before any actual rendering has taken place; other times it is assumed to take place afterwards. More on this topic will be seen later, but let us turn now to launching small programs from other kinds of events, like mouse clicks.
      </p>
      <p>
        In the following example, a SMIL animation is triggered by a mouse click, but in turn, the beginning or end of the animation triggers a JavaScript function:
      </p>
      <pre>
<code class="code"><br />&lt;ellipse cx="150" cy="75" rx="10" ry="40" fill="blue"&gt;<br />&lt;animate id="A" attributeName="rx" begin="click"<br />end="A.begin+4"<br />onbegin="alert('started')" onend="alert('stopped')"<br />dur="4s" values="10;110;10" repeatCount="indefinite"/&gt;<br />&lt;/ellipse&gt;</code>
</pre>
      <p>
        We might be tempted to use the beginning of a small SMIL animation (of infinitesimal duration) as an alternative to an onload statement, were it not for the fact that certain browsers (most notably Chrome and Firefox) have not yet implemented SMIL.
      </p>
      <p>
        At any rate, the above example shows that we are indeed able to launch a small JavaScript program based on a mouseclick.
      </p>
      <p>
        It is worth pointing out that "onactivate" is considered slightly more general than "onclick" since the former can refer to activation caused by viewers that do not have a mouse connected, but instead have other input devices.
      </p>
      <p>
        The simpler code:
      </p><code class="line">&lt;ellipse cx="150" cy="75" rx="10" ry="40" fill="blue" onactivate="alert('ellipse') /&gt;</code>
      <p>
        also results in launching of an "alert()" based on a mouseclick, without the intervening animation. The event <em>onactivate</em>, however, appears not to be widely deployed, yet, across browsers, so the reader is encouraged to test it in the contexts where it is expected to be used before deploying.
      </p>
      <p>
        Those readers familiar with JavaScript in the context of HTML are probably aware that it is common to put longer programs (than a simple "alert()") inside a &lt;script&gt; tag. That is where we turn our attention next.
      </p>
      <h5 id="CDATA">
        CDATA and &lt;script&gt;
      </h5>
      <p>
        We will typically place our programs (scripts) inside a &lt;script&gt; tag:
      </p><code class="line">&lt;script&gt;alert('hello')&lt;/script&gt;</code>
      <p>
        For this to work, in the general case, however, a CDATA section is needed to keep our scripts from being parsed as XML. Although the CDATA looks like a bit of an abomination, to the eye that is familiar with reading HTML, its ancestry can be traced back to a common progenitor: Standard Generalized Markup Language or SGML.
      </p>
      <p>
        In parsing an XML document, the beginnings of tags are signaled by the occurrence of the less than sign "&lt;". Programming languages, such as those in the C family (like JavaScript, Java, C++, and Perl) tend to use less-than signs frequently, either in conditional statements or as characters in strings. This, however, can wreak havoc with a naïve parser that attempts to read an XML document with scripting in it. Hence, we use a CDATA section to hide the &lt;script&gt; from the interpreter<sup><a class="footnoteanc" href="#footnote39sym" id="footnote39anc">39</a></sup>. We do this by placing
      </p><code class="line">&lt;![CDATA[</code>
      <p>
        after our script tag, but before any JavaScript statements, and placing the string
      </p><code class="line">]]&gt;</code>
      <p>
        after all JavaScript but before the &lt;/script&gt; tag. Following is a simple example:
      </p>
      <pre>
<code class="code">&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;<br />&lt;![CDATA[<br />function Here(){<br />alert("hello")<br />}<br />]]&gt;<br />&lt;/script&gt;<br />&lt;text id="Text" x="170" y="150" font-size="24"<br />fill="black"&gt;Click&lt;/text&gt;<br />&lt;rect id="Rect" onclick="Here()" x="155" y="125" height="30" width="80"<br />stroke="black" stroke-width="2" fill="green" opacity=".5"/&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
      <p>
        In the above example, a click on the rectangle results in activation of the function Here() and thence an alert() box is displayed.
      </p>
      <p>
        It so turns out that (at least in FF, ASV+IE and Opera), the use of CDATA in this particular example is not strictly required. That is, a shortened version of the &lt;script&gt;, without CDATA will work just fine in ASV+IE, FF and Opera.
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;script&gt;<br />function Here(){<br /> alert("hello")<br />}<br />&lt;/script&gt;
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        However, in the following example, browsers will not respond the way we might hope, since the less than sign in the code disrupts the XML parsing of the SVG.
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;script&gt;<br />function Here(){<br /> alert("&lt;html&gt;")<br />}<br />&lt;/script&gt;
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        ASV+Internet Explorer responds with an "unterminated string constant" message; Firefox explains that there is an "XML Parsing Error: mismatched tag. Expected: &lt;/html&gt;"; while Opera reveals a "mismatched end tag" affiliated with the &lt;HTML&gt; tag. Placing the CDATA section around the contents of the text, succeeds in hiding the JavaScript from the parser and does so successfully in all five browsers. The alert() properly displays the string "&lt;html&gt;".
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;script&gt;&lt;![CDATA[<br />function Here(){<br /> alert("&lt;html&gt;")<br />}<br />]]&gt;<br />&lt;/script&gt;<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Hereafter, we will simply assume that we <em>always</em> place a CDATA section around the material inside a &lt;script&gt; tag.
      </p>
      <h5 id="getElementById">
        getElementById, id, nodeName, and other properties of SVG nodes.
      </h5>
      <p>
        Having figured out how to run JavaScript programs, it now makes sense to see if we can use JavaScript to somehow change our SVG document. In particular, we might be interested in changing a document in ways beyond what SMIL allows. First, let's use JavaScript to find known objects within an SVG document and then answer questions about the properties of those objects<sup><a class="footnoteanc" href="#footnote40sym" id="footnote40anc">40</a></sup>. 
      </p>
      <p>
        If the reader is familiar with JavaScript in the HTML environment, she is probably aware that one often uses the object named <em>document</em> to refer to the entire HTML document, namely a container of the elements associated with a web page. Likewise in SVG, we may refer to <em>document</em> as the entity containing all the nodes of the SVG (including the root node itself).
      </p>
      <p>
        Therefore, the following page results in an alert displaying the string "R" in all five of the major browsers:
      </p>
      <pre>
<code class="code">&lt;svg xmlns="http://www.w3.org/2000/svg" <br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br /> function Here(){<br /> alert(document.getElementById("R").id)<br /> }<br />]]&gt;<br />&lt;/script&gt;<br />&lt;text x="170" y="150" font-size="24" fill="black"&gt;Click<br />&lt;rect id="R" onclick="Here()" x="155" y="125" height="30" width="80" <br />  stroke="black" stroke-width="2" fill="green" opacity=".5"/&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
      <p>
        What we have done in the above code is to first use <em>document</em> to find the entire SVG document, then, within that, we look for any element that has an id of "R" by using
      </p><code class="line">document.getElementById("R")</code>
      <p>
        We then display the id property of that node:
      </p><code class="line">document.getElementById("R").id</code>
      <p>
        which, not surprisingly, ends up being "R".
      </p>
      <p>
        Of all the properties associated with a node, we may note that most attributes cannot be referenced in this manner. For example, the expression
      </p><code class="line">document.getElementById("R").height</code>
      <p>
        is meaningless. Instead, we use
      </p><code class="line">document.getElementById("R").getAttribute("height")<sup><a class="footnoteanc" href="#footnote41sym" id="footnote41anc">41</a></sup> </code>
      <p>
        as the way to retrieve ordinary attributes associated with an SVG object. Specifically, the command
      </p><code class="line">alert(document.getElementById("R").getAttribute("height"))</code>
      <p>
        produces, as output, the string "30".
      </p>
      <p>
        An alternative approach is worth mentioning:
      </p><code class="line">document.getElementById("R").height.baseVal.value</code>
      <p>
        As discussed at <a href="http://www.w3.org/TR/SVG/svgdom.html">SVG Document Object Model</a>, the SVG DOM methods allow alternative ways, beyond what is typically available in generic XML for interrogating DOM. Given the nature of differences between the rendered page and mark-up, in part, due to animation, these methods are frequently recommended. As Erik Dahlstrom (a co-chair of the SVG Working Group of the W3C) has explained the difference:
      </p>
      <blockquote>
        <p>
          The difference is that getAttribute returns a DOMString, and height.baseVal.value returns a float. Now, the conversion between string and float may not be such an issue in most cases, but if you do it often then those extra float &lt;-&gt; string conversions can become costly.
        </p>
      </blockquote>
      <p>
        Before we look further into attributes of nodes, let us look a bit further into some of the other methods and properties associated directly with a node.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="410" />
        <tbody>
          <tr>
            <td colspan="2" class="caption" valign="top">
              Methods and properties associated with an SVG node
            </td>
          </tr>
          <tr>
            <th colspan="2" valign="top">
              The SVG Document
            </th>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <pre>
<code>
  &lt;svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
    &lt;script&gt;&lt;![CDATA[
        function Here(){
          return <span class="emphasize">Fill_in_the_Blank</span>;
        }
      ]]&gt;
    &lt;/script&gt;
    &lt;text x="170" y="150" font-size="24" fill="black"&gt;Click&lt;/text&gt;
    &lt;rect id="R" onclick="Here()" x="155" y="125" height="30" width="80" 
      stroke="black" stroke-width="2" fill="green" opacity=".5"/&gt;
  &lt;/svg&gt;
</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col class="fill_in" width="410" />
        <tbody>
          <tr>
            <th>
              <strong>Fill_in_the_Blank</strong>
            </th>
            <th>
              value
            </th>
          </tr>
          <tr>
            <td>
              document.getElementById("R").id
            </td>
            <td>
              R
            </td>
          </tr>
          <tr>
            <td>
              document.getElementById("R").nodeName
            </td>
            <td>
              rect
            </td>
          </tr>
          <tr>
            <td>
              document.getElementById("R").parentNode.nodeName
            </td>
            <td>
              svg
            </td>
          </tr>
          <tr>
            <td>
              document.nodeName
            </td>
            <td>
              #document
            </td>
          </tr>
          <tr>
            <td>
              document.getElementById("R").previousSibling.nodeName
            </td>
            <td>
              #text
            </td>
          </tr>
          <tr>
            <td>
              document.getElementById("R").attributes.length
            </td>
            <td>
              10
            </td>
          </tr>
          <tr>
            <td>
              document.getElementById("R").attributes.item(0).nodeNam e
            </td>
            <td>
              id
            </td>
          </tr>
          <tr>
            <td>
              document.getElementById("R").attributes.item(0).node Value
            </td>
            <td>
              R
            </td>
          </tr>
          <tr>
            <td>
              <p>
                document.getElementById("R").attributes.item( 1).nodeName
              </p>
            </td>
            <td>
              onclick
            </td>
          </tr>
          <tr>
            <td>
              <p>
                document.getElementById("R").attributes.item( 1).nodeValue
              </p>
            </td>
            <td>
              Here()
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Most of these are discussed later in this chapter. Most are included here just to illustrate how once we locate an SVG object (a node), we can not only find out about it, but we can also use it as a starting point for exploring the SVG hierarchy of nodes, both nearby and far away.
      </p>
      <p>
        For now, we should point out that
      </p><code class="line">document.getElementById("R").nodeName</code>
      <p>
        (which in this case is "rect" since that's what "R" is) provides a useful way of confirming that a node we have found indeed is a node of the variety or type that we suspect it is. This can prove to be an important capability as documents get large and as nodes and node naming become complex.
      </p>
      <h5 id="getAttribute">
        getAttribute and getAttributeNS
      </h5>
      <p>
        Once we have found a node by its "id" as in the above examples, we may also interrogate any particular attribute of that node using the "getAttribute" method associated with SVG nodes. This can be useful if we have objects whose attributes change over time, since we may not have independently stored that information in a data structure (though for various reasons, it is often better to, as discussed subsequently.) Also if we inherit SVG objects as parts of other documents, then we may have need to parse those documents, in which case getAttribute() may prove most handy.
      </p>
      <p>
        All five major browsers, as of this writing, are each successful in interpreting, without problem, the DOM1 command:
      </p><code class="line">node.getAttribute(attributeName)</code>
      <p>
        However, the reader should be aware that as web documents start to, in coming years, to contain potentially multiple XML markup languages, the notation:
      </p><code class="line">node.getAttributeNS(null, attributeName)</code>
      <p>
        may become necessary. It works currently in most browsers, so in fact, it is generally recommended that we use this bulkier format. Some have suggested the standards could specify that in an SVG document, for example, namespace declarations could default to contextually appropriate settings, but this suggestion seems not to have met with widespread support in the standards community. (As of Spring 2009, discussions within the HTML5 working group of the W3C, have been discussing possibilities of making the SVG grammar, possibly a bit less formal.)
      </p>
      <p>
        For example, if we have a rectangle defined by
      </p>
      <pre>
<code class="code">&lt;rect id="R" onclick="Here()" x="155" y="125"<br />height="30" width="80"<br />stroke="black" stroke-width="2" fill="green"<br />opacity=".5"/&gt;</code>
</pre>
      <p>
        then document.getElementById("R").getAttributeNS(null, "fill") would return the value "green."
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="460" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Attributes of an SVG node
            </td>
          </tr>
          <tr>
            <th colspan="2" valign="top">
              The SVG Document
            </th>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg" <br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />function Here(){<br />  R=document.getElementById("R")<br /> T=document.getElementById("T")<br /> return <span class="emphasize">Fill_in_the_Blank</span><br />}<br />]]&gt;<br />&lt;/script&gt;<br />&lt;text id="T" x="170" y="150" font-size="24" fill="black"&gt;Click&lt;/text&gt;<br />&lt;rect id="R" onclick="Here()" x="155" y="125" height="30" width="80" stroke="black" stroke-width="2" fill="green" opacity=".5"/&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col class="fill_in" width="460" />
        <tbody>
          <tr>
            <th>
              Fill_in_the_Blank
            </th>
            <th>
              value
            </th>
          </tr>
          <tr>
            <td>
              T.nodeName
            </td>
            <td>
              text
            </td>
          </tr>
          <tr>
            <td>
              T.getAttributeNS(null,'x')
            </td>
            <td>
              40
            </td>
          </tr>
          <tr>
            <td>
              T.getAttributeNS(null,'font-size')
            </td>
            <td>
              24
            </td>
          </tr>
          <tr>
            <td>
              R.nodeName
            </td>
            <td>
              rect
            </td>
          </tr>
          <tr>
            <td>
              R.getAttributeNS(null,'x')
            </td>
            <td>
              25
            </td>
          </tr>
          <tr>
            <td>
              R.getAttributeNS(null,'height')
            </td>
            <td>
              30
            </td>
          </tr>
          <tr>
            <td>
              R.getAttributeNS(null,'fill')
            </td>
            <td>
              green
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In short, O.getAttributeNS() is used to find the value of any particular named attribute associated with the object O. If one is interested in exploring all attributes of a node, in circumstances that we may not know what to expect <em>a priori</em>, see the section on "XML and the SVG DOM" later in this chapter. O.getAttributeNS (as well as O.getAttribute) assumes that we already know what attribute(s) we are looking for.
      </p>
      <h5 id="setAttribute">
        setAttribute and setAttributeNS
      </h5>
      <p>
        In order to make SVG documents dynamic, we must provide some ways for the documents to change in response to events (either user-generated events like mouse clicks, browser events like images finishing the download process or AJAX-like HTTP events, or time-based events, like the passage of 20 seconds). Some of these events can be captured using SMIL and many attributes of objects (including whether or not they are visible) can be manipulated with SMIL. But certain kinds of activities, conditions, and calculations require a full-fledged programming environment under the hood, and hence, JavaScript has the ability to change attributes of any object drawn in the SVG canvas.
      </p>
      <p>
        If O is a variable referring to an SVG object (and to ensure that this method will be XML namespace compliant) we will typically use
      </p><code class="line">O.setAttributeNS(null, attributename, value)</code>
      <p>
        to accomplish the same thing that, although deprecated<sup><a class="footnoteanc" href="#footnote42sym" id="footnote42anc">42</a></sup> , <code>O.setAttribute(attribute, value)</code> also accomplishes in all three browsers.
      </p>
      <p>
        We may use setAttribute to reset any attribute (that is an attributeName=attributeValue pair) appearing within an SVG tag. Consider the following examples:
      </p>
      <h6>
        a. Resetting the "fill" of an &lt;ellipse&gt;.
      </h6>
      <p>
        In the following example, clicking on an ellipse changes its color from grey to black.
      </p>
      <table>
		<caption>Resetting the "fill" of an &lt;ellipse&gt;</caption>
          <tr>
            <td colspan="2">
              <pre>
&lt;svg xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
&gt;
&lt;script&gt;&lt;![CDATA[
  function changeFill(){
    C=document.getElementById("C")
    C.setAttributeNS(null,"fill","black")
}
]]&gt;&lt;/script&gt;

&lt;circle id="C" cx="80" cy="100" r="22" 
  fill="grey" onclick="changeFill()"/&gt;
&lt;/svg&gt;</code></pre></td>
          </tr>
          <tr>
            <th>
              After page loads
            </th>
            <th>
              After ellipse is clicked
            </th>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m24db491a.png" alt="grey circle" id="graphics136" height="100" width="100" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/a07aa1.png" alt="black circle" id="graphics137" height="100" width="100" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>The ellipse, having id="C" has an "onclick" event handler. Clicking the ellipse activates the function changeFill(). First that function finds the ellipse by referencing its id, then it modifies its "fill" attribute to the new value "black."</p>
      <h6>b. Resetting the position ("cx" and "cy") of an &lt;ellipse&gt;:</h6>
      <p>In the example below, the entire &lt;svg&gt; tag is made to call a function whenever the mouse moves. The function then repositions one of the two ellipses by resetting its "cx" and "cy" attributes.</p>
      <table>
        <caption>Moving an ellipse by resetting its center point</caption>
            <tr><td colspan="2"><pre><code>
&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
  width="100%" height="100%" onload="startup()"
  onmousemove="moveIt(evt)"&gt;
&lt;script&gt;&lt;![CDATA[
  function startup(){C=document.getElementById("C")}

  function moveIt(evt){
    C.setAttributeNS(null,"cx",evt.clientX)
    C.setAttributeNS(null,"cy",evt.clientY)
  }
]]&gt;&lt;/script&gt;

&lt;circle cx="60" cy="60" r="40" fill="white"
  stroke="black" stroke-width="3"/&gt;
&lt;circle id="C" cx="60" cy="60" r="22" fill="darkgrey"
  opacity="0.7" stroke="lightgrey" stroke-width="8"/&gt;
&lt;/svg&gt;</code></pre></td>
          </tr>
          <tr>
            <th>
              After page loads
            </th>
            <th>
              As mouse moves
            </th>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m2ca9bcff.png" alt="grey circle centered in black one" id="graphics138" height="100" width="100" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/73a9d545.png" alt="grey circle no longer centered in black one" id="graphics139" height="100" width="100" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        When the page loads, the function startup() is run, assigning the variable C to the grey ellipse. The &lt;svg&gt; element itself (also known as the <em>documentElement</em>) is armed to listen for mouse movement. Specifically, whenever the mouse moves, the function moveIt() is invoked. The moveIt() function receives as a parameter, the event itself (namely the mousemove event), including the coordinates of the mouse event. Those coordinates, clientX and clientY, are then used to set the appropriate attributes of the ellipse being "dragged".
      </p>
      <h6>
        c. Dragging and dropping by resetting the <em>onmousemove</em> of an entire &lt;svg&gt;:
      </h6>
      <p>
        In this example we use three functions:
      </p>
      <ol>
        <li>
          <code>startMove()</code> prepares the object to be moved;
        </li>
        <li>
          <code>moveIt()</code> actually relocates the ellipse;
        </li>
        <li>
          <code>drop()</code> releases the object.
        </li>
      </ol>
      <table border="1" cellpadding="7" cellspacing="0" width="517">
        <col width="501" />
        <tbody>
          <tr>
            <td class="caption">
              Dragging and dropping an ellipse.
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br /> xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />function startMove(){<br /> C=document.getElementById("C")<br /> document.documentElement.setAttribute("onmousemove","moveIt(evt)")<br />}<br />function moveIt(evt){<br /> C.setAttributeNS(null,"cx",evt.clientX)<br /> C.setAttributeNS(null,"cy",evt.clientY)<br />}<br />function drop(){<br /> document.documentElement.setAttributeNS(null, "onmousemove",null)<br />}<br />]]&gt;&lt;/script&gt;<br />&lt;rect x="0" y="0" width="100%" height="100%" fill="white"/&gt;<br />&lt;circle id="C" cx="60" cy="60" r="22" <br /> fill="lightgrey" stroke="black" stroke-width="8" <br /> onmousedown="startMove()" onmouseup="drop()"/&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The ellipse (having id="C") has an <em>onmousedown</em> to initiate movement by activating startMove(). The <em>onmouseup</em> event calls drop() which terminates movement. The function startMove() arms the entire SVG document space (the <em>documentElement</em> or document.firstChild) to listen to mouse movement. It does this by assigning the <em>onmousemove</em> attribute to the function moveIt(evt) :
      </p><code class="line">document.documentElement.setAttribute("onmousemove","moveIt(evt)")</code>
      <p>
        moveIt() in turn, resets the center coordinates of the ellipse, <em>cx</em> and <em>cy</em>, based on the mouse coordinates of <em>evt</em>, the triggering event.
      </p>
      <p>
        Thus upon clicking the ellipse, the entire canvas will listen to mouse movement. The listening remains in effect until withdrawn by a mouseup event occurring on the ellipse.
      </p><code class="line">document.documentElement.setAttributeNS(null, "onmousemove",null)</code>
      <p>
        A few things should be noted here. First, we assign the <em>onmousemove</em> listener to the entire document space<sup><a class="footnoteanc" href="#footnote43sym" id="footnote43anc">43</a></sup>. We could assign it, instead, only to the ellipse and it would still drag and drop. The problem though would be that if the mouse movement would happen to, as it often will, get ahead of the screen updating, then the ellipse will no longer receive mouse events and will be dropped at its present location. By arming the entire space to listen to mouse movement, we avoid that possibility, even if the mouse gets ahead of the ellipse. Second, the document itself contains a white rectangle which spans the entire browser window. This is useful since it allows the mouse activity to be captured even when the mouse moves outside the space defined when the document loads. Without this, we might again, "lose" the ellipse if the mouse is moved too rapidly. Third, the withdrawal of the <em>onmousemove</em> listening is done by a <em>mouseup</em> on the ellipse. It might be better to have this listener withdrawn by a <em>mouseup</em> anywhere in the documentElement. The code would be a bit more complex to beginning eyes, and it is relatively unlikely that someone will release the mouse while it is still moving rapidly (the circumstance under which the mouse gets ahead of the thing it is dragging).
      </p>
      <h6>
        Resetting a color band of a gradient.
      </h6>
      <p>
        As one last example of the use of setAttribute to change things, following is an example in which clicking a button (a group with a &lt;rect&gt; and a &lt;text&gt;) modifies the stop-color of each of three &lt;stop&gt; tags in a &lt;linearGradient&gt;.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="481">
        <col width="225" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Resetting the stop-colors within the &lt;stop&gt; of a gradient.
            </td>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />function modify(){<br /> for (var i=0;i&lt;3;i++){<br />  S=document.getElementById("s"+i)<br /> S.setAttributeNS(null,"stop-color",color())<br />  }<br />}<br />function color(){<br /> r=Math.random()*4096<br /> return "#"+Math.floor(r).toString(16)<br />} <br />]]&gt;&lt;/script&gt;<br />&lt;linearGradient id="LG"&gt;<br /> &lt;stop id="s0" offset="0" stop-color="grey"/&gt;<br /> &lt;stop id="s1" offset=".5" stop-color="lightgrey"/&gt;<br /> &lt;stop id="s2" offset="1" stop-color="grey"/&gt;<br />&lt;/linearGradient&gt;<br />&lt;g id="MyGroup" onclick="modify()"&gt;<br /> &lt;rect x="30" y="40" width="230" height="30" <br /> fill="#ddd" stroke="black" /&gt;<br /> &lt;text id="T" x="50" y="63" font-size="18pt" <br /> fill="black"&gt;<br /> Random Gradient&lt;/text&gt;<br />&lt;/g&gt;<br /> &lt;rect x="30" y="70" width="230" height="70" <br /> fill="url(#LG)" stroke="black" /&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m146b2e29.png" alt="grey gradient" id="graphics140" height="102" width="232" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/562acd55.png" alt="gradient changing from green to blue to pale yellow" id="graphics141" height="102" width="232" />
            </td>
          </tr>
          <tr>
            <th>
              When the page loads
            </th>
            <th>
              After clicking on "Random Gradient"
            </th>
          </tr>
        </tbody>
      </table>
      <p>
        The loop inside the function modify() finds all three &lt;stop&gt; tags, and modifies their "stop-color" attribute, replacing the value with a color randomly constructed by the function color(). The color() function merely constructs a string of the form "#xxx" where the three values of "x" represent hexadecimal digits in the range 0 to F. This slightly more complex example is given to illustrate how broadly setAttributeNS() might be applied to our SVG content.
      </p>
      <h6 id="xlink">
        Changing xlink attributes
      </h6>
      <p>
        If we attempt to change the "xlink:href" attribute of an &lt;image&gt; tag, we may be a bit surprised. If "I" refers to an &lt;image&gt; tag then the expression
      </p><code class="line">I.setAttributeNS(null,"xlink:href","newone.jpg")</code>
      <p>
        does not work. However, the simpler syntax,
      </p><code class="line">I.setAttribute("xlink:href","newone.jpg")</code>
      <p>
        does not work in Opera or Firefox, though it does in ASV+IE.
      </p>
      <p>
        To make it work properly across browsers, we must declare the namespace associated with the xlink module of SVG, namely "http://www.w3.org/1999/xlink". That is, the statement <em>should</em> look like:
      </p><code class="line">I.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","newone.jpg")</code>
      <p>
        To handle this in the general case, we frequently will establish a global JavaScript variable such as
      </p><code class="line">var xlinkns = "http://www.w3.org/1999/xlink";</code>
      <p>
        at the beginning of our &lt;script&gt; tag to avoid the typing of this lengthy string.
      </p>
      <p>
        While on the topic, another approach should be mentioned: using the SVGURIReference interface. That allows us to access the xlink:href through SVG 1.1 DOM by imageElement.href.baseVal
      </p>
      <p>
        In summary:
      </p>
      <table class="example">
        <caption>Modifying the xlink:href of an &lt;image&gt; tag</caption>
        <tbody>
          <tr>
            <td>wrong</td>
            <td>I.setAttributeNS(null,"xlink:href","newone.jpg")</td>
          </tr>
          <tr><td>wrong
            </td>
            <td>
              I.setAttribute("xlink:href","newone.jpg")
            </td>
          </tr>
          <tr>
            <td>
              right
            </td>
            <td>
              <code>var xlinkns = "http://www.w3.org/1999/xlink";<br />I.setAttributeNS(xlinkns, "xlink:href","newone.jpg")</code>
            </td>
          </tr>
          <tr>
            <td>
              alternative
            </td>
            <td>
              <p>
                I.href.baseVal="newone.jpg"
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <h5 id="target">evt.target and evt.currentTarget</h5>
      <p>In the preceding examples, we used the event object (evt) to determine the current mouse coordinates. It may also be 
		used to determine the target of an event: for example, to find which object has been clicked upon.</p>
      <h6>evt.target</h6>
      <p>In the examples below, we contrast two methods of changing attributes of an object that has been activated. In the 
		first approach, we pass a string identifying the object to the functions. That identifier is then used to find the 
		object within the DOM (using getElementById) and thence to modify certain of its attributes. The alternative approach is 
		to examine the event object (in this case, either a mouseover or a mouseout) and to determine what object generated the 
		event &mdash; namely to find the target of the event. This approach is a bit tidier, code-wise (having slightly fewer 
		keystrokes). It is likely also a bit more efficient in terms of implementation since no need to re-enter the DOM is 
		presented; the object has already been referenced by the event. In applications where speed of processing is a consideration, 
		the latter is likely to be preferable.</p>
      <table class="example">
         <caption>Using mouseover and mouseout effects to signal that an object has received focus.</caption>
        <tbody>
          <tr>
            <th>
              Identifying active object by passing its id
            </th>
            <th>
              Using evt.target to get active element
            </th>
          </tr>
          <tr>
            <td><code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br /><br />function change(id){<br /> C=document.getElementById(id)<br /> C.setAttributeNS(null,"fill","red")<br />}<br />function back(id){<br /> C=document.getElementById(id)<br /> C.setAttributeNS(null,"fill","grey")<br />}<br />]]&gt;&lt;/script&gt;<br />&lt;rect x="0" y="0" width="100%" height="100%" fill="white"/&gt;<br />&lt;circle id="C1" cx="40" cy="60" r="30" <br /> fill="grey" stroke="black" stroke-width="8" <br /> onmouseover="change('C1')" <br /> onmouseout="back('C1')" /&gt;<br />&lt;circle id="C2" cx="80" cy="60" r="30" <br /> fill="grey" stroke="black" stroke-width="8" <br /> onmouseover="change('C2')"<br /> onmouseout="back('C2')" /&gt;<br />&lt;/svg&gt;<br /></code>
            </td>
            <td><code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br /><br />function change(evt){<br /> C=evt.target<br /> C.setAttributeNS(null,"fill","red")<br />}<br />function back(evt){<br /> C=evt.target<br /> C.setAttributeNS(null,"fill","grey")<br />}<br />]]&gt;&lt;/script&gt;<br />&lt;rect x="0" y="0" width="100%" height="100%" fill="white"/&gt;<br />&lt;circle cx="40" cy="60" r="30" <br /> fill="grey" stroke="black" stroke-width="8" <br /> onmouseover="change(evt)" <br /> onmouseout="back(evt)" /&gt;<br />&lt;circle cx="80" cy="60" r="30" <br /> fill="grey" stroke="black" stroke-width="8" <br /> onmouseover="change(evt)"<br /> onmouseout="back(evt)" /&gt;<br />&lt;/svg&gt;<br /></code>
            </td>
          </tr>
        </tbody>
      </table>
      <p>By passing the event object as a parameter to the receiving function we might also gain a tiny bit more parsimony 
		(and modularity as well) by examining the type of event which triggered the function. That is, we might replace the two functions:</p>
	  <p class="codeExample">function change(evt){<br />
<span>C=evt.target</span><br />
<span>C.setAttributeNS(null,"fill","red")</span><br />
}<br />
function back(evt){<br /><span>C=evt.target</span><br /><span>C.setAttributeNS(null,"fill","grey")</span><br />}</p>

      <p>with one function that is equivalent in the context of this rollover effect:</p>
	  <p class="codeExample">function change(evt){<br /><span>C=evt.target</span><br /><span>if (evt.type=="mouseover")</span><br /><span><span>C.setAttributeNS(null,"fill","red")</span></span><br />
<span>else C.setAttributeNS(null,"fill","grey")</span><br />}</p>
      <p>When the object being activated is simple (like an ellipse or rectangle), evt.target works quite well to prepare it for subsequent manipulation. Now, let us turn to the more complicated situation of the group, &lt;g&gt; containing two or more simple objects inside it.</p>
      <p>In the following page, a &lt;rect&gt; and a &lt;text&gt; are both nestled inside a &lt;g&gt;. A click on either of the two simple elements activates a function which identifies the nodeName (either "rect" or "text") of the object clicked upon.</p>
      <dl>
        <dd>
          <dl>
            <dd>
              <table border="1" cellpadding="7" cellspacing="0" width="445">
                <col width="429" />
                <tbody>
                  <tr>
                    <td class="caption">
                      Displaying the nodeName of the<br />
                      element clicked upon.
                    </td>
                  </tr>
                  <tr>
                    <td valign="top">
                      <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />function display(evt){<br /> alert(evt.target.nodeName)<br />}<br />]]&gt;&lt;/script&gt;<br />&lt;g&gt;<br /> &lt;rect x="30" y="40" width="180 height="30" fill="#ddd" <br /> stroke="black" onclick="display(evt)"/&gt;<br /> &lt;text x="50" y="63" font-size="18pt" fill="black" <br /> onclick="display(evt)"&gt;<br /> Display Msg<br /> &lt;/text&gt;<br />&lt;/g&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
                    </td>
                  </tr>
                </tbody>
              </table>
            </dd>
          </dl>
        </dd>
      </dl>
      <p>
        One thing about evt.target that is perhaps worth mentioning is that if we establish an event handler for onload in the &lt;svg&gt; tag itself and ask for evt.target.nodeName, then the target will, in fact, be seen to be the &lt;svg&gt; tag. This is as we would expect, but some early versions of SVG players seem to have used this as a method for finding the object known as document. That is, document and evt.target.ownerDocument refer to the same thing, when the event is fired from the &lt;svg&gt;.
      </p>
      <h6>
        evt.currentTarget
      </h6>
      <p>
        In our discussion of the &lt;g&gt; tag in Chapter 1, we saw that frequently we use a group as a place to consolidate attributes common to several of its member elements. We saw the use of &lt;g transform="translate(100,0)"&gt;, for example, to reposition an entire group. Likewise, we may assign an event handler to the entire group as in &lt;g onclick="doIt()"&gt;. This generally works well, unless we try to identify the group itself that was clicked on. That is because even though an event handler is assigned to the group, the target of the event ends up being the specific element within the group that actually received the event. Specifically, in the following example, it is either the &lt;rect&gt; or the &lt;text&gt; which is identified as evt.target, despite the event handler belonging to the &lt;g&gt; element.
      </p>
      <dl>
        <dd>
          <dl>
            <dd>
              <table border="1" cellpadding="7" cellspacing="0" width="409">
                <col width="393" />
                <tbody>
                  <tr>
                    <td class="caption">
                      evt.target refers to a child of a group
                    </td>
                  </tr>
                  <tr>
                    <td valign="top">
                      <pre>
<code>&lt;g onclick="alert(evt.target.nodeName)"&gt;<br /> &lt;rect x="30" y="40" width="180" height="30" <br /> fill="#ddd" stroke="black" /&gt;<br /> &lt;text x="50" y="63" font-size="18pt" fill="black"&gt;<br /> Display Msg<br /> &lt;/text&gt;<br />&lt;/g&gt;</code>
</pre>
                    </td>
                  </tr>
                  <tr>
                    <td valign="top">
                      <p>
                        Depending on where in the group we click, we find either the &lt;rect&gt; or the &lt;text&gt; but not the &lt;g&gt;.
                      </p>
                    </td>
                  </tr>
                </tbody>
              </table>
            </dd>
          </dl>
        </dd>
      </dl>
      <p>
        This can create problems, if, for example, we wished to allow the dragging and dropping of various buttons labeled with text around the screen. One way to solve this problem would be to use evt.target.parentNode to find the parent (namely the &lt;g&gt; tag) of whichever node receives the event. This does not generalize well, however, to more complex groups (for example where groups might be found inside groups).
      </p>
      <p>
        The answer to the above issue lies with evt.currentTarget. Its purpose, as illustrated below, is to find the superordinate object containing evt.target, specifically the group or other container to which the event listener has been assigned.
      </p>
      <dl>
        <dd>
          <dl>
            <dd>
              <table border="1" cellpadding="7" cellspacing="0" width="409">
                <col width="393" />
                <tbody>
                  <tr>
                    <td valign="top">
                      <pre>
<code>&lt;g id="MyGroup" onclick="alert(evt.currentTarget.id)"&gt;<br /> &lt;rect x="30" y="40" width="180" height="30" fill="#ddd" stroke="black" /&gt;<br /> &lt;text x="50" y="63" font-size="18pt" fill="black"&gt;<br /> Display Msg&lt;/text&gt;<br />&lt;/g&gt;</code>
</pre>
                    </td>
                  </tr>
                </tbody>
              </table>
            </dd>
          </dl>
        </dd>
      </dl>
      <p>
        This succeeds in displaying "MyGroup" whenever either the "rect" or the "text" within the group is clicked upon. That this also works for &lt;use&gt; can be seen in the following example:
      </p>
      <dl>
        <dd>
          <table border="1" cellpadding="7" cellspacing="0" width="548">
            <col width="532" />
            <tbody>
              <tr>
                <td valign="top">
                  <pre>
<code>&lt;defs&gt;&lt;g id="MyGroup"&gt;<br /> &lt;rect x="30" y="40" width="180" height="30" fill="#ddd" stroke="black"/&gt;<br /> &lt;text x="50" y="63" font-size="18pt" fill="black"&gt;Display Msg&lt;/text&gt;<br />&lt;/g&gt;&lt;/defs&gt;<br />&lt;use xlink:href="#MyGroup" id="MyUse" onclick="alert(evt.currentTarget.id)" transform="rotate(30 100 100)"/&gt;<br /></code>
</pre>
                </td>
              </tr>
              <tr>
                <td valign="top">
                  <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/5b58f585.png" alt="alert box identifying" id="graphics142" height="176" width="494" />
                </td>
              </tr>
            </tbody>
          </table>
        </dd>
      </dl>
      <h6>
        <a id="changing_text">8. Changing text.</a>
      </h6>
      <p>
        In the world of dynamic web pages, we frequently use text messages as a way of communicating with our visitors. In the HTML environment, scripts as these:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="572">
        <col width="201" />
        <col width="178" />
        <col width="149" />
        <tbody>
          <tr>
            <td colspan="3" class="caption">
              Some common HTML approaches to changing text
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function g(){<br /> f=document.forms[0]<br /> f.elements[0].value="hi"<br />}</code>
</pre>
            </td>
            <td>
              <pre>
<code>function rewrite(id,s){<br /> D=document<br /> O=D.getElementById(id)<br /> O.innerHTML=s<br />}</code>
</pre>
            </td>
            <td>
              <pre>
<code>function rewrite(s){<br /> document.write(s)<br />}</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        are commonly used to customize messages in HTML documents so as to respond to the activities of our web visitors.
      </p>
      <p>
        Text tags in SVG are a bit like &lt;div&gt; tags in HTML. The material between the &lt;text&gt; and the &lt;/text&gt; is a string of characters. Unlike &lt;div&gt; tags, however the string inside a &lt;text&gt; usually does not contain additional markup, but typically consists of plain ASCII (or Unicode) characters. That content may not be addressed in SVG by using innerHTML as is frequently done in HTML, since in SVG there is no innerHTML content associated with anything<sup><a class="footnoteanc" href="#footnote44sym" id="footnote44anc">44</a></sup>. 
      </p>
      <p>
        Instead, we must use DOM techniques to find and modify material within a &lt;text&gt; tag.
      </p>
      <p>
        Consider a somewhat generic SVG text object:
      </p>
      <pre>
<code class="code">&lt;text id="T" x="50" y="63" font-size="18pt" fill="black"&gt;<br />Here is a simple message<br />&lt;/text&gt;</code>
</pre>
      <p>
        Here the object <code>T=document.getElementById("T")</code> is the text tag. That is, <code>T.nodeName</code> is "text" and <code>T.id</code> is "T".
      </p>
      <p>
        The string "Here is a simple message" is, in fact, not an attribute of T, but a child of T. That is: <code>T.firstChild.nodeName</code> is "#text"
      </p>
      <p>
        More to the point, <code>T.firstChild.nodeValue</code> is "Here is a simple message"
      </p>
      <p>
        Hence, to change the nodeValue appearing within a &lt;text&gt; we use an approach such as illustrated below.
      </p>
      <dl>
        <dd>
          <dl>
            <dd>
              <table border="1" cellpadding="7" cellspacing="0" width="409">
                <col width="393" />
                <tbody>
                  <tr>
                    <td class="caption">
                      Changing the message inside a &lt;text&gt;
                    </td>
                  </tr>
                  <tr>
                    <td valign="top">
                      <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />function modify(id,s){<br /> T=document.getElementById(id)<br />  T.firstChild.nodeValue=s<br />}<br />]]&gt;&lt;/script&gt;<br />&lt;g onclick="modify('T','hello')"&gt;<br /> &lt;rect x="30" y="40" width="180" height="30" <br /> fill="#ddd" stroke="black" /&gt;<br /> &lt;text id="T" x="50" y="63" font-size="18pt" <br /> fill="black"&gt;<br /> Change Msg&lt;/text&gt;<br />&lt;/g&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
                    </td>
                  </tr>
                </tbody>
              </table>
            </dd>
          </dl>
        </dd>
      </dl>
      <p>
        It should be noted that in addition to nodeValue as a way of setting the value of text node (T.firstChild.nodeValue=string), we also have <em>data</em> and <em>textContent</em> (T.firstChild.data=string or T.textContent.data=string). The latter of these destroys any sub-elements that may be under the element T.
      </p>
      <h4 id="new_objects">
        Creating new SVG objects
      </h4>
      <p>
        In the preceding sections, we considered several aspects of interactivity including techniques for interrogating and modifying SVG elements. To make an SVG document, truly "application-like," we will wish to allow not just the modification of existing elements, but the creation of new ones.
      </p>
      <p>
        This involves essentially three steps:
      </p>
      <ol>
        <li>The creation of a new element
        </li>
        <li>Assigning attributes to that element
        </li>
        <li>Inserting the new element into the SVG DOM
        </li>
      </ol>
      <p>
        Fortunately, the most tedious of these steps, the second step, has already been discussed, so in this section we may concentrate on creation of new elements and inserting those into the DOM.
      </p>
      <p>
        Creation of new elements is typically done with either a createElementNS statement (or the short lived, and now largely obsolete, createElement). We will also consider briefly the createTextNode as well as the cloneNode method.
      </p>
      <p>
        After an element has been created it is then (in the typical case) added to our SVG document using the appendChild method.
      </p>
      <h5 id="create_append">
        createElementNS and appendChild
      </h5>
      <p>
        Let us begin with the canonical simple case. You may recall from the first chapter, we found a candidate simplest case for an SVG document as shown here:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;<br />&lt;circle r="50"/&gt;<br />&lt;/svg&gt;</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Here is the apparatus allowing a function to create just such a circle in response to the loading of the SVG document.
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"<br />onload="create()"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />var xmlns="http://www.w3.org/2000/svg"<br />function create(){<br /> var C=document.createElementNS(xmlns,"circle")<br /> C.setAttributeNS(null,"r",50)<br /> document.documentElement.appendChild(C)<br />}<br />]]&gt;&lt;/script&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The onload event activates the function "create()." That function in turn, does three things. First it creates a new &lt;circle&gt; using the createElementNS method. Note that we must use an XML namespace definition in this method, so the variable xmlns has been declared globally. We use the temporary variable "C" so that we may refer to this object in subsequent statements. Secondly, we define the only truly essential attribute of the &lt;circle&gt;: its radius, using setAttributeNS. Finally, we append the new element, with its one attribute to the document space. For this we use the appendChild method associated with any XML node. Actually we wish to append it to the root of the &lt;svg&gt; itself, which in the DOM is equivalent to document.documentElement. In future examples, I will typically use a global variable "Root" to refer to document.documentElement.
      </p>
      <p>
        The above example is rather contrived since we would clearly not use a script to create what could so much more easily be created with markup. But it sets the stage for more complex things. Typically, consistent with our concept of "dynamic content," we might like our new content to arrive at new locations and to have new properties.
      </p>
      <p>
        We now demonstrate the use of a function to create a new rectangle, assign it a random color, position it just below the preceding &lt;rect&gt; and then to embed it in the document.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="309" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              New &lt;rect&gt;'s with new positions and colors
            </td>
          </tr>
          <tr>
            <th>
              Code
            </th>
            <th>
              Annotations
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />var xmlns="http://www.w3.org/2000/svg"<br />var y=70<br />var Root=document.documentElement<br /></code>
</pre>
            </td>
            <td class="annotate">
              <pre>
&mdash;An SVG document with namespace <br />declarations.<br />&mdash;Script and CDATA block.<br />&mdash;A variable for the namespace.<br />&mdash;This is used to lower the rects.<br />&mdash;A pointer to the &lt;svg&gt; root.
</pre>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function create(){<br /> R=document.createElementNS(xmlns,"rect")<br /> R.setAttributeNS(null,"width",180)<br /> R.setAttributeNS(null,"height",30)<br /> R.setAttributeNS(null,"x",30)<br /> R.setAttributeNS(null,"y",y)<br /> y=y+30<br /> R.setAttributeNS(null,"stroke","black")<br /> R.setAttributeNS(null,"fill",color())<br /> Root.appendChild(R)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <pre>
&mdash;This function (called by a <br />mouseclick on the &lt;g&gt;) creates the <br />new &lt;rect&gt; element and gives it <br />several attributes.<br /><br /><br />&mdash;We increment y to put next <br />&lt;rect&gt; lower.<br />&mdash;This chooses a random color.<br />&mdash; This appends R to the &lt;svg&gt; itself <br />(the documentElement).
</pre>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function color(){<br /> var r=Math.random()*4096<br /> return "#"+Math.floor(r).toString(16)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              &mdash;This function returns a string of the form "#XXX" where each X is a hexadecimal value.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>]]&gt;&lt;/script&gt;<br />&lt;g onclick="create()"&gt;<br /> &lt;rect x="30" y="40" width="180" <br /> height="30" fill="#ddd" stroke="black" /&gt;<br /> &lt;text id="T" x="50" y="63" <br /> font-size="18pt" fill="black"&gt;<br /> Create Rect&lt;/text&gt;<br />&lt;/g&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
            <td class="annotate">
              <pre>
&mdash;We terminate the &lt;script&gt; and <br />present a button (group with<br />&lt;rect&gt; and &lt;text&gt;) that will <br />activate the function "create()" <br />when it is called.
</pre>
            </td>
          </tr>
          <tr>
            <td colspan="2" class="caption">
              Illustration
            </td>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/569cd29f.png" alt="randomly colored rectangles as seen in three browsers" id="graphics143" height="237" width="500" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        One might be tempted to observe that the use of six calls to setAttributeNS() to populate the element R with properties seems a bit cumbersome, particularly in relation to the relatively concise markup associated with a &lt;rect&gt; tag. We will shortly demonstrate the use of the cloneNode method which in many cases may simplify our coding considerably, by allowing new objects to inherit properties of objects that already exist. One could also use CSS (Cascading Style Sheet) styles to define classes of objects that will inherit certain properties from a style. This is discussed briefly in this book, but is more useful for setting properties like <em>opacity</em> and <em>stroke</em> that are really styling attributes, rather than things like <em>x</em> and <em>y</em>. Cloning turns out to be a bit more robust.
      </p>
      <h5 id="createTextNode">
        createTextNode
      </h5>
      <p>
        Text is slightly different from other things in SVG. A &lt;text&gt; tag has a child consisting of a string which appears without a tag of its own: &lt;text&gt;string&lt;/text&gt;. A &lt;script&gt; tag is similar, but the vast majority of SVG appears through attributes of tags, rather than through relatively unstructured material which dangles inside them. So while we may use the createElementNS method to create a &lt;text&gt; node, we must turn to a different method to put a string inside the node. For this, we use the createTextNodeNS method, in conjunction with createElementNS to create the text node, create a node containing our string and append our string (in this case the string "4321" of numeric digits) as a child of the text node:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
T=document.createElementNS(xmlns,"text")<br />Msg=document.createTextNode(4321)<br />T.appendChild(Msg)<br />document.documentElement.appendChild(T)<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        We illustrate with a short example, in which new text nodes are created and populated with single integers (uninteresting, as strings go, but illustrative). I believe the reader should be able to unpack the following code without detailed annotation based on the annotation of the preceding example "<em>New &lt;rect&gt;'s with new positions and colors"</em> in the section on createElementNS.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="565">
        <col width="326" />
        <tbody>
          <tr>
            <td class="caption">
              New &lt;text&gt;'s with messages in each
            </td>
            <td class="caption">
              illustration
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />var xmlns="http://www.w3.org/2000/svg"<br />var h=100<br />var Root=document.documentElement<br />function create(){<br /> T=document.createElementNS(xmlns,"text")<br /> T.setAttributeNS(null,"x",30)<br /> T.setAttributeNS(null,"y",h)<br /> T.setAttributeNS(null,"font-size","18pt")<br /> h=h+30<br /> Msg=document.createTextNode(h)<br /> T.appendChild(Msg)<br /> Root.appendChild(T)<br />}<br />]]&gt;&lt;/script&gt;<br />&lt;g onclick="create()"&gt;<br /> &lt;rect x="30" y="40" width="180" fill="#ddd"<br /> height="30" stroke="black"/&gt;<br /> &lt;text id="T" x="50" y="63" font-size="18pt" <br /> fill="black"&gt;<br /> Create Text&lt;/text&gt;<br />&lt;/g&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m5a962df7.png" alt="rectangle with words 'Create Text' followed by numbers 130, 160 and 190" id="graphics144" height="146" width="228" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Here each new &lt;text&gt; node is given a child ("Msg", a string) consisting of an integer representing the vertical positioning of the node.
      </p>
      <h5 id="cloneNode">
        cloneNode.
      </h5>
      <p>
        The cloneNode method allows us to duplicate or clone existing nodes such that the newly created object contains all of the properties (except <em>id</em>) associated with the original (including or not, as we wish, the children inside it).
      </p>
      <p>
        The use of cloneNode is typically as follows:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
var R=document.getElementById("R")<br />var NewR=R.cloneNode(false)<br />document.documentElement.appendChild(NewR)<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        That is, an existing object within the DOM is located. Once found it is then cloned. The resultant object is then appended to the DOM. Note that the cloneNode method receives a single parameter: a Boolean value representing whether or not we wish to duplicate all descendants of the node to be cloned. If the object has no children or if we do not wish to invite the children to the party, then we simply specify "false" as the value of that parameter.
      </p>
      <p>
        Here is an example of its use to create new rectangles. It accomplishes the same as the more lengthy code presented <em>"</em> in the section on <em>createElementNS</em> in the example "<em>New &lt;rect&gt;'s with new positions and colors."</em>
      </p>
      <dl>
        <dd>
          <table border="1" cellpadding="7" cellspacing="0" width="493">
            <col width="477" />
            <tbody>
              <tr>
                <td class="caption">
                  Using cloneNode to make new &lt;rect&gt;'s with new positions and colors
                </td>
              </tr>
              <tr>
                <td valign="top">
                  <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />var xmlns="http://www.w3.org/2000/svg"<br />var y=70<br />var Root=document.documentElement<br />function clone(){<br /> var R=document.getElementById("R")<br /> var NewR=R.cloneNode(false)<br /> NewR.setAttributeNS(null,"y",y)<br /> NewR.setAttributeNS(null,"fill",color())<br /> y=y+30<br /> Root.appendChild(NewR)<br />}<br />function color(){<br /> r=Math.random()*4096<br /> return "#"+Math.floor(r).toString(16)<br />}<br />]]&gt;&lt;/script&gt;<br />&lt;g onclick="clone()"&gt;<br /> &lt;rect id="R" x="30" y="40" width="180" <br /> height="30" fill="#ddd" stroke="black" /&gt;<br /> &lt;text id="T" x="50" y="63" font-size="18pt" <br /> fill="black"&gt;<br /> Clone Rect&lt;/text&gt;<br />&lt;/g&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
                </td>
              </tr>
            </tbody>
          </table>
        </dd>
      </dl>
      <p>
        In the above example, we see that each of the attributes, "x", "y", "width", "height", "fill" and "stroke" are replicated in the new object NewR. Then instead of issuing statements to set all six of these attributes, we have changed just two of them, the "y" and the "fill". It tidies up the code a good deal, though we would might suspect some minimal degradation of runtime performance, due to retrieving a node from the document before creating it.
      </p>
      <p>
        In the case of cloning a composite object (with children) like a group, we use cloneNode(true) to duplicate the subordinate node structure inside the object. In the following example, we are interested in duplicating a &lt;g&gt; containing both a &lt;rect&gt; and a &lt;text&gt;, but in putting each new object below the preceding on the screen. We have seen, earlier in working with groups, that it is sometimes easier to move groups around using a transform attribute, rather than manipulating attributes of all the children separately. Accordingly, this is the approach we use here:
      </p>
      <dl>
        <dd>
          <table border="1" cellpadding="7" cellspacing="0" width="457">
            <col width="441" />
            <tbody>
              <tr>
                <td class="caption">
                  Using cloneNode to make new &lt;g&gt;'s at new locations
                </td>
              </tr>
              <tr>
                <td valign="top">
                  <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br />xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />var xmlns="http://www.w3.org/2000/svg"<br />var y=0<br />var Root=document.documentElement<br />function clone(){<br /> var G=document.getElementById("G")<br /> var NewG=G.cloneNode(true)<br /> var move="translate("+0+","+(y+=30)+")"<br /> NewG.setAttributeNS(null,"transform",move)<br /> Root.appendChild(NewG)<br />}<br />]]&gt;&lt;/script&gt;<br />&lt;g onclick="clone()" id="G"&gt;<br /> &lt;rect x="30" y="40" width="180" id="R"<br /> height="30" fill="#ddd" stroke="black" /&gt;<br /> &lt;text x="50" y="63" font-size="18pt" fill="black"&gt;<br /> Clone Group&lt;/text&gt;<br />&lt;/g&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
                </td>
              </tr>
            </tbody>
          </table>
        </dd>
      </dl>
      <p>
        The value of the transform attribute is actually a string looking like "translate(0,90)." In order to incorporate new values of the vertical displacement, y, into the string, the literal and variable parts are broken out separately and concatenated together.
      </p>
      <p>
        If one actually runs the above code, not only is the group created, with its subordinate elements, but each new group also contains an onclick event-handler and hence is itself enabled to activate the clone() function.
      </p>
      <h5 id="other_methods">
        Other methods for managing new content
      </h5>
      <p>
        In addition to these techniques which can do most of what one might need to do with an SVG document, two which are part of the SVG 1.1 specification (and hence standard in most browsers) are worth mentioning: replaceChild() and insertBefore(). Both can be useful in changing the stacking order of elements within the SVG DOM.
      </p>
      <p>
        A simple use of the replaceChild() method may be seen here:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
F=document.createElementNS(xmlns,"circle")<br />  F.setAttribute("r",100)<br />  R.replaceChild(F,C)<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In this example, an object named "C" is replaced by a newly created circle named "F".
      </p>
      <p>
        Here is an example of the usage of insertBefore(). Instead of appending new elements to the DOM we clone an existing object and then insert new content before it in the DOM. The result will be that the first object (CL) will remain at the top of the DOM tree as the last child.
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
 var CL=document.getElementById("C")<br /> NC=CL.cloneNode(false)<br /> NC.setAttributeNS(n,"cx",evt.clientX)<br /> NC.setAttributeNS(n,"cy",evt.clientY)<br /> NC.setAttributeNS(n,"fill",color())<br /> NC.setAttributeNS(n,"id",null)<br /> R.insertBefore(NC,CL)<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Such proves useful when we would like some element like a menu to remain above all dynamically added content.
      </p>
      <h3 id="stopPropogation">
        More about events and .stopPropogation()
      </h3>
      <p>
        In our previous discussion of dragging and dropping<sup><a class="footnoteanc" href="#footnote45sym" id="footnote45anc">45</a></sup> , we assigned and withdrew event handlers from the Root document to move a single element around. Armed, now, with evt.target we may easily generalize to the dragging and dropping of multiple independent objects.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="445">
        <col width="429" />
        <tbody>
          <tr>
            <td class="caption">
              Dragging and dropping any of three objects
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br /> xmlns:xlink="http://www.w3.org/1999/xlink"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />var Root=document.documentElement<br />var C //currently selected object<br />function startMove(evt){<br /> C=evt.target<br /> Root.setAttribute("onmousemove","moveIt(evt)")<br /> Root.setAttribute("onmouseup","drop()")<br />}<br />function moveIt(evt){<br /> C.setAttributeNS(null,"cx",evt.clientX)<br /> C.setAttributeNS(null,"cy",evt.clientY)<br />}<br />function drop(){<br /> Root.setAttributeNS(null, "onmousemove",null)<br />}<br />]]&gt;&lt;/script&gt;<br />&lt;rect x="0" y="0" width="100%" height="100%" fill="white"/&gt;<br />&lt;circle cx="60" cy="60" r="22" <br /> fill="lightgrey" stroke="black" stroke-width="8" <br /> onmousedown="startMove(evt)"/&gt;<br />&lt;circle cx="100" cy="60" r="22" <br /> fill="lightgrey" stroke="black" stroke-width="8" <br /> onmousedown="startMove(evt)"/&gt;<br />&lt;circle cx="140" cy="60" r="22" <br /> fill="lightgrey" stroke="black" stroke-width="8" <br /> onmousedown="startMove(evt)"/&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Note from the above, that we simply use the event object to determine the source of the event (namely which of three circles was clicked on) to allow it to be the one we reposition as a result of mousemove events anywhere in the &lt;svg&gt;,
      </p>
      <p>
        We might additionally, wish to be able to create new objects which themselves are draggable and droppable. Herewith is a demonstration of one way<sup><a class="footnoteanc" href="#footnote46sym" id="footnote46anc">46</a></sup> to do that. It should be remarked that some attempt to streamline the code by minimizing keystrokes has been made. For example, instead of typing the lengthy line
      </p><code class="line">document.documentElement.setAttributeNS(null,"onmousemove","move(evt)")</code>
      <p>
        we use, here, instead, the equivalent<sup><a class="footnoteanc" href="#footnote47sym" id="footnote47anc">47</a></sup> 
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
var R=document.documentElement<br />var o="onmouse"<br />var n=null<br />R.setAttributeNS(n,o+"move","move(evt)")
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        This allows for a side-by-side presentation of both code and annotation,
      </p>
      <table border="1" cellpadding="7" cellspacing="0">
        <col width="328" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Using mouse clicks to create circles than can be dragged and dropped.
            </td>
          </tr>
          <tr>
            <th>
              Code
            </th>
            <th>
              Annotation
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br /> xmlns:xlink="http://www.w3.org/1999/xlink"<br /> onmousedown="clone(evt)"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />var xmlns="http://www.w3.org/2000/svg"<br />var R=document.documentElement<br />var C <br />var o="onmouse"<br />var n=null<br /></code>
</pre>
            </td>
            <td class="annotate">
              The usual beginnings.
              <ul>
                <li>the Root will listen to mousedown events.</li>
                <li>R: the SVG Root</li>
                <li>C: currently selected object</li>
                <li>o: a shortcut for mouse events</li>
                <li>n: saves three keystrokes from typing "null"</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code><br />function startMove(evt){<br />C=evt.target<br />R.appendChild(C)<br />R.setAttributeNS(n,o+"move","move(evt)")<br />R.setAttributeNS(n,o+"up","drop()")<br />evt.stopPropagation()<br />}</code>
</pre>
            </td>
            <td class="annotate">
              <ul>
                <li>Which ever object has been clicked is remembered as"C."</li>
                <li>The selected object is re-appended to the end of the DOM, so it will slide over rather than under objects created later.</li>
                <li>Root is prepared to listen to mousemove and mouseup.</li>
                <li>The selected object moves with the mouse until the mouse is released.</li>
                <li>Root is instructed to ignore the mousedown event which would still fire despite being handled by the &lt;circle&gt;</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function move(evt){<br /> C.setAttributeNS(n,"cx",evt.clientX)<br /> C.setAttributeNS(n,"cy",evt.clientY)<br />}</code>
</pre>
            </td>
            <td class="annotate">
              <ul>
                <li>So long as the mouse remains down, the selected object is repositioned to the mouse coordinates.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function drop(){<br /> R.setAttributeNS(n, o+"move",n)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <ul>
                <li>When the function is invoked (as a result of mouseup), Root is instructed to respond no longer to mouse movements. That is, move(evt) is "turned off."</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function clone(evt){<br /> var CL=document.getElementById("Z")<br /> NC=CL.cloneNode(false)<br /> NC.setAttributeNS(n,"cx",evt.clientX)<br /> NC.setAttributeNS(n,"cy",evt.clientY)<br /> NC.setAttributeNS(n,"fill",color())<br /> R.appendChild(NC)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <ul>
                <li>The prototype circle, with id is used for the cloning. All attributes are preserved except for its coordinates (given by the mousedown coordinates) and the color (randomly assigned). The clone is appended to the SVG Root node.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function color(){<br /> var r=Math.random()*4096<br /> return "#"+Math.floor(r).toString(16)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <ul>
                <li>One of 4096=16x16x16 color values is randomly returned.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>]]&gt;&lt;/script&gt;<br />&lt;rect x="0" y="0" width="100%" <br /> height="100%" fill="white"/&gt;<br />&lt;circle cx="60" cy="60" r="22" id="Z" <br /> onmousedown="startMove(evt)"<br /> fill="lightgrey" stroke="black" <br /> stroke-width="7" /&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
            <td class="annotate">
              <ul>
                <li>A large &lt;rect&gt; is placed to make the SVG document element fill the available screen. A generic circle is displayed for subsequent cloning. If we do not wish it to be visible we can simply locate it off-screen by setting cx="-100" for example.</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Perhaps the two trickiest parts of the above are in the startMove() function. In startMove() we cancel the event bubbling associated with the mousedown event. When we click on a &lt;circle&gt; both it and the SVG Root would ordinarily receive the mousedown event, unless we cancel its continued propagation which would ultimately reach Root. This could done with a statement equivalent to
      </p><code class="line">SVGRoot.setAttributeNS(null,"onmousedown",null)</code>
      <p>
        This would however, withdraw the listener from the Root, and after our dragging of the object is done (onmouseup) we would then have to reassign the listener for the mousedown event to the Root. Both of these would entail modifications of the DOM.
      </p>
      <p>
        Another way of handling this is as we have done it here: by stopping event propagation with the .stopPropagation() method of the event.
      </p><code class="line">e.stopPropagation()</code>
      <p>
        simply prevents a given event, "e", from bubbling or trickling (depending on the browser's event model) beyond the first target (with objects further from the root being those which are activate first). This may be a bit advanced for the casual reader, but if one tries the startMove() function without the call to stopPropagation(), he or she will be able to see exactly what we are talking about.
      </p>
      <p>
        The function startMove() also re-appends the selected element to the Root. This succeeds in making the selected object the element last created, hence making it appear on top of the other elements. It is not strictly needed for functionality, but may add to one's sense of aesthetics in user-interface, since it may be a bit disconcerting to see the object you are dragging disappear behind other content.
      </p>
      <p>
        Similar effects with changing the stacking order of objects can be accomplished using the replaceChild() and insertBefore() methods as mentioned earlier.
      </p>
      <h3 id="deleting_removing">
        Deleting or removing objects
      </h3>
      <p>
        The removeChild method is what is used to delete content from an SVG document. It is applied as a method of a given node and accepts a node as its single parameter.
      </p>
      <p>
        For example, let G=document.getElementById("G") be a node representing a group (&lt;g&gt;)somewhere in an SVG tree.
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;g id="G"&gt;<br />  &lt;rect id="R" width="50" x="0" y="0" height="50" fill="green"/&gt;<br /> &lt;rect x="9" y="9" width="50" height="50" fill="red"/&gt;<br />&lt;/g&gt;
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Then to delete the rectangle "R" from the document, we may issue the statements:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
G=document.getElementById("G")<br />R=document.getElementById("R")<br />G.removeChild(R)
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        If we wish to remove an object, but are not certain what node it is a child of, then we may use the <em>parentNode</em> method discussed in the next section and then apply the <em>removeChild</em> method to the <em>parentNode</em> of the node in question.
      </p>
      <table border="1">
        <tbody>
          <tr>
            <td class="caption">
              Removing children of an unknown parent
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg" width="100%"<br /> xmlns:xlink="http://www.w3.org/1999/xlink" &gt;<br />&lt;script&gt;&lt;![CDATA[<br />function remove(evt){<br /> var Node=evt.target<br />  Node.parentNode.removeChild(Node)<br />}<br />]]&gt;&lt;/script&gt;<br />&lt;g id="G" fill="red" onclick="remove(evt)"&gt;<br />  &lt;text font-size="12" x="50" y="20" &gt;<br /> Click on any child of G to remove it.&lt;/text&gt;<br /> &lt;text font-size="12" fill="black" x="50" y="60" &gt;<br />  Here is another child node.&lt;/text&gt;<br /> &lt;text font-size="12" x="50" y="100" &gt;<br />  Here is a third node of type "text".&lt;/text&gt;<br />  &lt;circle r="50"/&gt;<br />&lt;/g&gt;<br />&lt;/svg&gt;</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        To remove all child elements from a particular element, it is important to realize that the obvious approach of cycling through all children of that element may not work in quite the way that we might expect. Examples will be included in the forthcoming section on <em>parentNode</em>.
      </p>
      <h3 id="XML_DOM">
        XML and The SVG DOM
      </h3>
      <p>
        We have already, in passing, made reference to the SVG DOM in many places. SVG content is placed into a tree-like structure, the root node of which is the &lt;svg&gt; tag. While we may retrieve elements based on their id, or append them as children to the root element, we may also retrieve all elements of the tree (or any subtree) or the attributes of these elements by various DOM methods that SVG shares with the broader XML specification. Though the XML specifications mention numerous methods applicable in certain circumstances<sup><a class="footnoteanc" href="#footnote48sym" id="footnote48anc">48</a></sup> , and which may save steps in our programming, the following six methods provide sufficient flexibility that one can accomplish most of what one seeks to by an understanding of what they are and when to use them.
      </p>
      <p>
        First we should point out that a node refers to any object (i.e., anything that has a tag, and hence a nodeName) in the SVG DOM. For example, the &lt;svg&gt; tag itself is generally known as the node serving as the root of the tree. It is the container in which all other tags are placed.
      </p>
      <p>
        As we have pointed out document.documentElement is generally<sup><a class="footnoteanc" href="#footnote49sym" id="footnote49anc">49</a></sup> , the same as &lt;svg&gt; the root SVG node. We may explore the DOM tree starting with it.
      </p>
      <p>
        If, when the SVG document loads, we call a script which displays
      </p><code class="line">document.documentElement.nodeName</code>
      <p>
        we will see that it is "svg". In contrast,
      </p><code class="line">document.nodeName</code>
      <p>
        is simply "#document". Items which are merely strings, which is what the entire document ultimately is, are assigned these pseudo-nodeNames, beginning with "#" to indicate that they are simply strings.
      </p>
      <p>
        We'll begin our discussion of DOM methods relative to this root node:
      </p>
      <p>
        Root=document.documentElement.
      </p>
      <h4 id="firstChild">
        firstChild
      </h4>
      <p>
        The <em>firstChild</em> method receives one parameter, a node, and returns an object as output. It represents the first item (tagged node or otherwise) found inside a node.
      </p>
      <p>
        <code>document.firstChild</code> finds the first tag in the document itself: namely the &lt;svg&gt; tag. That is, <code>document.documentElement</code> and <code>document.firstChild</code> refer to exactly the same thing. Again, <code>document.firstChild.nodeName</code> is "svg". We may then repeat this method on the retrieved object:
      </p>
      <p>
        <code>document.firstChild.firstChild</code> retrieves the first object inside the &lt;svg&gt;
      </p>
      <p>
        For sake of understanding, let us work with the following rather simple document. Note that all the tags abut, with no space or text between them, making matters a bit simpler and more convenient.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="397">
        <col width="381" />
        <tbody>
          <tr>
            <td class="caption">
              A document with two children of Root
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg" <br />xmlns:xlink="http://www.w3.org/1999/xlink"<br />onload="startup()"&gt;&lt;script&gt;&lt;![CDATA[<br />var xmlns="http://www.w3.org/2000/svg" <br />var Root=document.documentElement<br />function startup(){<br /> //various statements<br />}<br />]]&gt;&lt;/script&gt;&lt;g id="G"&gt;&lt;rect x="0" y="0" width="50" height="50"<br /> fill="green"/&gt;&lt;rect x="9" y="9" width="50"<br /> height="50" fill="red"/&gt;&lt;/g&gt;&lt;/svg&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        If the function <em>startup()</em> contains the following code:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
C1=document.firstChild<br />s=C1.nodeName<br />C2=C1.firstChild<br />s+=C2.nodeName<br />C3=C2.firstChild<br />s+=C3.nodeName<br />alert(s)<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        then the resulting string displayed is "svgscript#cdata-section". The reasons are fairly straightforward: the first tag in the document, as we have noted, is the &lt;SVG&gt; tag. Its first child is the &lt;script&gt; tag. The first (and only) child of the &lt;script&gt; tag is the &lt;CDATA&gt; section (handled somewhat specially within XML languages, which explains its somewhat mutant <em>nodeName</em>). We could not, in this case, take the analysis any further since the &lt;CDATA&gt; rather like a &lt;text&gt; has no children, per se, but rather has an untagged string inside it<sup><a class="footnoteanc" href="#footnote50sym" id="footnote50anc">50</a></sup>. While the cdata-section could be examined through its <em>nodeValue</em>, it is important to realize that this only works because its child is a string rather than a node. For example,
      </p><code class="line">document.getElementById("G").nodeValue</code>
      <p>
        produces nothing useful (its value is null).
      </p>
      <p>
        Suppose we wished to explore, from a little deeper in the tree, say, starting with the &lt;g&gt; tag:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              &lt;g id="G"&gt;&lt;rect x="0" y="0" width="50" height="50" fill="green"/&gt;&lt;rect x="9" y="9" width="50" height="50" fill="red"/&gt;&lt;/g&gt;
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Not surprisingly, we find that a &lt;rect&gt; is the first child of the group. Since that &lt;rect&gt; is, itself, childless, an attempt to retrieve G.firstChild.firstChild produces an error.
      </p>
      <p>
        The above discussion perhaps motivates the question: how to find the second child of a node? We might imagine having a large but countable set of methods, each associated with an ordinal number: secondChild, thirdChild, etc. Alas, we never run out of ordinal numbers, and a language with a countable but infinite set of commands would be unwieldy to implement on computers built with molecules, so we take a hint from set theory and borrow a variant of the successor function: the <em>nextSibling</em> method. Before turning to <em>nextSibling</em>, however, the reader should be aware of one more aspect of the <em>firstChild</em> method which can, at times, be perplexing.
      </p>
      <p>
        An important thing to note about <em>firstChild</em>, is that it may pick up different object than what we might expect. Consider the difference between these two document fragments:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              Two <em>almost</em> equivalent (except for white space) SVG groups
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                1.
              </p>
              <pre>
<code>&lt;g id="G"&gt;&lt;rect x="0" y="0" width="50" height="50" fill="green"/&gt;&lt;rect <br />x="9" y="9" width="50" height="50" fill="red"/&gt;&lt;/g&gt;</code>
</pre>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                2.
              </p>
              <pre>
<code>&lt;g id="H"&gt;<br />  &lt;rect width="50" x="0" y="0" height="50" fill="green"/&gt;<br />  &lt;rect x="9" y="9" width="50" height="50" fill="red"/&gt;<br />&lt;/g&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Let
      </p>
      <pre>
<code class="line">G=document.getElementById("G")<br />H=document.getElementById("H")</code>
</pre>
      <p>
        then in ASV+Internet Explorer, <em>G.firstChild</em> is the green rectangle, but <em>H.firstChild</em> is the carriage return/tab sequence used to make the code presentable for human eyes.
      </p>
      <p>
        In HTML, different browsers resolve the issue of white space differently, but my experiments with different browsers in SVG suggest that all three of the major browsers all view the text between tags as a separate child.
      </p>
      <p>
        We might use <em>nodeName</em> in conjunction with <em>nextSibling</em> (as discussed next) to be certain that we are pointing to a real tag, rather than white space<sup><a class="footnoteanc" href="#footnote51sym" id="footnote51anc">51</a></sup>. Alternatively, we might use the <em>getElementsByTagName</em> (discussed a bit later) method to retrieve only those elements of a particular type (if we know what we are looking for).
      </p>
      <h4 id="nextSibling">
        nextSibling
      </h4>
      <p>
        Like the <em>firstChild</em> method, <em>nextSibling</em> accepts a node as a parameter and returns a node as output. It returns the next child of the parent of the current node. For example, if the first child of a parent is passed to <em>nextSibling</em>, then what is returned will be the second child of the parent. Consider our example of a simple group:
      </p>
      <pre>
<code class="line">&lt;g id="G"&gt;&lt;rect x="0" y="0" width="50" height="50" fill="green"/&gt;&lt;rect <br />x="9" y="9" width="50" height="50" fill="red"/&gt;&lt;/g&gt;</code>
</pre>
      <p>
        In this case, if:
      </p><code class="line">G=document.getElementById("G")</code>
      <p>
        then G.firstChild will be the green rectangle and G.firstChild.nextSibling will be the red rectangle.
      </p>
      <p>
        As with <em>firstChild</em>, <em>nextSibling</em> sees the white space (like carriage returns and tabs) between tags as #text nodes, so we may end up with different results than we expect based on our typesetting preferences.
      </p>
      <h4 id="childNodes">
        childNodes
      </h4>
      <p>
        Often we may be uncertain what sort of a DOM an SVG document contains. This may be true either when we allow the user to create and remove content repeatedly, or when we embed or otherwise import external SVG content into a document or its script. If, for example, we hope to recursively expand all nodes of a given DOM, then being able to deal with all children of a given branch rather than one at a time can be most convenient. This is done with the <em>childNodes</em> method of a given node.
      </p>
      <p>
        .childNodes receives an SVG node as its single parameter and returns a "node list," a collection (much like an array) of objects.
      </p>
      <dl>
        <dd>
          <p>
            <code>O.childNodes.length</code> represents the number of children of the object O.
          </p>
          <p>
            <code>O.childNodes.item(0)</code> represents the 1st child of the object O.
          </p>
          <p>
            <code>O.childNodes.item(i)</code> represents the i-1st child of the object O.
          </p>
        </dd>
      </dl>
      <p>
        Consider the following SVG document containing a small amount of markup.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="481">
        <col width="465" />
        <tbody>
          <tr>
            <td class="caption">
              A document with five children of Root
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg" <br />xmlns:xlink="http://www.w3.org/1999/xlink"<br />onload="startup()"&gt;&lt;script&gt;&lt;![CDATA[<br />var xmlns="http://www.w3.org/2000/svg" <br />var Root=document.documentElement<br />function startup(){<br /> //various statements<br />}<br />]]&gt;&lt;/script&gt;&lt;rect width="100%" x="0" y="0" height="100%" <br />fill="white"/&gt;&lt;text x="99" y="20" font-size="18"&gt;SVG DOM&lt;/text&gt;<br />&lt;g id="H"&gt;<br /> &lt;rect width="50" x="0" y="0" height="50" fill="green"/&gt;<br />  &lt;rect x="9" y="9" width="50" height="50" fill="red"/&gt;<br />&lt;/g&gt;&lt;/svg&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        We may observe that if
      </p>
      <p>
        <code class="line">Root=document.documentElement</code><br />
        (i.e.,Root=document.firstChild)
      </p>
      <p>
        then <code>Root.childNodes.length</code> is 5 (Namely, &lt;script&gt;,&lt;rect&gt;,&lt;text&gt;,#text,and &lt;g&gt;).
      </p>
      <p>
        The #text node is simply the white space between the &lt;text&gt; and the &lt;g&gt;.
      </p>
      <dl>
        <dd>
          <p>
            <code>Root.childNodes.item[0]</code> is the same as the &lt;script&gt;,
          </p>
          <p>
            <code>Root.childNodes.item[1]</code> is the same as the first &lt;rect&gt;,
          </p>
          <p>
            <code>Root.childNodes.item[2]</code> is the same as the &lt;text&gt;,
          </p>
          <p>
            <code>Root.childNodes.item[3]</code> is the same as the carriage return, and
          </p>
          <p>
            <code>Root.childNodes.item[4]</code> is the same as the &lt;g&gt;.
          </p>
        </dd>
      </dl>
      <p>
        Likewise, if
      </p><code class="line">H=document.getElementById("H")</code>
      <p>
        then
      </p>
      <dl>
        <dd>
          <p>
            <code>H.childNodes.item[0]</code> is the same as the green &lt;rect&gt; and
          </p>
          <p>
            <code>H.childNodes.item[1]</code> is the same as the red &lt;rect&gt;
          </p>
        </dd>
      </dl>
      <p>
        If one were forced to get by without the use of childNodes, one could, using just firstChild and nextSibling, and continuing until O.nextSibling becomes null. The use of childNodes saves us from the need to interrogate nodes to see if they are null or not, and provides a handy way of referencing them without multiple entries in the DOM.
      </p>
      <p>
        Under the section concerning <em>parentNode</em> we will see how to remove all childNodes of a given node.
      </p>
      <h4 id="getElementsByTagName">
        getElementsByTagNameNS
      </h4>
      <p>
        Another method of objects which, though not strictly essential for our survival, is nevertheless helpful. Like <em>childNodes</em>, if O is a node, xmlns is our XML namespace, and tagname is a type of tag (like "rect" or "g") then
      </p><code class="line">O.getElementsByTagNameNS(xmlns, tagname)</code>
      <p>
        returns a nodelist, with the elements of this nodelist consisting of all descendents of the node O (not just its immediate children, but all nodes in its subtree) of a given nodeName. In the above example <em>A document with five children of Root:</em>
      </p><code class="line">Root.getElementsByTagNameNS(xmlns, "rect")</code>
      <p>
        returns a nodelist of three items representing the three &lt;rect&gt; tags in the entire document, even though only one of them is a direct child of Root. As with <em>childNodes</em>, the nodelist returned by <em>getElementsByTagNameNS</em> is manipulated not as an array but through its item list:
      </p>
      <dl>
        <dd>
          <p>
            <code>Root.getElementsByTagNameNS(xmlns, "rect").length</code> is 3.
          </p>
          <p>
            <code>Root.getElementsByTagNameNS(xmlns, "rect").item(0)</code> is the white &lt;rect&gt;,
          </p>
          <p>
            <code>Root.getElementsByTagNameNS(xmlns, "rect").item(1)</code> is the green &lt;rect&gt;,
          </p>
          <p>
            <code>Root.getElementsByTagNameNS(xmlns, "rect").item(2)</code> is the red &lt;rect&gt;.
          </p>
        </dd>
      </dl>
      <p>
        For a more extensive demonstration of the use of <em>getElementsByTagName</em>, the following succeeds in allowing each tagged node in the document to, when clicked upon, to find and change the colors of all other nodes of the same type.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="436" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Using getElementsByTag name to modify all elements of a kind.
            </td>
          </tr>
          <tr>
            <th>
              Markup and code
            </th>
            <th>
              Explanation
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg" <br />xmlns:xlink="http://www.w3.org/1999/xlink" <br />onload="startup()"&gt;&lt;script&gt;&lt;![CDATA[<br />var xmlns="http://www.w3.org/2000/svg" <br />var O=document.documentElement<br /></code>
</pre>
            </td>
            <td class="annotation">
              The standard beginnings.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>var CO=new Array("aqua","red","green","blue")<br />var c=0<br />var status<br />function startup(){<br />  status=document.getElementById("stat")<br /> for (var i=0;i&lt;O.childNodes.length;i++){<br />  Oi=O.childNodes.item(i)<br />  if (Oi.nodeName!="#text"){<br /> var f="doIt('"+ Oi.nodeName +"')"<br />  Oi.setAttribute("onclick",f)<br /> }<br />  }<br />}<br /></code>
</pre>
            </td>
            <td class="annotation">
              <p>
                An array of colors a counter, and a status field.
              </p>
              <p>
                To each tagged node of the document we assign an onclick handler and send it the nodeName.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function doIt(s){<br /> status.firstChild.nodeValue=s<br />  T=document.getElementsByTagNameNS(xmlns,s)<br /> for (var j=0;j&lt;T.length;j++){<br /> var c1= CO[(c+j)% CO.length]<br /> var c2= CO[(c+j+1)% CO.length]<br /> T.item(j).setAttribute("fill",c1)<br />  T.item(j).setAttribute("stroke",c2)<br />  }<br />  c++<br />}<br />]]&gt;&lt;/script&gt;<br /></code>
</pre>
            </td>
            <td class="annotation">
              <p>
                Display the type of the node clicked.
              </p>
              <p>
                Find all nodes of the same kind and change their colors.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;text x="200" y="20" font-size="18"&gt;<br /> getElementsByTagNameNS&lt;/text&gt;<br />&lt;text x="170" y="40" font-family="courier" font-size="10"&gt;<br /> Each tag is given a handler that allows it to modify <br /> all elements sharing its nodeName&lt;/text&gt;<br />&lt;text id="stat" x="450" y="99" font-size="18"&gt;status&lt;/text&gt;<br />&lt;ellipse cx="190" cy="90" rx="30" ry="20" fill="purple"/&gt;<br />&lt;rect width="50" x="100" y="0" height="50" fill="green"/&gt;<br />&lt;rect x="99" y="9" width="50" height="50" fill="red"/&gt;<br />&lt;ellipse cx="290" cy="90" rx="30" ry="20" fill="purple"/&gt;<br />&lt;path d="M 0 100 C 100 0 200 300 300 100" fill="lightblue" stroke="black"/&gt;<br />&lt;path d="M 0 200 C 100 0 200 300 300 200" fill="lightgreen" stroke="black"/&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
            <td class="annotation">
              A collection of nodes: &lt;text&gt;, &lt;rect&gt;,&lt;ellipse&gt;, and &lt;path&gt;
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        As a special note to the more advanced programmer: the list returned by <em>getElementsByTagName</em> represents an active list of nodes present in the SVG document. As such, it may be better, from the perspective of the performance of the program, to maintain a separate data structure containing a virtual list, so that large-scale manipulations of a DOM that contains a very large number of nodes may be done more effectively. Also, in this case of the above example, we could have used CSS to change attributes of classes so that a collection of nodes could be changed in one place instead of changing attributes of every element.
      </p>
      <h4 id="parentNode">
        parentNode
      </h4>
      <p>
        On occasion we might need to retrieve the SVG element directly superordinate to a given node. In the following example
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;g id="G" transform="translate(100,100) "&gt;<br />  &lt;rect id="R" x="0" y="0" height="20" width="99" fill="aqua" /&gt;<br /> &lt;text id="T" x="10" y="15" fontsize="12pt" fill="black"&gt;two&lt;/text&gt;<br />&lt;/g&gt;<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        the command
      </p><code class="line">document.getElementById("T").parentNode</code>
      <p>
        will retrieve the &lt;g&gt; with id="G".
      </p>
      <p>
        If, for example, we wished to find all text nodes whose first child contain a certain substring and then to translate the groups containing those, so that those nodes are all collected together into a particular part of the screen, then <em>parentNode</em> can prove most convenient.
      </p>
      <p>
        It is common in scripting SVG documents to wish to develop a script which removes all children of a given node. However, it is important to realize that the following, seemingly, natural approach will not work:
      </p>
      <table border="1">
        <tbody>
          <tr>
            <td class="caption" colspan="2">
              Removing child nodes
            </td>
          </tr>
          <tr>
            <th colspan="2">
              The SVG code common to both approaches
            </th>
          </tr>
          <tr>
            <td colspan="2">
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg" width="100%"<br /> xmlns:xlink="http://www.w3.org/1999/xlink" &gt;<br />&lt;script&gt;&lt;![CDATA[<br />/* function to delete all nodes */<br />]]&gt;&lt;/script&gt;<br />&lt;g id="G" fill="red" onclick="remove(evt)"&gt;<br />  &lt;text font-size="12" x="50" y="20" &gt;<br /> Click on any child of G to remove it.&lt;/text&gt;<br /> &lt;text font-size="12" fill="black" x="50" y="60" &gt;<br />  Here is another child node.&lt;/text&gt;<br /> &lt;text font-size="12" x="50" y="100" &gt;<br />  Here is a third node of type "text".&lt;/text&gt;<br />  &lt;circle r="50"/&gt;<br />&lt;/g&gt;<br />&lt;/svg&gt;</code>
</pre>
            </td>
          </tr>
          <tr>
            <th>
              How not to do it
            </th>
            <th>
              A successful approach
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code><br />function remove(evt){<br />var GChildren=evt.target.parentNode.childNodes<br />alert(GChildren.length)<br />for (var i=0;i&lt;GChildren.length;i++){<br />var anyChild=GChildren.item(i)<br />Group.removeChild(anyChild)<br />}<br />}<br /></code>
</pre>
            </td>
            <td>
              <pre>
<code>function remove(evt){<br /> var GChildren=evt.target.parentNode.childNodes<br /> for (var i=GChildren.length-1;i&gt;=0;i&mdash;){<br /> var anyChild=GChildren.item(i)<br /> Group.removeChild(anyChild)<br /> }<br />}</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The key here is that the list <em>childNodes</em> is <em>live</em>, meaning that as soon as we've deleted a node from the list and attempt to re-enter the looping statement, the node list has changed, meaning that the number i will now have skipped beyond the next node. If the reader actually implements the illustrated code, he will find that the value of GChildren.length begins at 9 and through a succession of mouseclicks works its way down to 4, then to 2, and finally to 1 before removing all children of the group. Instead, the second process which works backward from the end of the list will properly succeed in finding
      </p>
      <h4 id="attributes">
        node.attributes
      </h4>
      <p>
        We have seen how to retrieve a particular attribute value of a given node when we know which attribute, Q, (e.g., Q="x" or Q="fill") we are interested in examining:
      </p><code class="line">document.getElementById("T").getAttributeNS(Q)</code>
      <p>
        But suppose we encounter a node for which (for whatever reason) we do not know what attributes may have been defined. <em>attributes</em> gives us the way to explore the attributes of a given node. If the variable <em>N</em> points to the node in question, then
      </p><code class="line">N.attributes</code>
      <p>
        returns a nodelist of attribute name and attribute value pairs. Those pairs may be interrogated through nodeName and nodeValue, respectively, as follows:
      </p>
      <dl>
        <dd>
          <table border="1" cellpadding="7" cellspacing="0" width="517">
            <col width="355" />
            <tbody>
              <tr>
                <td colspan="2" class="caption">
                  Determining attributes of an SVG node
                </td>
              </tr>
              <tr>
                <th colspan="2" valign="top">
                  The SVG Document
                </th>
              </tr>
              <tr>
                <td colspan="2" valign="top">
                  <pre>
<code>
  &lt;svg xmlns="http://www.w3.org/2000/svg" 
    xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
    &lt;script&gt;&lt;![CDATA[
      function Here(){
        return <span class="emphasize">Fill_in_the_Blank</span>;
      }
    ]]&gt;
    &lt;/script&gt;
    
    &lt;text x="170" y="150" font-size="24" fill="black"&gt;Click&lt;/text&gt;
    &lt;rect id="R" onclick="Here()" x="155" y="125" height="30" width="80" 
      stroke="black" stroke-width="2" fill="green" opacity=".5"/&gt;
  &lt;/svg&gt;
  </code>
</pre>
                </td>
              </tr>
            </tbody>
          </table>
          <table border="1" cellpadding="7" cellspacing="0" width="517">
            <col class="fill_in" width="355" />
            <tbody>
              <tr>
                <th>
                  Fill_in_the_Blank
                </th>
                <th>
                  value
                </th>
              </tr>
              <tr>
                <td>
                  R.attributes.length
                </td>
                <td>
                  10
                </td>
              </tr>
              <tr>
                <td>
                  R.attributes.item(0).nodeName
                </td>
                <td>
                  id
                </td>
              </tr>
              <tr>
                <td>
                  R.attributes.item(0).nodeValue
                </td>
                <td>
                  R
                </td>
              </tr>
              <tr>
                <td>
                  R.attributes.item(1).nodeName
                </td>
                <td>
                  onclick
                </td>
              </tr>
              <tr>
                <td>
                  R.attributes.item(1).nodeValue
                </td>
                <td>
                  Here()
                </td>
              </tr>
              <tr>
                <td>
                  R.attributes.item(2).nodeName
                </td>
                <td>
                  x
                </td>
              </tr>
              <tr>
                <td>
                  R.attributes.item(2).nodeValue
                </td>
                <td>
                  155
                </td>
              </tr>
            </tbody>
          </table>
        </dd>
      </dl>
      <p>
        In the above examples, we may instead examine all of the attribute (name, value) pairs similarly through the use of a simple loop.
      </p>
      <p>
        As a part of code that serializes (or converts an SVG DOM back into a textual representation), I have frequently used code of the following sort to find and display all the attributes of a given node n:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
function listAttributes(n){<br /> var s=""<br /> for (j=0;j&lt;n.attributes.length;j++){<br />  s+=" "+n.attributes.item(j).nodeName+"=\""<br /> s+=n.attributes.item(j).nodeValue+"\""<br /> }<br />  return s<br />}<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <h3 id="special_functions">
        Special functions
      </h3>
      <p>
        Available to us in SVG, are a few delightful functions that allow us to interrogate properties of object that have been drawn in our canvas. While one might argue that if we have drawn them then we most certainly should know where they are<sup><a class="footnoteanc" href="#footnote52sym" id="footnote52anc">52</a></sup> , not all programmers are as fastidious as others, and not all those who think they are fastidious are always as omniscient as they might wish themselves to believe.
      </p>
      <p>
        These special functions allow us to determine the bounding box (or minimal enclosing rectangle) of a shape, determine the length of a path or the position of a point p% of the way along that path. We may determine the size of a string as rendered, and we may determine what transformation has finally been applied to an object after a series of transformations have been applied. All useful things these can be, even to the programmer who has never misplaced a sock.
      </p>
      <h4 id="getBBox">getBBox</h4>
      <p>The <em>getBBox</em> method of object drawn in SVG allows us to determine the coordinates of the smallest rectangle (with 
		sides parallel to the screen) in which the object fits. Specifically, getBBox accepts, as input, any SVG graphics 
		element or group and returns a rectangle containing four attributes (the x and y of its upper leftmost corner, 
		its height and its width).</p>
      <p>For certain elements like &lt;rect&gt; or &lt;ellipse&gt; the properties of the bounding rectangle are trivial 
		and obvious. For more complex entities like B&eacute;zier curves and text objects (where knowing how wide all the 
		characters and the inter-character kerning would be rather complex to calculate), the <em>getBBox</em> method can save 
		the programmer extensive effort.</p>
      <p>As a simple example consider the following tag:</p>
      <p class="codeExample">&lt;text id="T" x="20" y="20" font-family="garamond" font-size="18"&gt;<br />Here is some text<br />&lt;/text&gt;</p>
      <p>The getBBox method is used as follows:</p>
      <p class="codeExample">var Box=document.getElementById("T").getBBox()</p>
      <p>After the above has been defined then the properties of the object variable "Box" are as follows in three different browsers:</p>
      <table class="example">
         <caption>Applying getBBox to a &lt;text&gt; in different browsers</caption>
        <tbody>
          <tr>
            <td colspan="4"><code>var Box=document.getElementById("T").getBBox()</code></td>
          </tr>
          <tr>
            <td colspan="4"><pre>&lt;text id="T" x="20px" y="20px" font-family="garamond"
font-size="18pt"&gt;Here is some text&lt;/text&gt;</pre>
            </td>
          </tr>
          <tr>
            <td>&nbsp;</td>
            <td>Firefox 1.5</td>
            <td>ASV+IE</td>
            <td>Opera 9</td>
          </tr>
          <tr>
            <td>
              Box.x
            </td>
            <td>
              20
            </td>
            <td>
              20
            </td>
            <td>
              20
            </td>
          </tr>
          <tr>
            <td>
              Box.y
            </td>
            <td>
              4
            </td>
            <td>
              4.64
            </td>
            <td>
              -1
            </td>
          </tr>
          <tr>
            <td>
              Box.width
            </td>
            <td>
              164
            </td>
            <td>
              162.6
            </td>
            <td>
              164
            </td>
          </tr>
          <tr>
            <td>
              Box.height
            </td>
            <td>
              17
            </td>
            <td>
              15.76
            </td>
            <td>
              27
            </td>
          </tr>
        </tbody>
      </table>
      <p>The fact that <em>getBBox</em> returns different values for the same object in the different browsers is one very compelling reason for using it.</p>
      <p>Here is another example, in which we may see the results of drawing a bounding box around a &lt;text&gt; object.</p>
      <table class="example">
        <caption>Applying getBBox to a &lt;text&gt;</caption>
        <tbody>
          <tr>
            <td><code>&lt;text x="0" y="100" font-size="60" fill="red"&gt;Doing text - Click&lt;/text&gt;</code></td>
          </tr>
          <tr>
            <th>illustration</th>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/5cdd02af.png" alt="rectangle draw around red text" id="graphics145" height="130" width="421" />
            </td>
          </tr>
          <tr>
            <td><pre>O.getBBox.x is 0
O.getBBox.y is 46
O.getBBox.width is 435
O.getBBox.height is 68</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>It is worth noting that <em>getBBox</em> responds to original untransformed values of a drawn object. If an 
		object has transformations applied (scale, rotate, or translate) then one must take those transforms into effect and apply 
		them to the bounding box as well. See the example under <em>getCTM</em> later in this section.</p>
      <p>A related function which should be used when viewports differ (e.g., when viewBox is used) is <em>getScreenBBox.</em>
<!-- The reader is referred to the example at <a href="http://the.fuchsia-design.com/2006/12/getting-svg-elementss-full-bounding-box.html">Getting an SVG Element's Full Bounding Box</a> as illustration.-->
      </p>
      <h4 id="getTotalLength">
        getTotalLength() and getPointAtLength
      </h4>
      <p>
        Given a path (consisting of linear, elliptical, and/or B&eacute;zier segments) we might sometimes wish to be able to place markers of some kind at intervals along that path. The special methods of path elements, <em>getTotalLength</em> and <em>getPointAtLength</em>, allow us to do exactly this.
      </p>
      <p>
        To understand how they work, let us start with a simple example, and follow it through algebraically.
      </p><code class="line">&lt;path id="P" d="M 200,100 350,50 400,100 z" fill="#edf"/&gt;</code>
      <p>
        The midpoint of the path will be the point halfway around the circuit starting at (200,100) passing through (350,50) and (400,100) and returning to the beginning. The three line segments have length, respectively of sqrt(150<sup>2</sup> +50<sup>2</sup> ), sqrt(50<sup>2</sup> +50<sup>2</sup> ), and 200, for a total distance around the triangle of about 428.8 (=70.7+158.1+200). The halfway point, then will be at a distance, along the path, of 214.4 from the starting node, or about (214.4-70.7)/158.1 = 90.88% of the distance from (350,50) to (400,100). That is, the midpoint will be at about (389.8,89.8).
      </p>
      <p>
        We may retrieve similar results (with far less conceptual work) by invoking the <em>getTotalLength</em> and <em>getPointAtLength</em> as in the following.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="481">
        <col width="465" />
        <tbody>
          <tr>
            <td class="caption">
              Finding a point halfway along a path.
            </td>
          </tr>
          <tr>
            <td valign="top">
              <code>&lt;path id="P" d="M 200,100 350,50 400,100 z" fill="#edf"/&gt;</code>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>
  Path=document.getElementById("P");
  var Length=Path.getTotalLength();
  var halfLength=Length/2;
  Mid=Path.getPointAtLength(halfLength);
  plotPoint(Mid.x,Mid.y);
  //where plotPoint draws, say, an ellipse at (P.x, P.y)</code>
</pre>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m5d26e23f.png" alt="a small ellipse drawn halfway around a triangle" id="graphics146" height="95" width="250" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        <em>getTotalLength</em> is a method applied to a &lt;path&gt; (in this case the path named by the variable <em>Path</em>). It returns a floating point number equal to (or at least a good estimate of) the length of the path from beginning to end. In the case of the above triangle it is about 428.8.
      </p>
      <p>
        .<em>getPointAtLength(r)</em> is, likewise, a method applied to a path, but it accepts a parameter between 0 and 1 which specifies the proportion of the distance from the beginning to the end of the path, at which we would like to find the coordinates of a point. What <em>getPointAtLength</em> returns is actually an SVG virtual point object. Mid, in the above code, has the properties Mid.x=389.8 and Mid.y=89.8. Because SVG Point objects also include a transformMatrix method in their class definition, the manipulation of a path by transform commands will not confuse the <em>getPointAtLength</em> method of a path.
      </p>
      <p>
        If we consider the more general case of an arbitrary path (instead of the simpler case where all components are linear), these two methods can prove even handier. In the following case the path is composed of linear segments except for one portion (which happens to contain the midpoint) which is an elliptic arc.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="553">
        <col width="537" />
        <tbody>
          <tr>
            <td class="caption">
              A path consisting of linear and nonlinear parts.
            </td>
          </tr>
          <tr>
            <td valign="top">
              <code>&lt;path d="M 200 100 350 50 400 100 A 100 30 0 0 1 400 150 z" fill="#fd9"/&gt;</code>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                midpoint is at approx. (439, 115)
              </p>
              <p>
                perimeter of curve is approx. 543.1.
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m13d70995.png" alt="point located halfway around complex path" id="graphics147" height="140" width="302" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The problem here is that computing the length of an elliptic arc (or even the "simpler" problem of the circumference of an ellipse) cannot be done in closed algebraic form since the integral resulting from putting the ellipse in parametric form can only be approximated through infinite series. Both functions <em>getTotalLength</em> and <em>getPointAtLength</em> use fast and reasonably accurate estimates for calculations involving both elliptic arcs and B&eacute;zier curves.
      </p>
      <p>
        We conclude with the following example gives a general method for interrogating any path in an SVG document, and at the same time gives us some insight into the accuracy of the calculations involved.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              Finding midpoints of a selected path.
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg" <br />xmlns:xlink="http://www.w3.org/1999/xlink" &gt;<br />&lt;style type="text/css"&gt;<br /> ellipse,path{stroke:black;stroke-width:1;fill-opacity:0.5;stroke-opacity:1;}<br />&lt;/style&gt;&lt;script&gt;&lt;![CDATA[<br />function bisect(evt){<br />  var B=evt.target<br /> var E=document.getElementById("E");<br />  P=B.getPointAtLength(B.getTotalLength()/2)<br /> E.setAttribute("cx", P.x);<br /> E.setAttribute("cy", P.y);<br /> var C=document.getElementById("coords").nodeValue="("+P.x+","+P.y+")"<br />}<br />]]&gt;&lt;/script&gt;<br />&lt;text x="20" y="22" font-size="18pt"&gt;getPointAtLength&lt;/text&gt;<br />&lt;text id="status" x="300" y="22" font-size="18pt"&gt;status&lt;/text&gt;<br />&lt;text id="coords" x="250" y="42" font-family="helvetica" font-size="12" <br /> fill="darkblue"&gt; &lt;/text&gt;<br />&lt;text x="100" y="40" font-size="12"&gt;Click any path to bisect it.&lt;/text&gt;<br />&lt;path d="M 0 125 C 100 0 200 250 300 125" fill="#afa" onclick="bisect(evt)"/&gt;<br />&lt;path d="M 0 200 C 100 0 200 250 300 200" fill="#faa" onclick="bisect(evt)"/&gt;<br />&lt;path d="M 0 50 C 100 0 200 250 300 50" fill="#aaf" onclick="bisect(evt)"/&gt;<br />&lt;path transform="translate(100,0)" d="M 200,100 350,50 400,100 z" fill="#edf"<br /> onclick="bisect(evt)"/&gt;<br />&lt;path transform="translate(100,60)" d="M 200 100 350 50 400 100 A 100 30 0 0 1 400 150 z"<br /> fill="#fd9" onclick="bisect(evt)"/&gt;<br />&lt;ellipse id="E" cx="-10" cy="10" fill="yellow" rx="6" ry="4"/&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <th>
              Illustration in which second path has been clicked.
            </th>
          </tr>
          <tr>
            <td class="center" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m729c581a.png" alt="Finding midpoints of a selected path" id="graphics148" height="218" width="558" />
            </td>
          </tr>
          <tr>
            <td class="example">
              This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/getPointAtLength.svg">http://srufaculty.sru.edu/david.dailey/svg/getPointAtLength.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        We observe that the green curve should, in fact, be centered at (150,125) instead of the coordinates shown above that are off by a tiny fraction of a percent.
      </p>
      <h4 id="text_methods">
        Various text methods.
      </h4>
      <p>
        A variety of specialized methods exist for &lt;text&gt; objects. Rather than presenting examples of the use of each, we merely excerpt from the W3C's SVG 1.1 recommendation about these methods, and afterward show an example using a few of these to do some interesting work.
      </p>
      <h5>
        getNumberOfChars
      </h5>
      <p>
        Returns the total number of characters to be rendered within the current element. Includes characters which are included via a 'tref' reference.
      </p>
      <h5>
        getComputedTextLength
      </h5>
      <p>
        The total sum of all of the advance values from rendering all of the characters within this element, including the advance value on the glyphs (horizontal or vertical), the effect of properties 'kerning', 'letter-spacing' and 'word-spacing' and adjustments due to attributes dx and dy on 'tspan' elements. For non-rendering environments, the user agent shall make reasonable assumptions about glyph metrics.
      </p>
      <h5>
        getSubStringLength
      </h5>
      <p>
        The total sum of all of the advance values from rendering the specified substring of the characters, including the advance value on the glyphs (horizontal or vertical), the effect of properties 'kerning', 'letter-spacing' and 'word-spacing' and adjustments due to attributes dx and dy on 'tspan' elements. For non-rendering environments, the user agent shall make reasonable assumptions about glyph metrics.
      </p>
      <h5>
        getStartPositionOfChar
      </h5>
      <p>
        Returns the current text position before rendering the character in the user coordinate system for rendering the glyph(s) that correspond to the specified character. The current text position has already taken into account the effects of any inter-character adjustments due to properties 'kerning', 'letter-spacing' and 'word-spacing' and adjustments due to attributes x, y, dx and dy. If multiple consecutive characters are rendered inseparably (e.g., as a single glyph or a sequence of glyphs), then each of the inseparable characters will return the start position for the first glyph.
      </p>
      <h5>
        getEndPositionOfChar
      </h5>
      <p>
        Returns the current text position after rendering the character in the user coordinate system for rendering the glyph(s) that correspond to the specified character. This current text position does not take into account the effects of any inter-character adjustments to prepare for the next character, such as properties 'kerning', 'letter-spacing' and 'word-spacing' and adjustments due to attributes x, y, dx and dy. If multiple consecutive characters are rendered inseparably (e.g., as a single glyph or a sequence of glyphs), then each of the inseparable characters will return the end position for the last glyph.
      </p>
      <h5>
        getExtentOfChar
      </h5>
      <p>
        Returns a tightest rectangle which defines the minimum and maximum X and Y values in the user coordinate system for rendering the glyph(s) that correspond to the specified character. The calculations assume that all glyphs occupy the full standard glyph cell for the font. If multiple consecutive characters are rendered inseparably (e.g., as a single glyph or a sequence of glyphs), then each of the inseparable characters will return the same extent.
      </p>
      <h5>
        getRotationOfChar
      </h5>
      <p>
        Returns the rotation value relative to the current user coordinate system used to render the glyph(s) corresponding to the specified character. If multiple glyph(s) are used to render the given character and the glyphs each have different rotations (e.g., due to text-on-a-path), the user agent shall return an average value (e.g., the rotation angle at the midpoint along the path for all glyphs used to render this character). The rotation value represents the rotation that is supplemental to any rotation due to properties 'glyph-orientation-horizontal' and 'glyph-orientation-vertical'; thus, any glyph rotations due to these properties are not included into the returned rotation value. If multiple consecutive characters are rendered inseparably (e.g., as a single glyph or a sequence of glyphs), then each of the inseparable characters will return the same rotation value.
      </p>
      <h5>
        getCharNumAtPosition
      </h5>
      <p>
        Returns the index of the character whose corresponding glyph cell bounding box contains the specified point. The calculations assume that all glyphs occupy the full standard glyph cell for the font. If no such character exists, a value of -1 is returned. If multiple such characters exist, the character within the element whose glyphs were rendered last (i.e., take into account any reordering such as for bidirectional text) is used. If multiple consecutive characters are rendered inseparably (e.g., as a single glyph or a sequence of glyphs), then the user agent shall allocate an equal percentage of the text advance amount to each of the contributing characters in determining which of the characters is chosen.
      </p>
      <h5>
        selectSubString
      </h5>
      <p>
        Causes the specified substring to be selected just as if the user selected the substring interactively<sup><a class="footnoteanc" href="#footnote53sym" id="footnote53anc">53</a></sup>. 
      </p>
      <p>
        Many of these would appear to be useful in quite specialized circumstances, For example if we wished to do some graphical markup of text which was typeset on a curve, then getRotationOfChar, might come in handy. Following is an example of something which might prove useful in circumstances where we wished to interrogate user-events relative to text typeset on a page.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="340" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Some text handling methods for interrogating user-selected substring.
            </td>
          </tr>
          <tr>
            <th>
              The code
            </th>
            <th>
              explanation
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg" <br />xmlns:xlink="http://www.w3.org/1999/xlink" &gt;<br />&lt;script&gt;&lt;![CDATA[<br />var Root=document.documentElement<br /></code>
</pre>
            </td>
            <td class="annotate">
              The standard beginnings.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function hilite(evt) { <br /> T=evt.target<br /> point=Root.createSVGPoint(); <br />  point.x=evt.clientX <br /> point.y=evt.clientY<br /><br /> s=T.firstChild.nodeValue<br /> p=T.getCharNumAtPosition(point);<br /> <br /> msg=p+":"+s.charAt(p)<br />  m=document.getElementById("m")<br /> m.firstChild.nodeValue=msg<br /> T.selectSubString(p,1)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <pre>
This function (activated by mousemove <br />over text) creates a point object at <br />the mouse position.<br /><br /><br /><br />s &mdash; the string itself<br />p &mdash; the ordinal position <br />of the char closest to the mouse.<br />&mdash;a message containing p and the character <br />at that position<br />&mdash;display msg in document<br />&mdash;select or highlight char closest to mouse<br />
</pre>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>]]&gt;&lt;/script&gt;<br />&lt;text onmousemove="hilite(evt)" font-size="16pt" x="50" <br /> y="20"&gt;getCharNumAtPosition and selectSubString&lt;/text&gt;<br />&lt;text id="status" onmousemove="hilite(evt)" x="75" y="60" <br /> font-size="12pt"&gt;status:&lt;/text&gt;<br />&lt;text id="m" font-family="helvetica" x="150" y="60" <br /> font-size="28pt" fill="red"&gt; &lt;/text&gt;<br />&lt;text onmousemove="hilite(evt)" x="50" y="100" font-size="18pt" <br /> fill="darkblue"&gt;Try moving the mouse over a text object&lt;/text&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
            <td class="annotate">
              Three strings with onmousemove event handlers and one, "m", for displaying results.
            </td>
          </tr>
          <tr>
            <th colspan="2" valign="top">
              Illustration
            </th>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m43b0a19d.png" alt="a letter, within a string, selected by the mouse" id="graphics149" height="111" width="444" />
            </td>
          </tr>
          <tr>
            <td colspan="2" class="example">
              This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/textCursor.svg">http://srufaculty.sru.edu/david.dailey/svg/textCursor.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        It should be noted that the above example works fine in ASV+IE, Chrome, Safari, and Opera, but in Firefox 3.0.8, the characters are properly retrieved at the mouse position, but the text does not appear highlighted.
      </p>
      <h5 id="getCTM">
        getCTM()
      </h5>
      <p>
        We have observed earlier in this book that transformations (scale, rotate, translate, skew) can be applied repeatedly to a given object. Once an object has been transformed by a collection of multiple effects, it can be difficult to determine quite where on (or off) the screen a drawn object has been moved. <em>getCTM</em> is a method of an object which returns the Current Transformation Matrix, a composite matrix representing the cumulative result of each of the simpler transformations. The subject is treated quite thoroughly within the SVG 1.1 specifications, and the reader may wish to find more on it there. Let it suffice for our purposes to say that each of the transform primitives (scale, rotate, translate, skew) can be viewed as the multiplication of a matrix by a collection of vectors, each representing the points making up an object. By combining several transformations, we are in effect concatenating matrix multiplications. The resultant matrix (representing these affine and rotational transformations) ends up being a three-by-three matrix with the last row being the identity row (0 0 1). Effectively, then each such composite transformation can be specified by the six remaining unconstrained cells of this three-by-three matrix. That is what is meant by the Current Transformation Matrix returned by the <em>getCTM</em> method of any drawn object<sup><a class="footnoteanc" href="#footnote54sym" id="footnote54anc">54</a></sup>. 
      </p>
      <p>
        We observed earlier in this chapter, that the <em>getBBox</em> method of an object is not sensitive to, and hence will be misled by the transform attribute being applied to that object. We show how to overcome that problem, with the use of <em>getCTM</em>().
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="620">
        <col width="330" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Use of getCTM to reattach a bounding box to the element that built it.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg" <br />xmlns:xlink="http://www.w3.org/1999/xlink" <br />onload="startup()"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />var xmlns= "http://www.w3.org/2000/svg" <br />var O=document.documentElement<br />var BB<br />var CTM<br /></code>
</pre>
            </td>
            <td class="annotate">
              A standard beginning.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function startup(){<br /> BB=document.getElementById("BB")<br /> TE=document.getElementsByTagName("text")<br /> for (var i=0;i&lt;TE.length;i++){<br /> Ti=TE.item(i)<br /> Ti.setAttribute("onmouseover","draw(evt)")<br /> Ti.setAttribute("onmousedown","snug(evt)")<br /> }<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              We add event handlers to all &lt;text&gt; tags.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function draw(evt){<br /> var O=evt.target<br /> var Box=O.getBBox()<br /> BB.setAttributeNS(null,"x",Box.x)<br /> BB.setAttributeNS(null,"y",Box.y)<br /> BB.setAttributeNS(null,"width",Box.width)<br /> BB.setAttributeNS(null,"height",Box.height)<br /> CTM=O.getCTM()<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              When the mouse passes over a &lt;text&gt;, this function draws the bounding box over the location where the object appears to be (prior to examining its transforms).
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function snug(evt) { <br /> CTM.scale=true<br /> s=CTM.a+" "+CTM.b+" "+CTM.c<br /> s+=" "+CTM.d+" "+CTM.e+" "+CTM.f<br /> s="matrix("+s+")"<br /> BB.setAttributeNS(null,"transform",s)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              When the &lt;text&gt; is actually clicked on, this function takes the six free parameters of the Current Transformation Matrix, builds a new string out of them, and applies the resulting string as a new matrix-transform to the bounding box.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>]]&gt;&lt;/script&gt;<br />&lt;text font-size="16pt" x="50" y="20"<br /> transform="translate(100,0)"&gt;getCTM()&lt;/text&gt;<br /><br />&lt;text id="status" x="75" y="30" font-size="14pt" <br /> transform="rotate(30,90,35)"&gt;tilted&lt;/text&gt;<br /><br />&lt;text x="50" y="60" font-size="18pt" fill="darkblue"<br /> transform="translate(-40,0) scale(1.5) <br /> rotate(10,100,80)"&gt;<br />Move the mouse over text&lt;/text&gt;<br /><br />&lt;rect id="BB" x="-99" y="9" width="50" height="50" <br /> stroke="red" fill="yellow" opacity="0.4"/&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
            <td class="annotate">
              Three &lt;text&gt; objects (each assigned event handlers onload of the document) and a &lt;rect&gt; to serve as a bounding box.
            </td>
          </tr>
          <tr>
            <th colspan="2" valign="top">
              <p>
                Illustration: bounding box <em>before</em> application of getCTM (above)
              </p>
              <p>
                bounding box <em>after</em> application of getCTM (below)
              </p>
            </th>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m2b72723f.png" alt="before application of getCTM: rectangle does not match text" id="graphics150" height="159" width="447" />
            </td>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m246b6bcf.png" alt="after application of getCTM: rectangle bounds text" id="graphics151" height="159" width="447" />
            </td>
          </tr>
          <tr>
            <td colspan="2" class="example">
              This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/getCTM.svg">http://srufaculty.sru.edu/david.dailey/svg/getCTM.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        We can observe from the preceding example that by applying a given CTM to any object, it inherits the cumulative effects of whatever transforms had been applied to the original object.
      </p>
      <p>
        It should probably be mentioned that some authors have reported that the .getCTM method can be unreliable in more complex situations. Some authors have addressed this with the development of custom methods that extend the utility of this particular function. (See http://svg.jibbering.com/svg/2006-12-08.html by way of discussion.)
      </p>
      <h3 id="SMIL_javascript">
        SMIL to JavaScript event passing
      </h3>
      <p>
        In a number of instances we may wish to have scripting and SMIL animation combined in the same document. Sometimes, it may even prove fruitful to have both JavaScript and SMIL based animation in the same document. For example, if certain objects have relatively simple oscillating behavior while others respond dynamically to distances from edges or mouse actions, then we may want to intermingle our varieties of animation.
      </p>
      <p>
        Certain methods exist for instigating JavaScript functions from SMIL events and from activating SMIL animations from JavaScript functions. We conclude this chapter with some explanation and illustration of two such methods that can handle most of our needs in this area. We may use onend (or onbegin) associated with the end of SMIL animation to trigger a JavaScript function. From JavaScript we may use Animation.beginElement() (or endElement()) to start a SMIL animation.
      </p>
      <h4 id="onend">
        onend (onbegin)
      </h4>
      <p>
        Within a SMIL animation the attribute onend="doIt()" will cause the JavaScript function doIt() to be performed as soon as the animation ends. A simple usage:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="361">
        <col width="345" />
        <tbody>
          <tr>
            <td valign="top">
              <pre>
<code>function stuff(evt){<br />  O=evt.target.parentNode<br />  O.setAttribute("fill","red")<br />}<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;ellipse fill="lightgreen" cx="40" cy="100" rx="22" <br />ry="14" stroke="#804" stroke-width="5"&gt;<br />&lt;animate attributeName="cx" dur="3s" <br />onend="stuff(evt)" values="40;400;40"/&gt;</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Here, the ellipse moves back and forth across the screen once horizontally. After completing its mission, the function is activated. The function determines what triggered it (the animation object), finds the parent of that object (the ellipse) and resets the fill pattern of the parent. This particular example, though illustrative of using SMIL to activate JavaScript, could, as seen in the chapter on SMIL, be performed without JavaScript using the &lt;set&gt; element of SMIL.
      </p>
      <p>
        A small note about the use of onend is in order. If we attempt to build an animation dynamically using document.createElementNS(xmlns,"animate"), then attempts to create the onend attribute for that object seem to fail in ASV+IE. It appears to be a bug in the browser.
      </p>
      <h4>
        Additional notes
      </h4>
      <p>
        Two other things worth mentioning in this context: <em>onrepeat</em> can be used to with a counter to allow a function to be triggered after an animation has been repeated a certain number of times. This could be useful in allowing the animation to keep going, but to nevertheless spawn a new activity before it has actually ended.
      </p>
      <p>
        Also, one may use script to synthesize events such as clicks on SVG elements, hence triggering associated animations. I'm hoping that a reader may provide a useful example of such a use.
      </p>
      <h4 id="beginElement">
        beginElement() (and endElement())
      </h4>
      <p>
        The beginElement() function in SVG/JavaScript is a method applied to an animation object (&lt;animate&gt;, &lt;animateTransform&gt;, &lt;animateMotion&gt;, etc.). It can be used by a script to activate a SMIL animation. A simple usage is shown here.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="361">
        <col width="345" />
        <tbody>
          <tr>
            <td valign="top">
              <pre>
<code>function start(id){<br /> D.getElementById(id).beginElement()<br />}<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;ellipse fill="lightpink" onclick="start('A')" cx="40" cy="140" rx="22" ry="14"&gt;<br /> &lt;animate id="A" attributeName="cx" dur="3s" begin="indefinite" values="40;400;40"/&gt;<br />&lt;/ellipse&gt;</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Note that the begin attribute of the animate tag has a value of "indefinite." This is necessary to allow the script to be able to determine the time at which the animation begins.
      </p>
      <p>
        Likewise if an animation tag A contains the attribute end="indefinite" then A.endElement() will succeed in terminating that animation.
      </p>
      <p>
        Combining <em>beginElement()</em> together in a script with the use of the onend attribute of a SMIL animation can yield some worthwhile results. In the following, we allow objects (&lt;g&gt; tags) to move across the screen following SMIL animation. When the animation is complete (onend) we trigger a JavaScript function which rewrites the text inside the animated group (adding one to a counter inside each object). The JavaScript then restarts the animation, apparently seamlessly.
      </p>
      <p>
        In the example below, we allow the moving objects to follow an oscillating B&eacute;zier curve, which is itself animated. The process of doing this animation with JavaScript rather than SMIL would be quite painful, hence strongly motivating this use of SMIL.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="352" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Allowing uniquely numbered ovals to march across a B&eacute;zier curve.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg" <br /> xmlns:xlink="http://www.w3.org/1999/xlink" <br /> onload="startup(evt)"&gt;<br />&lt;script&gt;&lt;![CDATA[<br />xmlns="http://www.w3.org/2000/svg"<br />xlinkns="http://www.w3.org/1999/xlink"<br />var D=document; var count=3<br /></code>
</pre>
            </td>
            <td class="annotate">
              The standard beginning with a shortcut name for document and a counter.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function startup(evt){<br /> B=D.getElementById("B")<br /> D.getElementById("A").beginElement()<br /> var t=2000<br /> window.setTimeout("B.beginElement()",t)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              We start the animation 'A' and wait 2 seconds to start the animation 'B'.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function rebuild(evt){<br />  var Q=evt.target<br /> T=document.getElementById(Q.id+"T")<br />  T.firstChild.nodeValue=count++<br /> Q.beginElement();<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              Whenever either animation ends, we figure out which one it is. We then find the &lt;text&gt; tag inside its group and rewrite the text with the current value of the counter. We then restart that particular animation.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>]]&gt;<br />&lt;/script&gt;<br />&lt;rect x="0" y="0" height="100%" <br /> id="Canvas" width="100%" fill="#147"/&gt;<br />&lt;path id="P" d="M 0 200 C 100 0 200 400 300 200" <br /> fill="none" stroke="#804" stroke-width="3"&gt;<br />&lt;animate attributeName="d" dur="1s" <br /> repeatCount="indefinite"<br /> values=" M -10 200 C 150 100 300 300 450 200;<br /> M -10 200 C 150 300 300 100 450 200;<br /> M -10 200 C 150 100 300 300 450 200"/&gt;<br />&lt;/path&gt;<br /></code>
</pre>
            </td>
            <td class="annotate">
              A B&eacute;zier curve is defined as a path for the animation to follow with its &lt;mpath&gt;. The B&eacute;zier curve is itself animated so as to oscillate.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;g&gt;<br /> &lt;animateMotion dur="4s" id="A" rotate="auto" <br /> begin="indefinite" onend="rebuild(evt)"&gt;<br /> &lt;mpath xlink:href="#P"/&gt;&lt;/animateMotion&gt;<br /> &lt;ellipse fill="yellow" cx="0" cy="0" rx="22" <br /> ry="14" stroke="#804" stroke-width="5"/&gt;<br /> &lt;text id="AT" x="-10" y="7" font-size="12pt"&gt;1&lt;/text&gt;<br />&lt;/g&gt;<br />&lt;g opacity="0"&gt;<br /> &lt;set attributeName="opacity" to="1" begin="B.begin" /&gt;<br /> &lt;set attributeName="opacity" to="0" begin="B.end" /&gt;<br /> &lt;animateMotion dur="3.3s" id="B" rotate="auto" <br /> begin="indefinite" onend="rebuild(evt)"&gt;<br /> &lt;mpath xlink:href="#P"/&gt;<br /> &lt;ellipse fill="cyan" cx="0" cy="0" rx="22" ry="14" <br /> stroke="#804" stroke-width="5"/&gt;<br /> &lt;text id="BT" x="-10" y="7" font-size="12pt"&gt;2&lt;/text&gt;<br />&lt;/g&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                Two groups are defined, each containing an ellipse, a text, and an animateMotion allowing the group to follow our oscillating path #P (as defined above). Whenever either animation reaches its end state, it triggers the rebuild function, which ultimately restarts the animation.
              </p>
              <p>
                The second group has its opacity assigned and removed to avoid its phantom appearance in the upper left of the screen at those moments following the end of its animation but preceding its restart.
              </p>
            </td>
          </tr>
          <tr>
            <th colspan="2" valign="top">
              Illustration
            </th>
          </tr>
          <tr>
            <td colspan="2" class="center" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m42da7b56.png" alt="two numbered ellipses at positions along a bezier curve" id="graphics152" height="195" width="452" />
            </td>
          </tr>
          <tr>
            <td colspan="2" class="example">
              This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/bezierovals.svg">http://srufaculty.sru.edu/david.dailey/svg/bezierovals.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <h3 id="pauseAnimations">
        pauseAnimations (and unpauseAnimations)
      </h3>
      <p>
        A JavaScript call to document.documentElement.pauseAnimations() will stop all SMIL animations within an SVG document, freezing objects at their current position. Likewise document.documentElement.unpauseAnimations() resumes those SMIL animations from whatever position they were paused. One technical note is that the Adobe SVG viewer in Internet Explorer sometimes seems to throw an uncaught exception causing the browser to crash occasionally when using these methods.
      </p>
      <h3 id="mixSMIL">
        Mixing SMIL and scripted animation
      </h3>This section (recommended by Erik Dahlstrom) needs still to be written. In the meantime, I point to a few examples of code that does this:
      <ul>
        <li>
          <a href="http://srufaculty.sru.edu/david.dailey/svg/triBraids4.svg">Using script to build a triangular mesh and animating it with SMIL</a>
        </li>
        <li>
          <a href="http://srufaculty.sru.edu/david.dailey/svg/tribraids9.svg">Using SMIL to traverse a Bezier curve, and when done restarting at a new location randomly chosen through script</a>
        </li>
        <li>
          <a href="http://srufaculty.sru.edu/david.dailey/svg/flicker.svg">A wild combination of script, clipPaths and SMIL</a>
        </li>
        <li>
          <a href="http://srufaculty.sru.edu/david.dailey/svg/swatch3.svg">An example which got me a trip to Apple's headquarters, courtesy of Harvard University</a>
        </li>
        <li>
          <a href="http://srufaculty.sru.edu/david.dailey/svg/newstuff/tilesA.svg">Crawling nondeterministic triangles with SMIL-ing gradients</a>
        </li>
      </ul>
      <h2 id="SVG_HTML">
        Chapter VI - SVG and HTML
      </h2>
      <h3 id="why_html">
        The rationale: why HTML is useful for SVG.
      </h3>
      <p>
        With graphics, text, hyperlinks, JavaScript, SMIL and DOM available to SVG, and with SVG accessible to the most important browsers, one could ask "who needs HTML?" Indeed the majority of SVG documents on the web at the current time are probably implemented without any HTML.
      </p>
      <p>
        From the viewpoint of the SVG developer, what does HTML offer that SVG can benefit from? Two categories of explanation come to mind: inertia and functionality.
      </p>
      <h4 id="inertia">
        Inertia
      </h4>
      <p>
        HTML is big and ubiquitous. It has mammoth inertia<sup><a class="footnoteanc" href="#footnote55sym" id="footnote55anc">55</a></sup>. With its large presence, HTML brings several important things:
      </p>
      <h5>
        1. Browser support
      </h5>
      <p>
        A good browser these days pretty much has to support JavaScript, CSS, and DOM<sup><a class="footnoteanc" href="#footnote56sym" id="footnote56anc">56</a></sup>. This all works well to SVG's advantage. It means that most people use fairly mature browsers that handle almost all of what a coder can throw at it. Browser inconsistencies have become the exception rather than the rule in recent years. Perhaps the main contribution of HTML to the future of SVG is that nearly everyone with a computer has a browser, and to the extent that those browsers can see SVG so can all those people.
      </p>
      <h5>
        2. Audience expectation
      </h5>
      <p>
        The de facto user interface "standards" that people have come to expect when they traverse the web will continue to influence web interface in the worlds beyond HTML for many years. The use of single clicks instead of double clicks, the notion that the left side of a page might contain navigational assistance of some form, the way that &lt;select&gt;s and other objects respond to onmouseover and onmousedown &mdash; these are all examples of the sorts of interface that audiences expect to interact with. Like the QWERTY keyboard, the consumer has come to expect keys to be in certain places, and even if, by sophisticated perceptual-motor engineering work, we may design a better configuration of the keys of a keyboard, this does not mean that better will happen. The <em>expected</em> behavior of certain HTML form elements (widgets) has been stumbled into through historical accident rather than through careful human factors research. Sometimes, it seems to have lacked even the consistent architecture which we might expect of our highways or schools. The SVG designer may be tempted to reinvent some of this baggage with inspired awareness of the shortcomings of business as usual, but does so at some peril of being washed ashore by the substantial momentum of the status quo.
      </p>
      <h5>
        3. Coding habits
      </h5>
      <p>
        Like the behavioral and cognitive habits of the audience, the habits of the developer will shape any table at which both SVG and HTML hope to sit. HTML/JavaScript coders tend to like (despite its absence from W3C standards) the innerHTML property of screen objects. There is a momentum in place (from document.write to O.getElementById(id).innerHTML) for developers to view content as a string of characters. The DOM2 methods have been available for some years in HTML through ECMAScript, though a random perusal of typical web pages will likely reveal few authors that are actually using them. Google reports that over half of the billion web pages they have surveyed use JavaScript<sup><a class="footnoteanc" href="#footnote57sym" id="footnote57anc">57</a></sup> but their study does not go beyond the &lt;script&gt; tag itself and its attributes. The typical JavaScript is relatively short (under a hundred lines in most cases) and is often used less to customize the Graphical User Interface (GUI) or to rebuild DOM than to process form information and other user data. The purposes and nature, thus, of coding in HTML may be substantially different than in SVG.
      </p>
      <h5>
        4. JavaScript expertise
      </h5>
      <p>
        While the coding habits of HTML web developers may be slightly askew from the job description for SVG developers, the applicant pool is enormous. As argued in Appendix II, because of the web, there have probably been more programs written in JavaScript than in all other languages combined. Adopting JavaScript/ECMAScript as a scripting companion to SVG instantly certifies (with some degree of dubiousness to the "diploma") programmers numbered in the millions. Compare this to the thousands of programmers with expertise in .Net/XAML or in Lingo/ActionScript or in OpenGL or in VML/JavaScript or any of the other approaches to dynamic "content-rich web browsing" and suddenly SVG/JavaScript looks not only sensible, but canonical.
      </p>
      <h5>
        5. Content
      </h5>
      <p>
        Let us recall, once more, how large and useful the web is. Two anecdotes are worthy of note, each taking place at different institutions of higher learning. At one, about twenty years ago and before that institution had Arpanet/Internet connectivity, I gave a talk hosted by its library about "Libraries of the Future." In it I talked about the vast "web" of information and presented diagrams of interconnected, graph-theoretic, multi-dimensional repositories of huge amounts of information available at the desktop, and being "surfed" by bleary-eyed adolescents with tongues hanging out. In 1986 these concepts were viewed with skepticism by most in the library community, and as heresy by others. In 1996 at another institution, working on a particularly odious task, I had occasion to need to know the name of a local mountain where prominent authors had sometimes met to discuss their work and gain inspiration. I had visited the place but could not remember the names of the authors or the mountain. The college was on holiday so I thought I would call the library's reference desk with the question. The reference librarian on duty said it had been a slow day and she would work on it and get back with me. An hour went by and I reached a pause in my other work, so I thought "let me see what I can find." In fifteen minutes of poking around on the web in the pre-Google world, I found that it was Hawthorne and Melville (along with Oliver Wendell Holmes) who met on Monument Mountain. Two hours later the library called back having finally found the same information in a reference book. No wonder those 20<sup>th</sup> century librarians thought those ideas were heretical.
      </p>
      <p>
        Nowadays much of people's astonishment about how big the web is, and some of their skepticism about how authoritative it can be, has started to dwindle. Most folks realize it is an enormous resource. The search engines have realized this for over a decade now. If we think of the web's content as a backdrop for our interface designs then the natural landscape in which we craft our shelters and way stations would inspire not only Melville but Frank Lloyd Wright as well. With AJAX providing a conduit between client and server, SVG with JavaScript has access to the entire watermelon, seeds and rind included. The SVG developer may need to continue parsing HTML that is not well-formed (according to XML rules) in order to digest the sometimes healthy content inside.
      </p>
      <h4 id="functionality">
        Functionality
      </h4>
      <p>
        In terms of HTML's functionality, it comes with a historical mindset that is missing in SVG &mdash; the notion that the browser will decide how to manage content on the screen. SVG elements must be positioned (albeit relative to the visible area) by the author. Historically one could argue that the development of styles and DOM scripting in HTML have both allowed, and somewhat through zeitgeist, necessitated, authors to take more control of layout of their elements. And while CSS and its advocates have pushed against the use of the HTML table as a way of laying out content, there is a generation of HTML authors who learned their fledgling HTML who author by hand and who use the &lt;table&gt; as a way to position elements on the web page.
      </p>
      <p>
        SVG has not had the sophistication of control of layout that the HTML table brings (with its cols, colspan, and rowspan features) nor of the apparently more popular, but less powerful<sup><a class="footnoteanc" href="#footnote58sym" id="footnote58anc">58</a></sup> use of CSS for the same thing.
      </p>
      <p>
        The ways that SVG typically interleaves with HTML offers little opportunity for us to leverage whatever power tables could offer, since multiple &lt;embed&gt;, &lt;object&gt;, and &lt;frame&gt; elements containing SVG will prove a bit bulky and slow to be scattering numerously throughout our web pages.
      </p>
      <p>
        Apparently, in recognition of this shortcoming, in mid 2008, the SVG Working Group began working on a set of modules to extend the specification, including one module specifically charged with addressing layout issues. It has recently (spring 2009) released notes for public comment on the subject. It appears to offer a dramatic extension of SVG's layout capabilities through customized extensions of CSS. Cameron McCormack, one of the co-chairs of the working group, has written that it is comprised of a set of rectilinear constructs (like CSS and HTML tables). The topic is revisited briefly in <a href="#SVG_futures">Chapter Seven, Directions for Development</a>.
      </p>
      <p>
        So it may seem that SVG is not well-poised for borrowing from HTML's layout flexibility. As such, what other functions does HTML perform well? Much of its utility, at least for SVG, stems from its form elements: &lt;input type="text"&gt;, &lt;input type="radio"&gt;, &lt;input type="checkbox"&gt;, &lt;input type="password"&gt;, &lt;input type="file"&gt;, &lt;select&gt; and &lt;textarea&gt;. Some of these like &lt;radio&gt; buttons are not profoundly difficult to make in SVG, nor are they crucial in most of our web development. But in HTML, all these widgets are there already. We don't have to build them. Some like the &lt;select&gt; object usually prove non-trivial for my students when I given the task to them of building them in SVG. Others like &lt;textarea&gt; and &lt;input type=file&gt; end up being major programming projects, with icebergs hidden here and there only partially exposed. The final chapter of this book mentions another approach to the desired interactivity that is on the horizon: Xforms. This approach may give us similar functionality without having to rely on HTML form elements with their default appearance and behavior.
      </p>
      <p>
        For now, we will discuss the sorts of code involved in building some of the common HTML widgets in SVG. This will also all serve to expand the reader's familiarity with the relationship between scripting and SVG to solve commonly encountered types of problems.
      </p>
      <h5 id="radio">
        1. &lt;input type="radio"&gt; and &lt;input type="checkbox"&gt;
      </h5>
      <p>
        Code to make text and graphics perform like radio buttons will be quite similar to that for checkboxes: click events change the graphic of the clicked object, and either the others or not.
      </p>
      <p>
        To make it so the user sees something that looks and acts like a collection of radio buttons is not too difficult: a series of carefully positioned ellipses next to some text. When an ellipse is clicked, its fill pattern changes. The script involved is relatively simple, and in truth, radio buttons are of little use in HTML without some scripting. However the amount of markup we ask the author to do in creating radio buttons in SVG could be rather lengthy &mdash; an implementation I have shown to my students involving little scripting but a lot of markup looks something like this for one radio button:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;g id="radio"&gt;<br /> &lt;g id="D1" onclick="choose('D1')" visibility="inherit"&gt;<br /> &lt;g id="G" style="visibility:inherit"&gt;<br /> &lt;rect x="90" y="40" height="20" width="20" fill="white" <br />style="visibility:visible"/&gt;<br /> &lt;ellipse cx="100" cy="50" rx="5" ry="5" id="B1"<br /> stroke="black" fill="black" style="visibility:visible"/&gt;<br /> &lt;ellipse cx="101" cy="51" rx="5" ry="5" id="R1"<br /> stroke="black" fill="white" style="visibility:visible"/&gt;<br /> &lt;ellipse cx="101" cy="51" rx="2" ry="2"<br /> stroke="black" style="visibility:inherit" fill="black"/&gt;<br />&lt;/g&gt;<br /> &lt;text x="115" y="55" font-size="12" visibility="visible" <br /> fill="black"&gt;happy<br /> &lt;/g&gt;<br /> [...more groups like the above to make more radio buttons]<br />&lt;/g&gt;<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Such an approach also requires an author to manage a lot of screen coordinates. We might instead prefer our authors to be able to simply declare something considerably more terse like
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;g id="radio"&gt;<br /> &lt;text&gt;happy&lt;/text&gt;<br /> &lt;text&gt;sad&lt;/text&gt;<br /> &lt;text&gt;mad&lt;/text&gt;<br /> &lt;text&gt;glad&lt;/text&gt;<br />&lt;/g&gt;<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        and then have that converted by script into an appearance that is as we wish it to be. The scripts in the following page accomplish exactly that role.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="316" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              A script creating radio buttons from simple text tags.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br /> xmlns:xlink="http://www.w3.org/1999/xlink"<br /> width="100%" height="100%"<br /> onload="startup(evt)"&gt;<br />&lt;style type="text/css"&gt;<br /> text{fill:black;font-size:14;}<br /> ellipse{stroke:black;}<br />&lt;/style&gt;<br />&lt;script&gt;<br />&lt;![CDATA[<br /></code>
</pre>
            </td>
            <td>
              The standard beginning. A style to simplify the markup of the text and radio circles.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>var D, Root<br />var Dots=new Array<br />var v="visibility"<br />function startup(evt){<br /> D=document<br /> Root=D.documentElement<br /> radio=D.getElementById("radio") <br /> xpos=100<br /> ypos=45<br /> yoff=25<br /> makeRadios(radio,xpos,ypos,yoff)<br />}<br /></code>
</pre>
            </td>
            <td>
              <p>
                An array for the innermost circles, the visibility of which will be changed.
              </p>
              <p>
                We establish the position of the radio group and the vertical offset between the items.
              </p>
              <p>
                We send the author's group of texts together with positioning to a function.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function makeRadios(O,x,y,yo){<br /> var C = O.childNodes;<br /> G=D.getElementById("G") <br /> for (var i = 0; i &lt; C.length; i++) {<br /> var CI=C.item(i)<br /> if (CI.nodeName!="text") continue<br /> var NG=G.cloneNode(true)<br /> s="translate("+x+","+(y+yo*i-5)+")"<br /> NG.setAttribute("transform",s)<br /> E=NG.getElementsByTagName("circle")<br /> var dot=E.item(2)<br /> dot.setAttribute(v,"hidden")<br /> Dots.push(dot)<br /> O.appendChild(NG)<br /> O.removeChild(CI)<br /> NG.appendChild(CI)<br /> CI.setAttribute("x",15)<br /> CI.setAttribute("y",5)<br /> NG.setAttribute("onclick","choose(evt)")<br /> }<br />}<br /></code>
</pre>
            </td>
            <td>
              <p>
                This function does all the work.
              </p>
              <p>
                Each &lt;text&gt; node is found and given a radio button (a clone of G).
              </p>
              <p>
                The radio graphic is then positioned.
              </p>
              <p>
                The dot inside each graphic is made invisible to start with.
              </p>
              <p>
                The text is removed from the top group and added into its own radio group along with the graphic.
              </p>
              <p>
                The text is then positioned.
              </p>
              <p>
                Each radio group is made clickable.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function choose(evt){<br /> for (i in Dots) <br /> Dots[i].setAttribute(v,"hidden")<br /> chosen=evt.currentTarget<br /> E=chosen.getElementsByTagName("circle")<br /> E.item(2).setAttribute(v,"visible")<br />}<br />]]&gt;<br /><br /></code>
</pre>
            </td>
            <td>
              <p>
                &nbsp;
              </p>
              <p>
                All dots are hidden.
              </p>
              <p>
                The chosen object has its dot made visible.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;defs&gt;<br />&lt;g id="G" onclick="choose(evt)"&gt;<br /> &lt;rect y="-10" x="-10" height="20" <br /> width="50" fill="white"/&gt;<br /> &lt;circle cx="1" cy="1" r="5" <br /> fill="black"/&gt;<br /> &lt;circle r="5" fill="white"/&gt;<br /> &lt;circle r="2" fill="black"/&gt;<br />&lt;/g&gt;<br />&lt;/defs&gt;<br /></code>
</pre>
            </td>
            <td>
              The prototype for the radio graphic (cloned and appended to each text item below).
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;g id="radio"&gt;<br /> &lt;text&gt;happy&lt;/text&gt;<br /> &lt;text&gt;sad&lt;/text&gt;<br /> &lt;text&gt;mad&lt;/text&gt;<br /> &lt;text&gt;glad&lt;/text&gt;<br />&lt;/g&gt;<br /><br /></code>
</pre>
            </td>
            <td>
              <p>
                The only markup that the "author" needs to include for a radio consisting of n buttons (in this case n=4).
              </p>
            </td>
          </tr>
          <tr>
            <th colspan="2" valign="top">
              Illustration
            </th>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/1f8f99a9.png" alt="four labeled circles appearing and behaving like HTML radio buttons" id="graphics153" height="108" width="222" />
            </td>
          </tr>
          <tr>
            <td colspan="2" class="example">
              This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/radiobuttons.svg">http://srufaculty.sru.edu/david.dailey/svg/radiobuttons.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        We may note in the above, that both the text and the graphic respond to the <em>onmousedown</em> event, rather like using the &lt;label&gt; tag in conjunction with radio buttons (see Appendix I), perhaps alleviating some of the difficulty in clicking on so small a target predicted by Fitts' Law<sup><a class="footnoteanc" href="#footnote59sym" id="footnote59anc">59</a></sup>. 
      </p>
      <p>
        Further discussion of separating the behavior of widgets from their presentation will be found in the final chapter of this text, where some promising approaches to this objective are discussed.
      </p>
      <h5 id="select">
        2. &lt;select&gt;
      </h5>
      <p>
        A &lt;select&gt; object in HTML is a drop down list of text strings, each string affiliated with some value which can then be accessed by JavaScript. Additionally, the &lt;select&gt; has behavior associated with <em>onclick</em>&mdash; the list becomes visible; with <em>onmouseover</em> &mdash; any item on the list becomes highlighted; and with <em>onmouseup</em> &mdash; an item which receives mouseup is selected.
      </p>
      <p>
        To build a script of this sort, we may begin with the prototype, id="G", of a group of buttons (a text and rect combo containing no white space between elements) such as
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;g id="G" onclick="hide('visible')"<br />onmouseover="hilight(evt)"<br />onmouseout="hilight(evt)"&gt;&lt;rect opacity="0.2"<br />stroke="black"/&gt;&lt;text fill="black" x="20" font-size="18"<br />font-family="garamond"<br />pointer-events="none"/&gt;&lt;/g&gt;
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        We will need an array of strings from which to build the select options:
      </p><code class="line">var Bs=new Array("select","rebuild","reconnect","retort","refuel","refire")</code>
      <p>
        The first item of the array Bs is special since it will serve as the selection heading, or title of the drop down. All items other than it will be invisible to begin with and will be given new mousedown event handlers. The first item should be able to toggle the visibility of the others. Then, we make a script (<em>oneB</em>) that clones several of the above G's and populates the &lt;text&gt; nodes with our strings and assigns to each cloned button (other than the first) a new event handler (for now, we've just stubbed in an alert), and a new color (chosen modularly) from an array C of colors (say C=new Array("grey", "red", "blue"); ) to allow the designer to have some chromatic flexibility:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
function oneB(i,C){<br /> var G=document.getElementById("G")<br /> var g=G.cloneNode(true)<br />  Bi[i]=g<br />  var r=g.firstChild<br /> var t=r.nextSibling<br />  tv=document.createTextNode(Bs[i]);<br /> g.setAttribute("id","b"+i)<br /> if (i!=0) {<br />  g.setAttribute("visibility","hidden")<br />  g.setAttribute("onclick","alert('"+Bs[i]+"')")<br /> }<br />  t.setAttribute("y",i*barheight+15)<br /> t.appendChild(tv)<br />  r.setAttribute("y", i*barheight);<br />  r.setAttribute("width",bwidth)<br /> r.setAttribute("height", barheight);<br /> r.setAttribute("fill", C[i%C.length]);<br /> document.documentElement.appendChild(g)<br />}<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Then we need to define the function <em>hilight</em> as referred to by the onmouseover and onmouseout handlers of G (the clone prototype) to give each button a rollover effect such that its appearance will change (color intensifies and text changes from black to white) as the mouse moves over it.
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
function hilight(evt){<br />  var r=evt.currentTarget.firstChild<br /> var t=r.nextSibling<br />  if(evt.type=="mouseover") {<br />  r.setAttribute("opacity",.6)<br /> t.setAttribute("fill","white")<br /> }<br />  else {<br /> r.setAttribute("opacity",.2)<br /> t.setAttribute("fill","black")<br /> }<br />}<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Lastly a small function to remove visibility from all items in the submenu should be added so that removing focus from the selection will "fold up" all the open objects. I will assume the reader can imagine such a function. We might also wish to have a rectangle bounding the selections to give some visual identity to the collection.
      </p>
      <p>
        The resultant "select-like-object" will appear like this
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="280" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Appearance of a select-like-object in SVG
            </td>
          </tr>
          <tr>
            <th>
              Before activation
            </th>
            <th>
              After activation and mouse movement
            </th>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m4d2b6b9d.png" alt="before activation: one rectangle" id="graphics154" height="154" width="127" />
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/12af3135.png" alt="after activation: several rectangles" id="graphics155" height="154" width="127" />
            </td>
          </tr>
          <tr>
            <td colspan="2" class="example">
              This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/select.svg">http://srufaculty.sru.edu/david.dailey/svg/select.svg</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        It would be easy to add in an associative array which affiliates option names with function names so that instead of alerts appearing, functions would be launched. JavaScript's <em>eval</em> function makes such work exceptionally easy (see Appendix II).
      </p>
      <h5>
        3. &lt;input type="text"&gt; and &lt;input type="password"&gt; &lt;textarea&gt;
      </h5>
      <p>
        Despite the numerous methods for dealing with text in SVG, including such things as wrapping text to a curve and extensive filter effects, the handling of text input from users is, as yet, a bit medieval<sup><a class="footnoteanc" href="#footnote60sym" id="footnote60anc">60</a></sup>. 
      </p>
      <p>
        The next version (1.2) of SVG, when implemented (probably in a few years) will give us access to text flow within shapes, as well as to an editable text object having much of the behavior we might expect. In the meantime we face the following problems with scripting text-management.
      </p>
      <p>
        As of the current writing, only Opera (9.5 or higher) implements the SVG &lt;textArea&gt; object, and also offers an "edittable" attribute on &lt;text&gt;. Some of the other browsers seem to be starting with implementations of SVG1.2 which has recently moved to "candidate recommendation" status.
      </p>
      <ol>
        <li>Different browsers handle keystroke events differently;
        </li>
        <li>Different browsers map keys to browser responses differently; and
        </li>
        <li>The number of types of interactions users expect to have with text is large.
        </li>
      </ol>
      <p>
        Among the behaviors that we expect of text regions:
      </p>
      <ol>
        <li>the value of successive keystrokes are concatenated into a large string;
        </li>
        <li>when the shift key and another key are held down at the same time, we get an uppercase version of the second key;
        </li>
        <li>when the return key is hit we get a carriage return line-feed sequence;
        </li>
        <li>words typed at the end of lines should be wrapped onto the following line;
        </li>
        <li>when the backspace key is hit we remove the character before the cursor;
        </li>
        <li>when arrow keys are used the cursor is moved back, left, up or down as appropriate;
        </li>
        <li>mouse clicks in the text region should reposition the cursor;
        </li>
        <li>text when dragged over should become selected and highlighted;
        </li>
        <li>selected text should be copyable or deletable.
        </li>
      </ol>
      <p>
        The list of assumptions we make about "simple word processors" is fairly large as anyone who worked with computers in the days before WYSIWIG can most likely remember from the days of line-editors. Absent an editable text object in SVG1.1, all of these behaviors should be implemented if the user is to feel at home. Regrettably, all of these behaviors must be scripted with JavaScript. As of this writing (early 2007), Andreas Neumann and colleagues<sup><a class="footnoteanc" href="#footnote61sym" id="footnote61anc">61</a></sup> at the Institute of Cartography of the Swiss Federal Institute of Technology have probably made the most progress with SVG text objects, but have yet to handle a handful of small but nasty little issues. Their code, for text objects, including some functions shared across projects, is well more than 1000 lines of JavaScript at present.
      </p>
      <p>
        A much less ambitious presentation is made below in hopes of illustrating both some of the complexities and some of the keystroke handling methods and issue
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="328" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Code providing minimal functionality for a textarea-like-object
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"<br /> xmlns:xlink="http://www.w3.org/1999/xlink"<br />width="100%" height="100%"<br />onload="startup(evt)"&gt;<br />&lt;script&gt;<br />&lt;![CDATA[<br />var xmlns="http://www.w3.org/2000/svg"<br />var D=document<br />var Root=D.documentElement<br /></code>
</pre>
            </td>
            <td class="annotate">
              Standard beginnings
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>var s="" <br />var TArea<br />function startup(evt) {<br /> E=D.getElementById("E");<br /> Root.addEventListener("keypress", <br /> function(evt){keyP(evt)}, false); <br /> TArea=D.getElementById("TArea")<br /> fsize=E.getAttribute("font-size")<br /> fsize=fsize.substring(0,2)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                E is the &lt;text&gt; that will hold the content.
              </p>
              <p>
                In order for FF and Opera to listen to "keypress" it is assigned this way rather than through the more obvious setAttribute.
              </p>
              <p>
                TArea is the rectangle that will constrain the textflow
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function keyP(evt){<br /> if (evt.keyCode) var key= evt.keyCode<br /> else var key = evt.charCode<br /> var i = String.fromCharCode(key)<br /> if (key==8||key==46){<br /> s=s.substring(0,s.length-1)} <br /> else if (key==13) {s="";E=newline(s,E)}<br /> else {s+=i}<br /> margin=TArea.getBBox().width<br /> E.firstChild.nodeValue=s<br /> stringwidth=E.getBBox().width<br /> if (stringwidth&gt;margin - 50) {<br /> var W=s.split(" ")<br /> s=W.pop()<br /> E.firstChild.nodeValue=W.join(" ")<br /> E=newline(s,E)<br /> }<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                Opera 9 uses keyCode rather than charCode (yielding some ambiguous mapping of keys to system events). We take ASCII codes and convert back to characters.
              </p>
              <p>
                The backspace key is ASCII 8 in some systems ASCII 46 in others.
              </p>
              <p>
                Return key is ASCII 13. Add a new line.
              </p>
              <p>
                We append a character and see if the bounding box of the associated text is too large. If so we add a newline by removing the last word from the present line and shipping it to the newline function.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function newline(s,O){<br /> var NL = O.cloneNode(false); <br /> ypose=NL.getAttribute("y")<br /> NL.setAttribute("y",eval(ypose)+fsize*2.2); <br /> tv=D.createTextNode(s);<br /> NL.appendChild(tv)<br /> Root.appendChild(NL);<br /> return NL<br />}<br />]]&gt;<br /><br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                This function is a bit tricky. It clones the present line, changes its content to whatever word spilled over from the previous line and appends the newly cloned line to Root.
              </p>
              <p>
                The clone now becomes the active cell to receive new keystrokes.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;rect x="0" y="0" width="100%" height="100%" <br /> fill="#fff"/&gt;<br />&lt;rect id="TArea" x="20px" y="30px" fill="#eed"<br /> onclick="E.firstChild.nodeValue='|'"<br /> width="300px" height="250px"/&gt;<br />&lt;text x="80" y="25" font-family="impact" <br /> font-size="16pt"&gt;Click then type&lt;/text&gt;<br />&lt;text id="E" x="40" y="60" font-family="garamond" <br /> font-size="12pt"&gt; &lt;/text&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
            <td class="annotate">
              The "TArea" &lt;rect&gt; will provide the bounding box for the flow of text. When clicked upon, it is given the appearance of a cursor.
            </td>
          </tr>
        </tbody>
      </table>
      <table border="1" cellpadding="7" cellspacing="0">
        <tbody>
          <tr>
            <th valign="top">
              Status of above code in three browsers
            </th>
          </tr>
          <tr>
            <th valign="top">
              <p>
                <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/5b41ca99.png" alt="Text typed into ASV+IE showing few problems" id="graphics156" /> <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m2614193e.png" alt="Text typed into FF showing problems with backspace, apostrophe and line wrap" id="graphics157" /> <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/548bb6eb.png" alt="Text typed into Opera showing several problems with special browser-defined keys" id="graphics158" />
              </p>
            </th>
          </tr>
        </tbody>
      </table>
      <p>
        Of the stated objectives a) through i) above, the code presented above succeeds only partially at fulfilling a) through d) in ASV+IE and Firefox, only partially handles backspace (not enabling backspace to travel across line breaks) and fails even to perform a) for some characters in Opera. It should be mentioned however, that Opera has been quick to implement methods recommended from SVG 1.2 including the text "editable" attribute and the more advance &lt;textArea&gt; tag, making these apparent problems solvable with more modern methods, which will, presumably, be implemented soon in other browsers. In the meantime, consistent cross-browser handling of text remains a concern.
      </p>
      <h5 id="file">
        4. &lt;input type="file"&gt;
      </h5>
      <p>
        In the W3C's working draft for SVG1.2, section 17.9 covers the file upload capability, citing that
      </p>
      <blockquote>
        <p>
          "It is desirable for Web applications to have the ability to manipulate as wide as possible a range of user input, including files that a user may wish to upload to a remote server or manipulate inside a rich application. This interface provides application writers with the means to trigger a file selection prompt with which the user can select one or more files. Unlike the file upload forms control available to HTML, this API can be used for more than simply inserting a file into the content of a form being submitted but also allows client-side manipulation of the content, for instance to display an image or parse an XML document. "
        </p>
      </blockquote>
      <p>
        In truth, most other browsers (including Firefox, Opera, and ASV+Internet Explorer) used to (as of 2006) support the ability to use &lt;input type="file"&gt; to insert a user-selected image into an HTML page, though this functionality is apparently beyond what the specification requires.
      </p>
      <p>
        In fact, as of 2009, most browsers seem to have back-peddled on this functionality, in response to some emergent security concerns that began to appear as early as 2003 regarding client-side access through file upload. The HTML5 Working Group seems to have brought the issue under advisement, though I am unsure of the status of that progress. Some have argued that no one would ever want to do such a thing, but they clearly haven't taken any of my classes!
      </p>
      <p>
        We may take this as indication that in the future we will have this ability available directly within SVG. For now, how might we accomplish this without relying on HTML to SVG communication? For several semesters running, I have posed the problem in a variety of contexts and have yet to see so much as the outline of a workable approach. Some have suggested compound document formats, including the use of the &lt;foreignObject&gt; tag, and dispatchEvent() to generate a click. Since one cannot generate a click to launch a file upload in HTML, for security reasons, it seems unlikely to work in the context of SVG where a prototype file upload is being borrowed through XHTML. Many of the approaches people have suggested have very limited availability in mainstream browsers at the moment, so I sincerely doubt that anyone has made much progress on this at this point in time.
      </p>
      <p>
        As an update since last I wrote this section: all browsers (including even ASV+IE) seem to have broken the ability to use file upload to incorporate local images into a web page, apparently as a corollary to the HTML5 Design Principle of "Don't break the Web!". I understand that HTML5 has broken this small part of the web, as a part of its long-range vision of fixing it, but how it intends to do this, in what time frame, and why it was necessary to do it in the first place (given that at least eight years of cross-browser functionality was allowed for scripts I used to do exactly this) is currently most mysterious to me, despite numerous queries I've posed concerning this in various fora. I, rather bemusedly, conclude that one way to get an answer to these questions is, in fact, and with a bit of mischief in mind, to write exactly this little update.
      </p>
      <p>
        In conclusion, it will be some years until SVG 1.2 with its improved text objects (including &lt;flowroot&gt; and &lt;flowregion&gt; and editable text regions) becomes implemented by most browsers. Opera 9.5 and beyond seem to have offered several approaches inclucing the "editable='true'" attribute and a robust implementation of <em>foreignObject</em>. The SVG Tiny 1.2 document is still a working draft, and, in theory, I suppose, subject to change (though it has entered final status as of Fall 2008 meaning, I gather, that the document is very close to a stable form). Alternatively, while the approach of XForms (discussed in the final chapter), shows promise, it would take, so far as I can tell, a substantial development effort to bootstrap that approach into productivity. As of IE7, XPATH support is not yet there (even though it is in Opera and Firefox) and none of the browsers yet have native support for Xforms. Hence, the HTML &lt;textarea&gt; which not only flows text into a rectangle handling line wrap, but also manages the user events, is likely to be our easiest way of importing text from the user into our document. Likewise, given the as yet unrealized theoretical difficulty of implementing something like &lt;input type=file&gt; in SVG 1.1, we are likely to rely on HTML for at least these widgets for some time to come.
      </p>
      <p>
        In the meantime, all of these widgets are available in current browsers through HTML and can be used successfully through two-way communication between HTML and SVG documents.
      </p>
      <h4 id="SVG_in_HTML">
        Embedding SVG in HTML documents
      </h4>
      <p>
        There are a variety of ways that one can imagine using HTML to "contain" SVG documents. We'll discuss several of them. The first thing to say is that all of these techniques (with the exception of &lt;image src="file.svg"&gt; work relatively seamlessly for both the Firefox and Opera browsers, but only &lt;embed&gt; works as we would expect and enables cross document scripting in ASV+Internet Explorer. Secondly, it is worth pointing out that only &lt;object&gt; works consistently with the W3C standards, meaning at this time one must choose between standards consistency, or browser consistency. Faced with the choice, most developers will tend to choose &lt;embed&gt; though the question, whenever posed, seems to foment passion among partisans.
      </p>
      <h5 id="embed">
        1. &lt;embed&gt;
      </h5>
      <p>
        The &lt;embed&gt; tag, though never standardized by the W3C has become a sort of de facto "standard" for the introduction of non-HTML content (such as audio) into HTML documents. It is used so frequently on web sites, that browsers pretty much have to support it. In fact the W3C has formed a new working group to form a recommended standard for HTML5 and it currently appears likely that &lt;embed&gt; will find its way into the new standard. (See the <a href="http://dev.w3.org/html5/spec/Overview.html#the-embed-element">current working draft</a> where &lt;embed&gt; appears in the specification.) The problem with it is that the way one controls material inside an &lt;embed&gt;, tends to be browser specific, and oftentimes, format and vendor specific. &lt;object&gt; has been chosen for standardization by the W3C, in part because of how fragmented the world surrounding the use of &lt;embed&gt; has become, largely because of its uncoordinated development.
      </p>
      <p>
        To retrieve an SVG document inside an &lt;embed&gt;, the following works in all five browsers:
      </p><code class="line">&lt;embed id="E" src="myfile.svg"/&gt;</code>
      <p>
        To open the SVG document from a script in HTML, one need only retrieve the &lt;embed&gt; by its id name, and then use <em>getSVGDocument()</em> to find the document within the embed.
      </p>
      <dl>
        <dd>
          <table border="1" cellpadding="7" cellspacing="0" width="560">
            <col width="309" />
            <tbody>
              <tr>
                <td colspan="2" class="caption">
                  Demonstrating the perusal of an SVG document from HTML
                  <p>
                    <em>(from ASV+IE, FF, Opera, Chrome and Safari)</em>
                  </p>
                </td>
              </tr>
              <tr>
                <th>
                  webpage.html
                </th>
                <th>
                  myfile.svg
                </th>
              </tr>
              <tr>
                <td>
                  <pre>
<code>&lt;html&gt;&lt;script&gt;<br />function peruse(){<br /> D=document.getElementById("E")<br /> SVGDoc=D.getSVGDocument()<br />  SVGRoot=SVGDoc.documentElement<br /> who=SVGRoot.firstChild.nextSibling<br /> whoName="&lt;"+who.nodeName<br />  whoHow=who.attributes.item(0)<br />  whoNow=whoHow.nodeName<br /> whoWhat=whoHow.nodeValue+"&gt;"<br />  alert(whoName+" "+whoNow+"="+whoWhat)<br />}<br />&lt;/script&gt;&lt;body&gt;<br />&lt;button onclick="peruse()"&gt;open&lt;/button&gt;&lt;br&gt;<br />&lt;embed name="E" id="E" src="simplest.svg" width="50" <br /> height="50"&gt;<br />&lt;/body&gt;&lt;/html&gt;<br /></code>
</pre>
                </td>
                <td>
                  <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;<br />&lt;circle r="50"/&gt;<br />&lt;/svg&gt;<br /></code>
</pre>
                </td>
              </tr>
              <tr>
                <td colspan="2" valign="top">
                  <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/77d40314.png" alt="alert box showing &lt;circle r=50&gt;" id="graphics159" height="130" width="400" />
                </td>
              </tr>
              <tr>
                <td colspan="2" class="example">
                  This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/simplescript.html">http://srufaculty.sru.edu/david.dailey/svg/simplescript.html</a>
                </td>
              </tr>
            </tbody>
          </table>
        </dd>
      </dl>
      <h5 id="frame">
        2. &lt;frame&gt; and &lt;iframe&gt;
      </h5>
      <p>
        Frames and iframes are very similar except that iframes can be placed in the body of an HTML document while frames must be in a frameset. Additionally, scripting iframes tends to be a lot trickier, in part, perhaps, because iframes are a more recent addition to the W3C recommendation, having burbled into prominence from the Internet Explorer realm.
      </p>
      <p>
        Either is currently able to receive, as its "src" attribute, an SVG file and to display that file in any of the three major browser environments this book considers. However, when we attempt to script from HTML to SVG, a security restriction in Internet Explorer with the Adobe plugin, apparently restricts direct access to the SVG document. Using the same methods (document.frames('frameid')or document.getElementById('frameid')) that one would to access the contents of a frame or an iframe with HTML content, that browser complains of an "access is denied" error when SVG lives inside.
      </p>
      <p>
        As a result, the only way I have found to access all SVG content through frames, uses a trick. The trick is to have the framed SVG document contain a script which passes its own document object as a parameter to a script located in the top level object (the frameset in the case of frames or in the case of an iframe, the HTML document containing it.)
      </p>
      <p>
        The following minimal SVG document proves sufficient, when placed in a frame, to allow the subsequent modification of that document from its HTML parent (or top):
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="325">
        <col width="309" />
        <tbody>
          <tr>
            <td class="caption">
              A minimal SVG shell enabling a parent frame to access it
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;svg xmlns='http://www.w3.org/2000/svg'<br />xmlns:xlink='http://www.w3.org/1999/xlink' <br />onload='top.receive(document)'&gt;&lt;/svg&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <p>
                This document will be referred to as <em>simpleShell.svg</em> in the example below.
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        We illustrate how this works in the following HTML document and script.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="340" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Accessing SVG DOM through an &lt;iframe&gt;
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;html&gt;&lt;head&gt;&lt;script&gt;<br />xmlns="http://www.w3.org/2000/svg"<br />var SVGdoc,SVGRoot,I<br /></code>
</pre>
            </td>
            <td class="annotate">
              Variables for the SVG namespace, the SVG document and root, and the iframe itself.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function receive(D){<br /> SVGdoc=D<br /> SVGRoot=SVGdoc.documentElement<br /> var s="top.MakeC(evt.clientX,evt.clientY)"<br /> SVGRoot.setAttributeNS(null,"onclick",s)<br /> var R=SVGdoc.createElementNS(xmlns,"rect")<br /> R.setAttributeNS(null,"fill","#edb")<br /> R.setAttributeNS(null,"width","100%")<br /> R.setAttributeNS(null,"height","100%")<br /> SVGRoot.appendChild(R)<br /> I=document.getElementById("B")<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                When the SVG document loads it is instructed to activate <em>receive()</em> and send it a pointer to its document object. See SVG above.
              </p>
              <p>
                We make the SVG clickable and fill the SVG with a light grey rectangle so clicks anywhere in the iframe will be noticed. The click coordinates will be sent to <em>MakeC().</em>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function prepCircle(){<br /> var h=I.height*Math.random()<br /> var w=I.width*Math.random()<br /> MakeC(w,h)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              When the HTML button is clicked we generate a pair of random points and send to <em>MakeC().</em>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function MakeC(x,y){<br /> var R=SVGdoc.createElementNS(xmlns,"circle")<br /> R.setAttributeNS(null,"fill","#9c3")<br /> R.setAttributeNS(null,"stroke","black")<br /> s="top.SVGRoot.removeChild(evt.target)"<br /> R.setAttributeNS(null,"onclick",s)<br /> R.setAttributeNS(null,"cx",x)<br /> R.setAttributeNS(null,"cy",y)<br /> r=12+Math.random()*25<br /> R.setAttributeNS(null,"r",r)<br /> SVGRoot.appendChild(R)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <em>MakeC()</em>, activated either from the HTML button or from clicks inside SVGRoot, creates a circle R which self-destructs when clicked.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;/script&gt;&lt;/head&gt;&lt;body&gt;<br />&lt;form&gt;&lt;input type=button onclick="prepCircle()"<br />value="make a circle or click below"&gt;<br />&lt;iframe id="B" src="simpleShell.svg" width="250"<br /> height="150"/&gt;<br />&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;<br /></code>
</pre>
            </td>
            <td class="annotate">
              The iframe is labeled with an id rather than a name. It seems to work more smoothly this way.
            </td>
          </tr>
          <tr>
            <th colspan="2" valign="top">
              Illustration
            </th>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/e0a9b20.png" alt="an HTML button above a tan rectangle containing several green circles" id="graphics160" height="180" width="310" />
            </td>
          </tr>
          <tr>
            <td colspan="2" class="example">
              This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/iframeSVG.html">http://srufaculty.sru.edu/david.dailey/svg/iframeSVG.html</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        It should also be mentioned that some SVG experts do recommend &lt;iframe&gt; as the way to import SVG content into HTML (see for example <a href="http://lists.w3.org/Archives/Public/public-svg-ig/2009AprJun/0012.html">discussion here</a>) and one can certainly script interactively between the SVG and HTML as seen <a href="">here</a>. Because this author has yet to find a way to access the SVG DOM from HTML using &lt;iframe&gt; when the SVG itself contains no script at all, &lt;embed&gt; still seems more robust to me.
      </p>
      <h5 id="object">
        3. &lt;object&gt;
      </h5>
      <p>
        Though &lt;object&gt; is the container recommended by the W3C for holding non-HTML content, the Adobe plugin for the most popular browser Internet Explorer, discovered a security issue in their implementation which forced them to disable it in version 3.01 (and later) of the plugin. From Adobe's description:
      </p>
      <blockquote>
        <p>
          "Adobe SVG Viewer 3.01 addresses one potential security risk by disabling SVG scripts if you disable ActiveScripting in Internet Explorer. This security risk only affects customers who browse the Web on Windows computers in Internet Explorer with ActiveScripting disabled. By default, ActiveScripting is enabled, so most users are not currently at risk. Because of the way that the HTML OBJECT tag is implemented in Internet Explorer, Adobe SVG Viewer 3.01 cannot determine the URL of a file embedded with the OBJECT tag. The URL is required to determine the security zone, which is required to determine the state of the ActiveScripting setting. Therefore, to fail safe against this potential security flaw Adobe SVG Viewer 3.01 always disables scripting when it determines that the SVG file is embedded using the OBJECT tag. When authoring in SVG, Adobe recommends that you not use the OBJECT tag and instead use the EMBED tag when embedding SVG in HTML pages."<sup><a class="footnoteanc" href="#footnote62sym" id="footnote62anc">62</a></sup> 
        </p>
      </blockquote>
      <p>
        However, given that Adobe no longer supports the SVG plugin (with support having been officially withdrawn in January 2009, one may view this caution as overguarded. Alternative plugins for Internet Explorer may obviate the problem, allowing &lt;object&gt; to work consistently in all major platforms.
      </p>There is, however, a workaround that enables &lt; to work: that is to use a nested &lt;param&gt; statement to declare the source of the &lt;object&gt;
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;object id="E" type="image/svg+xml" data="ovals.svg" width="320" height="240"&gt;<br /> &lt;param name="src" value="ovals.svg"&gt;<br />&lt;/object&gt;<br />
</pre>
            </td>
          </tr>
          <tr>
            <td class="example">
              Example at <a href="http://srufaculty.sru.edu/david.dailey/svg/objectparamSVG.html">http://srufaculty.sru.edu/david.dailey/svg/objectparamSVG.html</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The above appears to work fine, enabling full scripting capabilities in all five browsers: ASV+IE, FF, Safari, Chrome, and Opera.
      </p>
      <p>
        One lingering oddity associated with &lt;object&gt; however, is that accessing SVG DOM from within HTML script, in some versions of Firefox, seems to require a small bit of sleight of hand:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
D=document.getElementById("B")<br />try {SVGdoc=D.getSVGDocument()}<br />catch(SVGdoc){S=D.contentDocument}<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The alternative approach to finding the content is appears (from my experiments) to be necessitated by Firefox's approach to looking inside the &lt;object&gt; tag<sup><a class="footnoteanc" href="#footnote63sym" id="footnote63anc">63</a></sup>. 
      </p>
      <h5 id="SVG_image">
        4. &lt;img&gt;: SVG as an image format
      </h5>
      <p>
        At the current time, of the five browsers, only Opera, Safari and Chrome support svg as an image format in HTML:
      </p><code class="line">&lt;img src="simplest.svg" width="250" height="150"/&gt;,</code>
      <p>
        though it would clearly be an advance if they all did. None supports scripting in this context, though the Opera browser supports SVG as animated by SMIL.
      </p>
      <div class="example">
        <a href="http://srufaculty.sru.edu/david.dailey/svg/imgsvgtest.html">An example of file type "svg" used as the src of an &lt;img&gt;</a>
      </div>
      <h5 id="inline">
        5. Inline content
      </h5>
      <p>
        A relatively new approach that shows a lot of promise involves the "inline" incorporation of SVG content into HTML. This involves interleaving HTML and SVG tags in the same HTML document. All of the five browsers except IE treat HTML as though it is XHTML, a dialect of XML, but with relaxed syntax requirements. This means that inlining of SVG should just be a matter of resolving different namespaces. HTML and SVG should coexist rather peaceably in those browsers. But IE is not intrinsically an XML environment, and the compound document approach is not workable, in its current incarnation, in IE. So for non-IE browsers, we can do something like this:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;<br /> &lt;body&gt;<br /> &lt;svg xmlns="http://www.w3.org/2000/svg" width="300" height="99"&gt;<br /> &lt;circle cx="50" cy="50" r="50" /&gt;<br /> &lt;/svg&gt;<br /> &lt;/body&gt;<br />&lt;/html&gt;
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Unfortunately, the above code works (in FF, Safari, Chrome and Opera) but only if we save the document in .xhtml format, in which case IE will display it as XML source code rather than as HTML.
      </p>
      <p>
        Scripting does work across parts of these compound XML documents however. The following XHTML document works fine, allowing user events to modify the SVG DOM from within either Opera, Firefox, Chrome or Safari<sup><a class="footnoteanc" href="#footnote64sym" id="footnote64anc">64</a></sup>. 
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="409">
        <col width="393" />
        <tbody>
          <tr>
            <td class="caption">
              An XHTML document allowing dynamic SVG<br />
              <em>elements to be added by mouse clicks.</em>
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;<br />&lt;head&gt;&lt;script&gt;<br />xmlns="http://www.w3.org/2000/svg"<br />var SVGRoot<br />function receive(evt){<br /> SVGRoot=evt.target<br /> var s="MakeC(evt.clientX,evt.clientY)"<br /> SVGRoot.setAttributeNS(null,"onclick",s)<br />}<br />function MakeC(x,y){<br /> var R=document.createElementNS(xmlns,"circle")<br /> R.setAttributeNS(null,"fill","#9c3")<br /> R.setAttributeNS(null,"stroke","black")<br /> s="top.SVGRoot.removeChild(evt.target)"<br /> R.setAttributeNS(null,"onclick",s)<br /> R.setAttributeNS(null,"cx",x)<br /> R.setAttributeNS(null,"cy",y)<br /> r=12+Math.random()*25<br /> R.setAttributeNS(null,"r",r)<br /> SVGRoot.appendChild(R)<br />}<br />&lt;/script&gt;&lt;/head&gt;&lt;body&gt;<br />&lt;b&gt;scriptable SVG in XHTML&lt;/b&gt;&lt;br/&gt;<br />&lt;svg id="SVG" xmlns="http://www.w3.org/2000/svg" <br /> onload="receive(evt)" width="600" height="200"&gt;<br /> &lt;circle cx="100" cy="100" r="100" fill="green" /&gt;<br />&lt;/svg&gt;&lt;/body&gt;&lt;/html&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        It should also be noted that considerable discussion has occurred in recent months (that is, the early parts of 2009) suggesting that for HTML5, when it becomes a W3C recommendation, SVG in text/html will be allowed, even without requiring the document to be served as XHTML. Some difficulties reconciling the looser syntax of HTML with the more rigorous syntax of SVG exist, but the hope seems to be that an HTML author should be able to copy and paste (most) SVG source code into HTML and have it work <em>in situ</em> and <em>in vivo</em>.
      </p>
      <h4 id="scripting_HTML">
        Scripting between HTML and SVG
      </h4>
      <p>
        Given the nature of HTML and SVG and the typical reasons for combining them, we are more likely to use HTML to modify SVG than vice versa. The following are the sorts of things we are likely to wish to accomplish. Brief explanations of how to do these are provided, with one larger example presented at the end of this discussion which puts both of these techniques together in one small application.
      </p>
      <p>
        In each of the following, we will assume that the SVG has been embedded in HTML using the &lt;embed&gt; tag with its content made available to HTML through commands equivalent to
      </p><code class="line">SVGDoc = document.getElementById("EmbedID").getSVGDocument()</code>
      <h5 id="functions_HTML_SVG">
        1. Calling Javascript functions in HTML documents from events in SVG DOM.
      </h5>
      <p>
        Suppose in the HTML document, we have a function named <em>peruse()</em>. To activate peruse from JavaScript within the SVG document we issue the command
      </p><code class="line">top.peruse(param)</code>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="280" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Activating HTML function from SVG
            </td>
          </tr>
          <tr>
            <th>
              Function named <em>peruse()</em> in HTML
            </th>
            <th>
              Activating it through <em>top.peruse()</em> in embedded SVG
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;html&gt;&lt;script&gt;<br />function peruse(id){<br /> D=document.getElementById("E")<br /> SVGDoc=D.getSVGDocument()<br />  who=SVGDoc.getElementById(id)<br />  whoName=who.nodeName<br /> alert(whoName)<br />}<br />&lt;/script&gt;&lt;body&gt;<br />&lt;button onclick="peruse('T')"&gt;HTML&lt;/button&gt;<br /><br />&lt;embed name="E" id="E" src="simpleJS.svg" width="350" height="150"&gt;<br />&lt;/body&gt;&lt;/html&gt;<br /></code>
</pre>
            </td>
            <td>
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;<br /><br />&lt;text x="45" y="63" font-size="20" fill="black"&gt;<br />Peruse<br />&lt;/text&gt;<br /><br />&lt;rect id="T" onclick="top.peruse('T')" <br /> x="30" y="40" height="30" width="100" <br /> stroke="black" stroke-width="2" fill="red" <br /> opacity=".4"/&gt;<br /><br />&lt;/svg&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <p>
                <em>Result</em>
              </p>
            </td>
          </tr>
          <tr>
            <td colspan="2" valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/5b934734.png" alt="HTML alert box shown after clicking on a red rectangle with the word 'peruse' on it" id="graphics161" height="140" width="353" />
            </td>
          </tr>
        </tbody>
      </table>
      <h5>
        2. Using Javascript functions in HTML to create or modify SVG objects
      </h5>
      <p>
        Once we have located the SVG DOM through commands such as
      </p><code class="line">SVGDoc = document.getElementById("EmbedID").getSVGDocument()</code>
      <p>
        in our HTML scripts, then we may manipulate objects in the SVG by issuing commands like
      </p>
      <pre>
<code class="line">R=SVGDoc.createElementNS(xmlns,"rect")<br />SVGRoot.appendChild(R)<br />SVGDoc.getElementById(id).setAttributeNS(null, "fill", "green")</code>
</pre>or <code class="line">SVGRoot.removeChild(R)</code>
      <p>
        We could, if we wished to, do it the other way around: use functions in SVG to create or modify attributes of HTML objects. But given that SVG is embedded in HTML rather than otherwise, and given that a good part of why we might wish to use HTML in the context of SVG stems from its advanced I/O capabilities, it seems more likely that if we wish to modify attributes of an HTML document, then we will be doing so by calling functions within HTML to do that, activating those functions from within SVG as illustrated in the previous section.
      </p>
      <h4 id="joint_use">
        An illustration of the joint use of HTML and SVG.
      </h4>
      <p>
        This is a lengthy example, but hopefully serves to illustrate how HTML and SVG can benefit from playing and working well with each other. It also serves as a sort of case study for how the development of a more complex SVG project might proceed.
      </p>
      <p>
        Suppose we are interested in developing some sort of graphical interface for users to be able to create "collapsing text boxes." By that I mean text boxes that are editable in the ways users expect, but which can also be collapsed into small icons, and subsequently reopened. Given SVG's current difficulties with handling all the events associated with text entry, we might like to use HTML's &lt;textarea&gt; objects to gather and display the text from the user, but use SVG with its rich graphical capabilities to handle most of the presentation layer. Both markup languages speak JavaScript, so we may use that as the glue to hold the pieces together. First we'll make the SVG component. It should have the ability for users to click on the screen to create a new "node": a labeled box that is clickable. So long as we are making a series of buttons, let us go ahead and assign to each new button a color and a label (from among a random collection of six letter words) just to make the button somewhat distinctive and to save the user the steps of having to provide those attributes himself.
      </p>
      <p>
        We begin with code that should be relatively readable by now:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="364" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              SVG code for creating new labeled buttons
            </td>
          </tr>
          <tr>
            <th>
              SVG + JavaScript
            </th>
            <th>
              Explanation
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;svg xmlns="http://www.w3.org/2000/svg" <br />xmlns:xlink="http://www.w3.org/1999/xlink" <br />width="100%" onload="start(evt)"&gt;<br />&lt;script&gt;&lt;![CDATA[<br /> var xmlns = 'http://www.w3.org/2000/svg';<br /> var xlinkns ='http://www.w3.org/1999/xlink';<br /> var Root, Canvas<br /> var nodenum=0<br /> var Nodes=new Array()<br /> var Colors=new Array("#faa","#faf","#aaf", <br /> "#aff", "#afa","#ffa","#fa8")<br /> var nodeW=65<br /> var nodeH=20<br />//var threshold=0 <br />//for determining lexical proximity of nodes<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                &mdash;Standard beginning, with a call to a startup function onload. We also allow the SVG to fill all of the space allocated to it (by the window, or the HTML).
              </p>
              <p>
                &mdash;Global variables, including namespace, node dimensions, an array to store the node data, and some pretty colors.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function start(evt){<br /> Root=document.documentElement<br /> var T=document.getElementById("T")<br /> var Canvas=document.getElementById("Canvas")<br /> Words=T.firstChild.nodeValue.split(",")<br /> omd="onmousedown"<br /> Canvas.setAttribute(omd,"newNode(evt)")<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                &mdash;When the SVG loads, we locate the Root element, the drawing canvas, and an array of six letter words to use as node labels.
              </p>
              <p>
                &mdash;We prepare the canvas to make new nodes whenever it is clicked.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function newNode(evt){<br /> var x= evt.clientX;y= evt.clientY;<br /> var r=Math.floor(Math.random()*Words.length)<br /> var w=Words[r]<br /> Words.splice(r,1)<br /> var NB=new Node(x,y ,nodenum,w)<br /> Nodes.push(NB)<br /> buildOne(nodenum)<br /> nodenum++<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                &mdash;We store the coordinates of the mousedown event.
              </p>
              <p>
                &mdash;select, without replacement, a random word.
              </p>
              <p>
                &mdash;create a new Node object and add it to our array of nodes.
              </p>
              <p>
                &mdash;draw the node in SVG (buildOne)
              </p>
              <p>
                &mdash;increment node counter.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function Node(x,y,id,word){<br /> this.x=x - nodeW/2<br /> this.y=y - nodeH/2<br /> this.id=id<br /> this.label=word<br /> this.col=Colors[nodenum%Colors.length]<br /> this.info=""<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              &mdash; We build a logical representation of each node including its coordinates (centered about the mouse click),and id, its color and six word label, and another field which will ultimately contain its textual content.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function buildOne(i){<br /> var NB=Nodes[i]<br /> var id=NB.id<br /> var label=NB.label<br /> var P=document.getElementById("prototype")<br /> var G=P.cloneNode(true)<br /> G.setAttribute("id",id)<br /> var s="translate("+NB.x+","+NB.y+")"<br /> G.setAttribute("transform",s)<br /> var r = G.firstChild<br /> r.nextSibling.firstChild.nodeValue=label<br /> r.setAttribute("fill", NB.col);<br /> G.setAttribute("onmousedown","NClick(evt)");<br /> Root.appendChild(G);<br /> //s="node "+i+" created: "+label+"\n"<br /> //top.f.t.value+=s<br />}]]&gt;<br />&lt;/script&gt;<br /></code>
</pre>
            </td>
            <td>
              <p class="annotate">
                &mdash; This builds the physical representation of the node in SVG. It clones an existing button ("prototype," a group with a text and a rect) and assigns attributes to those based on attributes of the previously created logical representation.
              </p>
              <p>
                &mdash; We'll build the Nclick function shortly &mdash; it will be responsible for creating the HTML textareas.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;g id="prototype"&gt;&lt;rect width="65"<br /> height="20" stroke="red"/&gt;&lt;text font-size="18"<br /> font-family="garamond" x="10" y="15" <br /> pointer-events="none"&gt; <br />&lt;rect id="Canvas" x="0%" y="0%" width="100%"<br /> height="100%" fill="white"/&gt;<br />&lt;text font-size="14" x="100" y="20" <br /> id="hint"&gt;Click to make a button&lt;/text&gt;<br /></code>
</pre>
            </td>
            <td class="annotate">
              Here we have a prototype "node", a drawing canvas, and a tiny morsel of instruction for the user.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;text<br />id="T" display="none"&gt;advene,afresh,<br />armour,assign,barbed,basset,behave,belfry,bellow,<br />benzol,bronco,bumper,buzzer,caecum,carack,carbon,<br />carrom,cashew,chalet,cither,coldly,cupful,curtsy,<br />cyclic,debunk,derive,effete,effort,emblem,energy,<br />engulf,enrich,excite,eyelet,fabled,fallen,feeble,<br />figure,finish,fracas,freeze,gallon,gaping,glitch,<br />gratis,homely,humbly,inject,jigger,jigsaw,kimono,<br />lackey,lenity,liking,lunacy,margin,marrow,metric,<br />mizzle,module,mongol,murrey,nearly,novice,paunch,<br />pepper,permit,plaque,pliers,profit,pueblo,purely,<br />python,rammer,rehash,rejoin,rudder,second,shield,<br />smoker,solace,soldan,solder,stroll,supply,talent,<br />tendon,tongue,tubing,turgid,uprear,valley,victor,<br />walrus,warmth,warped,washer,wimple,wolves, yonder<br />&lt;/text&gt;<br />&lt;/svg&gt;</code>
</pre>
            </td>
            <td class="annotate">
              A &lt;text&gt; with a random collection of six letter words to be used as labels for the nodes &mdash; to give them some initial distinctiveness. This is a fairly easy way of bringing text data into JavaScript which has the .split method for strings.
            </td>
          </tr>
          <tr>
            <td colspan="2" class="example">
              This example can be seen at <a href="http://srufaculty.sru.edu/david.dailey/svg/backandforth.html">http://srufaculty.sru.edu/david.dailey/svg/backandforth.html</a>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The reason for making both a logical and physical representation of each node is twofold:
      </p>
      <div>
        <ol>
          <li>In communicating about attributes of SVG nodes to HTML, HTML will have to receive this information as strings since it has no knowledge of SVG objects per se.
          </li>
          <li>It is less expensive computationally to store a parallel representation of the SVG or HTML DOM, since it avoids sometimes time-consuming exploration of the DOM by JavaScript. So long as this information has been created, why not make it directly accessible?
          </li>
        </ol>
      </div>
      <p>
        Thus far our code succeeds in allowing the user to create new buttons (with colors and labels) at the position of the mouse click:
      </p><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m4bc31e8.png" alt="text saying 'click to make a new button' shown above three labeled rectangles" id="graphics162" height="131" width="276" />
      <p>
        We make the Words array global so that we may sample without replacement from it and guarantee that no two words have the same label.
      </p>
      <p>
        Next we develop a function (in this case <em>Nclick</em>) that responds to the click event on a box. It should identify which box has been clicked and then initiate the creation of an HTML &lt;textarea&gt; object in general proximity to the SVG node that was clicked.
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
function NClick(evt){<br /> var n=evt.currentTarget.id<br /> top.textbox(n)<br />}
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Since all important aspects of the physical node are stored in its JavaScript representation as an object, we need only send the id of the node to our script in HTML. We will develop the function textbox inside whatever HTML page we ultimately develop.
      </p>
      <p>
        Now it is time to consider what sort of an HTML document we'd like to have as a container for our text box builder. Actually, the HTML need not have any visible presence for our overall purpose, other than its &lt;textarea&gt;s that we'd like to have floating above our SVG. For purposes of exposition, here, I chose to build another HTML component: an event log &mdash; namely a &lt;textarea&gt; into which the unfolding of the history of events may be recorded. This serves a dual purpose of providing ease of exposition here, and of aiding debugging during development. Textareas as event logs can be very convenient for purposes of code development.
      </p>
      <p>
        The first problem to be solved is how to get an HTML textarea tag to hover above an SVG document. This is terrain that has perhaps not been charted very well, to date. On the basis of several hours of experimentation and poking about on the web to see what might be known, I can report the following:
      </p>
      <ol>
        <li>Experiments on the web with both HTML and SVG seem to be rather conventional. I saw nothing quite of the sort we are discussing here.
        </li>
        <li>There are large (and annoying) browser differences between how one can get content to hover above an &lt;embed&gt; that contains SVG.
        </li>
        <li>Some relatively straightforward approaches work with Opera and Firefox that do not translate at all well to ASV+IE.
        </li>
        <li>z-index does not seem to control &lt;embed&gt; tags (at least those with SVG) the way one would expect them to.
        </li>
        <li>The only successful way I've discovered to do this is to build a new &lt;iframe&gt; and append it to the DOM of the HTML. It then appears "above", the SVG. Once constructed, our text box may be inserted into the base document, appearing above the iframe which has floated above the embed because of its status as a frame. This solves the problem in ASV+IE, FF, and Opera.
        </li>
        <li>On folding up the box, merely changing its visibility does not seem to work. One must delete and then rebuild the iframe, though this works a bit differently in the different browsers.
        </li>
        <li>Cloning &lt;iframes&gt; appears to be difficult across browsers. Instead of cloning them we'll just build them with createElement and add the attributes, one by one.
        </li>
        <li>One way we might do this in a more modern era (once a newer and standards-compliant way to do SVG in IE comes along) would be to use the &lt;foreignObject&gt; tag (see <a href="#Afterword">Afterword</a> for a brief mention of that and its status relative to this document.
        </li>
        <li>Another way would be to use the SVG 1.2 &lt;textArea&gt; tag.
        </li>
      </ol>
      <p>
        So we'll be creating new &lt;embed&gt; tags and putting into them a &lt;textarea&gt;. While we're at it, we might as well add a &lt;div&gt; tag at the top of the textarea (like a title bar) containing the node's label, and at the right side of that, why not add a close box &mdash; a rectangle with a clickable "X" in it so that users will know how to fold the box up again when done? This can be done with cloning, and a lot less code will be involved that way.
      </p>
      <p>
        The HTML body will look something like this:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;body style="bgcolor:#F8f888" onload="prestart()"&gt;<br />&lt;div id="DQ" style="position:absolute;left:0px;top:0px;display:none;"&gt;<br /> &lt;input size="25" value=" "&gt;<br /> &lt;div id="qw" onclick="closeBox(this.id.replace('q',''))"&gt;X&lt;/div&gt;<br /> &lt;textarea rows="5" cols="23"&gt;message:&lt;/textarea&gt;<br />&lt;/div&gt;<br />&lt;div style="position:absolute;left:60%;top:0;"&gt;<br /> &lt;form name="f"&gt;<br /> &lt;textarea name="t" cols="40" rows="38" onfocus="blur()"&gt;&lt;/textarea&gt;<br /> &lt;/form&gt;<br />&lt;/div&gt;<br />&lt;embed name=sv src="backandforth.svg" style="position:absolute;top:10;left:10;width:350;height:500"/&gt;<br />&lt;/body&gt;<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Later, we'll add some styles to make our divs, inputs and textareas nicely shaped, arranged, and color-coordinated.
      </p>
      <p>
        An explanation of the "close box" is probably in order. Since the &lt;div&gt; "DQ" will be cloned, we'd like the widget that we use to close the text box to be aware of which box is being closed. This is a bit of a kludge, perhaps, but it succeeds. We allow this box and all like it to rewrite its own id, so that it sends just the id number (which happens to coincide with the id of its parent iframe) to the box closing function. It saves a bit of work.
      </p>
      <p>
        When we load the page, we'll want to do a few things:
      </p>
      <ol>
        <li>Resize the SVG to fit an appropriate proportion of the available screen size.
        </li>
        <li>Make sure the SVG has been loaded before we start attempting to access objects or events inside it.
        </li>
      </ol>
      <p>
        These preliminaries can be handled as follows:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="374" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Waiting for the SVG to arrive before resizing it.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code><br />&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;<br />&lt;head&gt;&lt;title&gt;Textareas over SVG&lt;/title&gt;<br />&lt;script&gt;<br /></code>
</pre>
            </td>
            <td class="annotate">
              A relatively straightforward beginning to an HTML doc.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function prestart(){<br /> WSI=window.setInterval("startup()",100)<br />}<br />function startup(){<br /> clearInterval(WSI)<br />try{S=document.sv.getSVGDocument().documentElement;}<br /> catch(e){prestart()}<br /> try{<br /> bodwide=document.body.clientWidth<br /> bodhi=document.body.clientHeight<br /> }<br /> catch(e){<br /> bodwide=document.body.innerWidth<br /> bodhi=document.body.innerHeight<br /> }<br /> document.sv.style.width=bodwide/1.7<br /> document.sv.style.height=bodhi-30<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                We do not want to resize our embed, until the SVG has actually loaded, but the onload event passed from it may be misleading, due to browser differences. One way to know for sure is to test to see if the SVG DOM is available. If it is we're happy and can proceed. We put the test in a try &mdash; catch, and if the SVG is not yet there, we try again in 100 milliseconds.
              </p>
              <p>
                Once it has arrived, we may safely resize the embed.
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The idea of nesting the load inside a setTimeout or setInterval is perhaps unappealing, but is a trick that appears sometimes to be necessary given the divergent ways the various events are handled in the browsers.
      </p>
      <p>
        Next we will want two functions: one to create the floating text box and the other to close it up . We will have to be sure the information that the user has entered is bundled up and stored in the object structure back in the SVG's JavaScript. We will also wish to make sure that any variables or functions needed from the SVG (like the Nodes array) are available to the HTML, either passed as parameters or "globalized" from SVG to HTML.
      </p>
      <p>
        To create the floating text box, remember that we will be creating a new iframe and then appending to the HTML document a text area.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="376" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Creating an editable textbox above an SVG button.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function textbox(n){<br /> var D=document<br /> ewide=215<br /> var Nn=Nodes[n]<br /> var x=Nn.x<br /> var y=Nn.y<br /> var I=D.createElement("iframe")<br /> I.style.width=ewide<br /> I.style.height=110<br /> I.style.position="absolute"<br /> I.style.left=x-50<br /> I.style.top=y<br /> I.id="I"+n<br /> D.body.appendChild(I)<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                We'll be appending the iframe into the HTML, but we'll need access to the Nodes array from SVG. This is done by placing the statement <em>top.Nodes=Nodes</em> somewhere in the JavaScript in SVG. We create, size, position and append the iframe. It is temporary and used merely to affect the stacking order of things that come later.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code> DQ=document.getElementById("DQ").<br /> var R=DQ.cloneNode(true)<br /> R.id="D"+n<br /> R.style.display=""<br /> R.style.left=x-50<br /> R.style.top=y<br /> R.getElementsByTagName("input")[0].value=Nn.label<br /> var Dv= R.getElementsByTagName("div")[0]<br /> Dv.id="q"+n<br /> Dv.style.background=Nn.col<br /> text=R.getElementsByTagName("textarea")[0]<br /> text.value=Nn.info<br /> D.body.appendChild(R)<br /> f.t.value+="node "+n+" ("+Nn.label+") opened.\n"<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                We clone the "DQ" div tag together with the three objects inside it. We adjust properties of all of these, even going so far as to borrow the color of the SVG node to use as the color of the close box in our text box.
              </p>
              <p>
                We also make a note in the log that the node has been opened.
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Now for the function that "closes" the node back up. Recall that we'll actually be destroying the HTML instance of it instead of just making it invisible (my experiments with that latter approach were not fruitful across browsers). So basically, we'll be interested in finding what the user has added or changed about the node, shipping that information back to our data object (Nodes) in the SVG, and then discarding the physical node (the embed, the divs and the textarea).
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="376" />
        <tbody>
          <tr>
            <td colspan="2" valign="top">
              <p>
                &nbsp;
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function closeBox(id){<br /> var I=document.getElementById("I"+id)<br /> var A=document.getElementById("D"+id)<br /> var t=A.getElementsByTagName("textarea")[0].value<br /> var i=A.getElementsByTagName("input")[0].value<br /></code>
</pre>
            </td>
            <td class="annotate">
              Find the iframe and the div within it. Read the contents of the textarea and the input (containing the node label).
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code> document.body.removeChild(A) <br /> document.body.removeChild(I)</code>
</pre>
            </td>
            <td class="annotate">
              Remove the new HTML.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code> var mb="node "+id+" "<br /> if (Nodes[id].info==t&amp;&amp;Nodes[id].label==i)<br /> mf="closed unchanged."<br /> else<br /> mf="("+i+") closed; new text\n\t'"+t+"'."<br /> f.t.value+=mb+mf+"\n"<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                If changes have not been made merely make a note in the log.
              </p>
              <p>
                If changes have been made, make a note in the log.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code> Sreceive(i,t,id)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              Finally, let's send this data back to a function in the SVG scripts where the data objects are maintained. See discussion below.
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Above, you will see that we have accessed the Nodes array (enabled through a top.Nodes=Nodes statement in SVG &mdash; we'll address this shortly) by comparing current and stored values of the label and text (.info) parts of the node. We might then modify the contents of the data object (Nodes) in SVG, but since ultimately, we may wish to use the text content in some way within the SVG, let us send the information back to a function in SVG for further processing:
      </p><code class="line">Sreceive(i,t,id)</code>
      <p>
        We send the label (i) the text content (t) and the node id (id). This requires us to activate a function living in the SVG from our HTML event, and this is done in much the same way that we access the Nodes array: namely, by making Sreceive in HTML equivalent to some function in SVG. Both can be handled in the startup function of the SVG by adding the boldfaced statements as follows:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="433">
        <col width="417" />
        <tbody>
          <tr>
            <td class="annotate">
              Making SVG functions callable from HTML
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code> function start(evt){<br /> Root=document.documentElement<br />  var T=document.getElementById("T")<br /> var Canvas=document.getElementById("Canvas")<br /> Words=T.firstChild.nodeValue.split(",")<br />  Canvas.setAttribute("onmousedown","newNode(evt)")<br />  <strong>top.Sreceive=receive<br /> top.Nodes=Nodes</strong><br />}<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        That is, we have effectively aliased the term <em>Sreceive</em> in the HTML document to mean <em>receive</em> within the SVG document and the term <em>Nodes</em> in HTML to mean <em>Nodes</em> in SVG.
      </p>
      <p>
        Meanwhile back in SVG, we can develop a function that updates the data based on incoming parameters.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="433">
        <col width="417" />
        <tbody>
          <tr>
            <td class="caption">
              SVG receiving the text from HTML
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>function receive(m,t,n){<br />  Nodes[n].info=t<br />  Nodes[n].label=m<br /> var b=document.getElementById(Nodes[n].id)<br /> b.firstChild.nextSibling.firstChild.nodeValue=m<br />  //checkcontent(n) //to be developed next<br />}<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption" valign="top">
              What it looks like so far
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/34e59ec1.png" alt="screen shot showing three textareas each with text in them and two svg rectangles to the left of a large event log containing text like 'node 1 created: belfry'" id="graphics163" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        To truly round out this example, let's add one more little feature: a bit of graph theory. Thus far, there is really no reason to have used SVG in this example. We could have done it all with DHTML and JavaScript: clickable div tags inserted into the DOM upon clicks on the body. Divs popping up with textareas, etc. What does SVG bring to this garden party, after all?
      </p>
      <p>
        Well, suppose we think of these nodes as little sticky notes representing ideas in a multi-user discussion. We might like some way for these discussions to be <em>threaded</em> or hooked together. In particular, suppose we allow links to develop between boxes based upon some criterion for having similar ideas or meanings (semantic proximity) inside. Then instead of mere boxes in space, the nodes could become nodes of a network-like-object (mathematically known as a symmetric antireflexive binary relation on a countable set, or a <em>graph</em>). Let's use the simplest of ways of determining semantic proximity: does the vocabulary used in two boxes overlap?<sup><a class="footnoteanc" href="#footnote65sym" id="footnote65anc">65</a></sup> To simplify even further, if two nodes share more than k words, for some integer k, then let's connect the nodes. The script to do this can be articulated as follows:
      </p>
      <hr />
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="352" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              If node n shares enough words with another node, then link the two.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function checkcontent(n){<br /> if (Nodes[n].info=="") return<br /> var s=Nodes[n].info.toLowerCase()<br /><br /> var wordsN=noDup(s.split(/\s+/))<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                This does the work, with the aid of the two functions noDup and makeLine below.
              </p>
              <p>
                &mdash;We split the text of node n into an array of words, and then remove any duplicates from the array.
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code> for (var i=0;i&lt;nodenum;i++){<br /> if (i==n) continue<br /> if (Nodes[n][i]) continue<br /> if (Nodes[i][n]) <br /> alert("we should not be here"+n+"+"+i)<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                &mdash;We work with any pair of distinct nodes that are not already connected.
              </p>
              <p>
                &nbsp;
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code> var s=Nodes[i].info.toLowerCase()<br /> var wordsI=noDup(s.split(/\s+/g))<br /> var wordsT=wordsI.concat(wordsN)<br /> var len=wordsT.length<br /> noDup(wordsT)<br /> if (wordsT.length&lt;len) makeLine(i,n)<br /> }<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              &mdash; We take the unique words in node i and join them to the unique words in node n. If this set has duplicates, it means the two sets have a nonempty intersection. Whence we join the two nodes.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function noDup(A){<br /> A.sort()<br /> for (var i=0;i&lt;A.length-1;i++)<br /> if (A[i]==A[i+1]) A.splice(i,1)<br /> return A<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              This modifies an array by removing any duplicates from it.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function makeLine(m,n){<br /> var L=document.createElementNS(xmlns,"path");<br /> x1=Nodes[m].x+nodeW/2<br /> x2=Nodes[n].x+nodeW/2<br /> y1=Nodes[m].y+nodeH/2<br /> y2=Nodes[n].y+nodeH/2<br /> var p="M "+x1+" "+y1+" "+x2+" "+y2<br /> L.setAttribute("d",p)<br /> L.setAttribute("stroke","black")<br /> L.setAttribute("stroke-width",1)<br /> Nodes[m][n]=true<br /> Nodes[n][m]=true<br /> var T=document.getElementById("T")<br /> Root.insertBefore(L,T)<br />}<br /></code>
</pre>
            </td>
            <td class="annotate">
              <p>
                This function draws a line from node m to node n.
              </p>
              <p>
                This makes a reference to the line in the objects representing each node. Its easier than searching to see if the line exists.
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="575" />
        <tbody>
          <tr>
            <td class="caption">
              Illustration of the creation of a semantic graph using above
            </td>
          </tr>
          <tr>
            <td valign="top">
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m42d98fd0.png" alt="five nodes hooked together as the graph C4 + line; also textarea at right containing messages like 'node 1 (b c) closed; text b c .'" id="graphics164" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        And there we have it: a fully functioning mini-application allowing the representation of ideas as pop up boxes with links established by ideational overlap. It has fully editable textareas from HTML, graphics from SVG, and communication between the two worlds provided by JavaScript.
      </p>
      <h2 id="directions">
        Chapter VII &mdash; Directions for Development
      </h2>
      <p>
        When I started writing this book, a publisher asked for an outline. I included a line in that outline for this particular chapter. It's funny how during the year I did the bulk of the writing, my concept of what the future might hold migrated a lot. During that year, Firefox and Opera came to provide very good native support for SVG. That forced me to rewrite numerous examples I had developed<sup><a class="footnoteanc" href="#footnote66sym" id="footnote66anc">66</a></sup>. Also during that time, IE lost about 10% of its "market-share," with big gains being made by Firefox, Safari and Opera. My efforts at cross-platform consistency were rewarded! Adobe purchased Macromedia and then abandoned and then reconsidered its support for what had been, for a couple of years, the only way to see SVG on the web. Microsoft released its new operating system, Windows Vista, containing a technology called Silverlight that apparently has many things in common with SVG.
      </p>
      <p>
        Two more years have passed following my <em>completion</em> of the book in Microsoft Word format. During that time the book was adopted for publication by the W3C (the first book ever published by them, I am told). I finally have gotten around to taking the text that Doug Schepers kindly converted from MS Word to HTML and made the much needed completion of that conversion to HTML, including fixing /most/ of the idiosyncratic formatting conversion errors (several thousand of those!). In the meantime, new sets of reviews have arrived, meaning more errors to correct.
      </p>
      <p>
        More importantly though, the political world surrounding SVG has expanded in those next two years. Google has introduced its Chrome browser that provides native SVG support; Apple Safari now supports SVG natively, including some SMIL. Mozilla has renewed its efforts in SVG development by hiring new staff to support that effort. Two radically different open source projects intrinsically associated with SVG: Apache Batik and Inkscape have both grown in power, stability and size of their user communities. Google has agreed to hold the SVG Open 2009 Conference at its headquarters in Mountain View and even Microsoft made an offer to host that particular conference in Boston!
      </p>
      <p>
        As such I have gone "to press" without substantially revising the comments which follow. I will, in time. In the meantime, the reader is encouraged to read so long as they keep the knowledge firmly in mind that this information is now at least two years out of date, and probably more. In that time I have also learned things that suggest that some of these directions are more important and others may have become less so. It would take considerable effort for me to refresh the accuracy of these statements, and so I will, for the time, leave them with whatever flaws the reader may find.
      </p>
      <p>
        I had originally planned, in this chapter, to scribble a few brief notes about what I saw as some of the limitations of SVG 1.1 and how SVG 1.2 might address some of those. The scope of this chapter has expanded a bit into some areas I'm uncertain about. There are lots of people working with the W3C who have a far better idea than I of the numerous projects in which that organization is involved. For many of those people, standards that were agreed upon in 1999 are considered old, whereas for the world beyond, things like XPATH are only now, ten years later, starting to burble out into the general awareness of many web developers. One person's future is another's past. Most of the working groups and invited experts collected under the umbrella of the W3C, I believe, have a clearer and broader sense of how these various pieces all fit together and of the trends one should be tracking to keep one's head above water in coming years. Likewise there are many in the corporate world of technology whose livelihood depends on reading the tea-leaves of future technology, and who are, I suspect, far more aware of industry trends than I. On the other hand, some of my friends in the world of higher education have sometimes told me that my own sense of future technologies has generally been good &mdash; yes, I may have taken a few wrong turns by building projects in VAX Pascal, HyperTalk, cT, Java applets, and VML but I've made some good guesses as well<sup><a class="footnoteanc" href="#footnote67sym" id="footnote67anc">67</a></sup>. So this chapter may turn out to be a bit short sighted, a bit off-base, and probably not nearly as visionary as some of my past and present students might have hoped. But one can hardly talk about SVG without wondering a bit about the future. To that end, I'll add what I can.
      </p>
      <h3 id="SVG_acceptance">
        SVG's acceptance.
      </h3>
      <p>
        Among my friends who are <em>not</em> computing professionals, none has heard of SVG (unless I have talked about it to them), and though most have heard of HTML, I would guess that less than half of them have ever written any of it. Is SVG likely to take off, or is it likely to dwindle? What is going to happened with IE support? What of the alternative technologies in the arena of the Rich Internet Applications (or "Web Applications"): XAML, Flash, Java Applets, XUL?
      </p>
      <p>
        It seems clear that graphically enriched browser experiences involving client-side interaction with graphics, and most likely, client-side vector generation and filter effects will be happening on people's desktops within a few years. The number of Google pages responding to SVG as a search term has expanded 30 fold within a year or so (see Chapter 1: Overview). Google hits for SVG, Flash and Silverlight have all been growing. The "Rich Internet" will happen; how it happens and how soon are the questions.
      </p>
      <p>
        A big key to this will be the degree of browser support, but this is not the only factor that will influence things. The mobile market<sup><a class="footnoteanc" href="#footnote68sym" id="footnote68anc">68</a></sup> appears to like vector graphics, for obvious reasons. For example, it was previously announced that Nintendo's next generation Wii gaming system will include an engine from Opera.com using native SVG 1.1. Within the past month Google announced that Googledocs will contain an SVG-based drawing pad for collaborative drawing (serving VML for Windows users).
      </p>
      <p>
        Right now we have Opera, Apple Safari, Google Chrome, and Mozilla Firefox all providing native support. Inkscape, as an open source free-to-use graphics editor supporting SVG as its native file format, has won the hearts of the open source community.
      </p>
      <p>
        SVG is an open standard &mdash; one of its main selling points. But not all of the W3C's endorsed recommendations have made it big. Their work on standards for 3D graphics seems to have fizzled, leaving a vacuum of sorts between several large fiefdoms of 3D development. Is the momentum behind SVG sufficient to survive the proprietary initiatives of Microsoft (with XAML, Silverlight and .net) and Adobe (now owning Macromedia and Flash and overlaying the relatively new Flex)? Both of these corporations were involved in the drafting of the current SVG standards, and both have indicated that SVG has a continued warm place in their corporate hearts. Firefox, Safari, Chrome and Opera represent (depending on sources) a growing 15% to 25% share of web browser usage. Those browsers can do something, natively, that is very cool that ASV+IE cannot do. That fact will pressure Microsoft's browser, in the short or long run, to support SVG in one way or another.
      </p>
      <p>
        Kurt Cagle, a respected expert on XML and SVG has written, that XAML may be too "heavyweight" for the browser arena, having the bulk of its mission tied to other things:
      </p>
      <blockquote>
        <p>
          "XAML is a considerably larger and more complex effort, dealing with pieces of UI far removed from the province of SVG in addition to its obvious graphical domain. The problem with this approach is that XAML is also a compilation oriented language that necessitates having a fairly robust run-time available."<sup><a class="footnoteanc" href="#footnote69sym" id="footnote69anc">69</a></sup> 
        </p>
      </blockquote>
      <p>
        Many developers simply reject the idea of doing mainstream XML data integration into RIA using Flash, because a) it is bound, upon creation, into a black box, b) it's programming environment is nonstandard, and c) it is proprietary. But Adobe is launching a large effort at RIA, with asynchronous data exchange from servers to browsers, XML (albeit corporate), and separations between presentation and data (with binding language) through Adobe Flex (originally developed at Macromedia) that could help to re-infatuate certain disaffected developers. At the bottom line, though, how many individuals or small companies want to pay $N per seat to program in a nonstandard language these days, unless, perhaps, it comes from Microsoft? In the history of the web it has usually been the small companies that have made the earth move, and not the enterprises all bogged down by stockholders. Interestingly, IBM, a previously stodgy, but now charmingly lightfooted company seems to be quite fond of SVG, with numerous informative articles on SVG development hosted in its august libraries on the web.
      </p>
      <p>
        SVG with its standards compliance and browser support is pretty compelling. Right now, the big uncertainty is Microsoft. That company seems not, at the moment, to be aiming to challenge Adobe in areas of graphics and animation &mdash; so long an area of excellence of that company and the leaves of its acquisition tree: Aldus, Allaire, Frame Technology, FutureWave, Macromedia and a dozen others. Perhaps in withdrawing some of their corporate efforts behind SVG, Adobe and Microsoft have achieved some unspoken agreement not to step on one another's toes.
      </p>
      <p>
        Perhaps on the other hand, as many currently expect, the water is just about to boil. If SVG were publicly traded, and if I had money, I'd invest.
      </p>
      <h3 id="SVG_progress">
        SVG's progress.
      </h3>
      <p>
        What is in store for SVG? Some of this is quite easy to say. SVG1.2 (Full) had its first working draft published in 2002. Since it was agreed in late 2004/early2005 that SVG1.2 would be a strict superset of SVG Tiny (a version of SVG tailored to the mobile device development community), the Working Group has focused on bringing SVG Tiny 1.2<sup><a class="footnoteanc" href="#footnote70sym" id="footnote70anc">70</a></sup> to completion and finishing up its test suites (collections of examples that allow developers to see how the browser is supposed to work). SVG Full 1.2 then, in its current form, will become the basis of what SVG will be for several years to come.
      </p>
      <p>
        The SVG Working Group is starting on <a href="http://www.w3.org/Graphics/SVG/">SVG 2.0</a> including a set of modules that should allow for progress on several independent areas (like 3D transforms, layout and filters) to progress more rapidly.
      </p>
      <p>
        So what does SVG 1.2 (Full or Tiny) have to offer that 1.1 doesn't have? Furthermore what doesn't 1.2 have that a good web based client-side graphics language should have?
      </p>
      <p>
        A proper place to begin would be reading the SVG 1.2 recommendation<sup><a class="footnoteanc" href="#footnote71sym" id="footnote71anc">71</a></sup> , though I think its authors would probably agree that this is a rather formal document, not generally accessible to a casual reading<sup><a class="footnoteanc" href="#footnote72sym" id="footnote72anc">72</a></sup>. A quick glance at the outline of that document (see table below) will indicate that a majority of SVG's aspects (including even basic shapes) have been touched by the newer recommendation. Additionally, SVG Tiny1.2 does contain
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="373">
        <col width="357" />
        <tbody>
          <tr>
            <td class="caption">
              Outline of W3C's working draft for SVG1.2 (Full)
            </td>
          </tr>
          <tr>
            <td valign="top">
              1 Introduction<br />
              2 Profiling SVG<br />
              3 XML Binding Language for SVG<br />
              4 Flowing text and graphics<br />
              5 Multiple pages<br />
              6 Text enhancements<br />
              7 Streaming<br />
              8 Progressive rendering<br />
              9 Vector effects<br />
              10 Rendering model<br />
              11 Painting enhancements<br />
              12 Media<br />
              13 Animation<br />
              14 Extended links<br />
              15 Application development<br />
              16 Events and Scripting<br />
              17 Non-graphical enhancements<br />
              Appendix A: DOM enhancements<br />
              Appendix B: API enhancements<br />
              Appendix C: SVG DOM Subset<br />
              Appendix D: Feature strings<br />
              Appendix E: List of events<br />
              Appendix F: RelaxNG schema for SVG 1.2<br />
              Appendix G: Media Type registration for image/svg+xml<br />
              Appendix H: References<br />
              Appendix I: Change log
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Overall, I think it is fair to characterize many of the changes in this next version as consistent with an overall direction of the W3C. The W3C's long term vision for SVG and the web at large would seem to include
      </p>
      <ul>
        <li>reducing the developer's reliance on script by making more things declarative like SMIL;
        </li>
        <li>enhanced modularity (separation of layout, content, appearance, semantics, etc.);
        </li>
        <li>allowing greater integration with the multiple XML environments.
        </li>
      </ul>
      <p>
        I'll touch on what seem to me to be some of the highlights of these changes:
      </p>
      <ol>
        <li>Textflow into shapes and editable text. The combination of these will allow users to enter text into an SVG &lt;textarea&gt;. This in fact, is part of the recommendation of SVG Tiny 1.2, so may in fact, begin to appear in browsers, sooner than some of the other changes. SVG 1.2 Full will offer considerably more control over the shape and layout of those objects. The specification also allows for the flow of text and graphics into a given shape, just to make things interesting.
        </li>
        <li>Paths and Vectors. These new effects appear to allow the union and intersecting of shapes without requiring step by step parsing of their attributes through script. I would suspect the implications for SMIL animation are quite compelling since we may imagine animating the subpaths of a larger path, individually, in ways that might support cartoon-like animation in which arms and legs might be independently controlled by local SMIL effects. I am told that this is indeed, a part of the intent, of the new vector effects. The interested reader is referred to the W3C's <a href="svgvectoreffectsprimer.html">SVG Vector Effects 1.2 Part 1: Primer</a>. The interested author is directed to the <a href="#Afterword">Afterword</a> (where plans for expansion of this manuscript are planned).
        </li>
        <li>Incorporation of audio and video that are synchronized with other time frames through SMIL in SVG 1.2 Tiny. So far as I can tell, no specification is offered for the processing of those media by ECMA Script, or through native SVG effects (e.g, applying filters to video clips), though provisions are made for the application of some simple SMIL2.0 transition effects (like wipes and fades).
        </li>
        <li>Extensions to SVG's clipping and compositing. This should allow for greater ease in utilizing both alpha channel information in 32 bit images and composite opacity as well as greater access to background images in various filters.
        </li>
        <li>Under the category of "Paint" are a host of relatively small enhancements including the ability to define a background color for an entire document, improved inheritance capabilities, some text- related things, and greater control over the stacking order of objects.
        </li>
        <li>For application development, the ability to assign focus to objects programmatically, as well as access to tooltips have been defined in SVG Tiny 1.2.
        </li>
        <li>Access to URI's and sockets. Enhanced abilities to connect SVG both to a server and to other machines, provide some fascinating directions for future expansions, particularly in areas of web application development and gaming.
        </li>
        <li>Limited access to client-side disk space including file upload and persistent data. Until these become implemented, we will have to rely on HTML, in one incarnation or another, to provide this functionality.
        </li>
        <li>Hooks into XML Binding Language (XBL). SVG was chosen by the W3C as a sort of test case (sXBL) from which XBL2.0 would be designed as a superset. We'll talk more about this in the next section.
        </li>
      </ol>
      <h3 id="SVG_futures">
        Nice, but not yet
      </h3>
      <p>
        What don't we see yet in SVG 1.1 or SVG1.2 that would be nice?
      </p>
      <p>
        Well, the obvious answer for me, as someone who doesn't read (or write) specs very well, would be "more examples that illustrate just what all the various features actually do!" I believe that those involved in the writing of specs (much as as is the case with mathematicians working on a theorem together) the intial discussion is carried on in English, but by the time the spec (or theorem) comes together, it requires such precision that a good deal of its appeal to the broader audience is lost.
      </p>
      <p>
        So, let me preface the following with some back-story to explain a bit of my own curious vantage point.
      </p>
      <p>
        I discovered SVG in around 2002. I was poking around on the web and discovered a link to what seemed to be the unique book on the market at the time: Andrew Watt's <em>Designing SVG Web Graphics</em><sup><a class="footnoteanc" href="#footnote73sym" id="footnote73anc">73</a></sup>. I bought it, looked through it, got an idea what SVG could do, thought it all looked promising but realized that there was at the time no way to really see or try the stuff without downloading applications. I didn't really feel like hooking up with a technology that didn't work in the courses I was teaching, and despite some of my interests in graphical computing, I decided to wait 'til I could do it in the browser<sup><a class="footnoteanc" href="#footnote74sym" id="footnote74anc">74</a></sup>. In the meantime I discovered VML, in which I could do graphics (and hence some graph theory that I had been itching to do for more than a decade) in the browser. This was right about the time that Internet Explorer had come to almost completely dominate the browser market, having nudged Netscape into practical oblivion. I played quite happily with VML until SVG matured a bit.
      </p>
      <p>
        That said, I may have been an early settler in SVG Land, but am certainly not one of its pioneers. I waited until the explorers came and built a few settlements and widened some of the trails so that a wagon could roll through.
      </p>
      <p>
        When I did discover that SVG could be run in the browser with a plug-in<sup><a class="footnoteanc" href="#footnote75sym" id="footnote75anc">75</a></sup> and found that VML had virtually no future, I decided to give SVG a try. I was annoyed about some things &mdash; the programming was all DOM2-ish (no innerHTML) and unlike VML it couldn't be nicely interleaved and overlaid with HTML in a web page. It needed to live in a separate page where it stood relatively alone without so much as Java awt or swing or HTML forms to mediate user interaction. These seemed like clear oversights on the part of the designers, but lo and behold, there were some pretty cool things (like filters and access to bitmaps) that I had not quite anticipated in a vector graphics standard. "Hey!" thought I "This could lead somewhere."
      </p>
      <p>
        So while I am grateful for the bitmap capabilities we do have in SVG, they are exactly, a source of some of what I am discontent with since I would like to see more of that capability. In truth, my wish list of features to see in SVG may overlap with some of what SVG 1.2 has to offer<sup><a class="footnoteanc" href="#footnote76sym" id="footnote76anc">76</a></sup>.
      </p>
      <ul>
        <li>Knowing the color of a particular pixel on the screen. I understand that there are potential security issues associated with giving scripts the ability to take pictures of the user's screen, but as of version 9, Opera seems to have implemented a getPixel and setPixel method that allows interrogating and setting pixel values for arbitrary pixels within a &lt;canvas&gt; object in the HTML environment.
        </li>
        <li>If we had client-side access to pixel values (for example, from local files) then we could not only apply convolution filters to bitmaps to display high contrast edges, but then we could convert the edges back to vectors. This could enable large amounts of data reduction to be done client-side which has clear applicability in distributed data gathering projects as might be done in scientific and military applications.
        </li>
        <li>A perhaps allied issue would be to have bitcopying capabilities, at least temporarily. This would, among other things, give the ability to slice a bitmap into subregions where each subregion is not merely the clip of the entirety &mdash; If we wish to make large scale jigsaw puzzles, and then scramble the resulting pieces, then numerous copies of the bitmap would likely need to be created using either &lt;clipPath&gt; or &lt;mask&gt;. Either is highly RAM intensive and would require, enormous allocations of memory to perform a fine-grained relocation of small chunks of imagery. At <a href="http://srufaculty.sru.edu/david.dailey/svg/puzzlestart3.svg">this location</a> one may see a simple instance of what I mean.
        </li>
      </ul>
      <p>
        If we wished to enable desktop image analysis to be done in the browser, then access to pixels will be pretty important. The &lt;canvas&gt; tag is something that has been agreed upon by the HTML Working Group to be a part of the new HTML5 standard, and several browsers have begun implementing it. It is possible that some combination of its use and SVG may give the sort of functionality we are discussing here, but it appears that the proposed &lt;canvas&gt; may be limited in its analysis to images that are created using it.
      </p>
      <p>
        As I have experimented more with SVG, my wish list has grown a bit. In fact, I have gone so far as to propose <a href="http://srufaculty.sru.edu/david.dailey/svg/Spec.html">a variety of extensions</a> to its layout functionality, its filters, its transformations, its drawing primitives and its gradient options. Many of these, I am pleased to see, were already or are now under some form of consideration by the SVG Working Group. The newly formed SVG Interest Group has helped to allow ideas in various states of formulation to be expounded upon and reflected upon in ways that help to refine one another's thinking before bringing new ideas to the Working Group.
      </p>
      <p>
        Herewith several items from my personal wish list as well as some comments about their status as I see it:
      </p>
      <ol>
        <li>The ability to deform an arbitrary quadrilateral into another arbitrary quadrilateral (as with the distort tool in Adobe Photoshop). The affine transformations allowed within SVG 1.1 and 1.2 allow scaling, translation, rotation and skew, which together offer mappings between arbitrary pairs of parallelograms. If we wished to be able to do the morphing of one bitmapped image into another, quadrilateral distortion would seem to be handy. To build something like the "liquefy" filter in Photoshop would likely rely on something like mesh-based distortions that fall outside the affine transformations in SVG1.x.
          <p>
            On this front, the past two years have seen considerable progress. The SVG Working Group has advanced a set of 3D transforms that allow perspective and more general transformations of the sort that some of us in the user community have been asking for. Take a look at <a href="http://srufaculty.sru.edu/david.dailey/svg/clipdrag12.svg">this example of simulated image warping</a> to get an idea of why these non-affine transforms could be handy.
          </p>
        </li>
        <li>Gradients of varieties other than just linear and radial To create smooth transitions of fill patterns across a variety of shapes or with more than two colors is likely to involve a more complex specification for gradients (such as mesh gradients). To piece together segments of linear and radial gradients to approximate omni-directional gradients has been compared by some to making smooth curves out of line segments &mdash; possible, but tedious. In the examples here that pertain to <a href="http://srufaculty.sru.edu/david.dailey/svg/SVGOpen2008/edges_of_plausibility.htm">gradients that are neither linear nor radial</a> a variety of desired effects are explored through script. A <a href="http://artis.imag.fr/Publications/2008/OBWBTS08/diffusion_curves.pdf">recent paper</a> by researchers from Adobe and INRIA has approached this topic through "diffusion curves", explores a very promising approach to this, while a more lightweight approach to the issue could be taken through the use of something like a <a href="http://srufaculty.sru.edu/david.dailey/svg/spec.html">&lt;contour&gt; tag</a> that allows morphing between a series of &lt;path&gt;s.
        </li>
        <li>Enabling concepts of adjacency, contiguity, and proximity. Some who have explored SVG as an option for cartographic and geographic information systems have reported the shortcomings that SVG 1.1 makes some things difficult
          <ul>
            <li>for regions to share borders. Why, for example, should we have to specify a complex bezier curve twice, if it is in fact shared by each of two adjacent &lt;path&gt; objects?
            </li>
            <li>for labels of objects to belong with objects. As object either animate or zoom, we may wish their labels to follow with some "sense" of not being occluded by surrounding content.
            </li>
            <li>for borders not to rescale as regions are zoomed. E.g. the border between Mongolia and China does not need to become 100 pixels thick when we are at 100X magnification.
            </li>
            <li>for more labels to become visible at increased levels of zoom (as in the way that a map viewed at one level of resolution might not show a smaller city like Harrisburg PA, or Nuremberg, but that at a closer level of zoom might show labels for small villages.
            </li>
          </ul>Given the fundamentally two-dimensional nature of SVG, the concepts of adjacency (as for maps, flowcharts, diagrams, and simulations) are intrinsically more crucial and potentially far richer than what HTML (with its intrinsic textual metaphor) can be expected to deal with. I believe that the vectorEffects module of SVG1.2 solves a part of these problems but not all. Ultimately, a sense of 2D physics together with concepts of local gravity and magnetism may be in line with binding objects together in a functional sense that would support their co-evolution under declarative animation and replication.
        </li>
        <li>Declarative drawing and replication. What I have in mind here is allowing a simple statement of a few pieces of markup to allow the declarative iteration of a family of related curves. The SVG Working Group to date has discussed at least three such notions: the concept of a &lt;fractal&gt; was discussed as early as 2002, while allied proposals for a &lt;doodle&gt; and a &lt;replicate&gt; tag have been proposed. The basic premise is that the non-programming SVG author may, in some way, be able to issue primitive commands that allow recursive or at least iterative operations to occur, without necessitating the inclusion of a full-fledged programming environment. Just as the &lt;animate&gt; tag from SMIL can be used to enable animation over time without programming, so might a &lt;replicate&gt; tag be be used to duplicate over space without programming. As such it is rather like an extrapolation of the &lt;use&gt; tag, with velocity and angular acceleration applied over a series of time-lapse photos.
        </li>
        <li>Some types of random noise other than what is provided through feTurbulence could be useful in allowing the class of natural textures that we can construct to expand.
        </li>
        <li>Additional filters (such as one can purchase as add-ons to Adobe Photoshop for example) would be handy. The convolution filters allowed are flexible, but for the average user, things like "plasticize" or "chromatize" might be more straightforward.
        </li>
        <li>Extension of the declarative animation model to include occasional imperative constructs: for example, might we not benefit from having the ability to define random durations or random x-y loci in our declarative markup without having to rely upon script? Likewise, a construct that allows us to specify that a certain object might move in such and such a direction until it encounters an edge or another object, might be quite a powerful extension to the quality of declarative code within SVG.
        </li>
        <li>Non rectangular &lt;pattern&gt; spaces. It's clear that most of this can be simulated through rectangular ones. And it is also quite likely that nondeterministic tilings will require script rather than markup for quite some time to come. But SVG could enable the non-programmer to produce interesting visual effects by simply enabling the choice of any of the uniform tilings. Some of these might actually prove to be practical since the hexagonal tiling for example is often used in simulation of battlefield scenarios since distance in that graph is slightly more similar to Euclidean than is distance in square grids.
        </li>
        <li>And of course, we have the simple request that the offset of a text should be expressible as a negative number &mdash; it seems rather inconsequential in contrast to some of the rest of this wish list.
        </li>
      </ol>
      <h3 id="SVG_world">
        Changes in the world around SVG.
      </h3>
      <p>
        SVG is one of numerous XML languages. As Doug Schepers, a member of the W3C's SVG Working Group has written
      </p>
      <blockquote>
        <p>
          "There are other specific domains that have highly structured tagsets just dripping with meaning, like <a href="http://www.xml-cml.org/">Chemical Markup Language (CML)</a>, <a href="http://www.sanesense.org/lgml/">Linguistics Markup Language (LGML)</a>, <a href="http://www.musicmarkup.info/">Music Markup Language (MML)</a>, <a href="http://www.mged.org/Workgroups/MAGE/mage.html">MicroArray and Gene Expression (MAGE</a> ‚Äî contrasted with the almost inevitable <a href="http://sourceforge.net/projects/zefania-sharp/">Bible Markup Language</a>)... mapping, geography, mathematics, psychology, literature, sociology, physics, architecture... every area of human endeavor has a systematic structure that is (or will soon be) encoded in some kind of tagging scheme, whether that be in the form of XML, RDF, or some other format. ..."<sup><a class="footnoteanc" href="#footnote77sym" id="footnote77anc">77</a></sup> 
        </p>
      </blockquote>
      <p>
        This raises a number of questions about how SVG relates not just to other XML languages but to the web, as a whole. Many of those thinking about and building the future of the web appear to be aiming toward considerably more integration of the information it contains than is currently possible. In 1998 Tim Berners-Lee, the same fellow who developed HTML and thence the World Wide Web, wrote an influential paper "The Semantic Web Roadmap" describing a vision for the future of the web, that has very much shaped many people's thinking about what should come next<sup><a class="footnoteanc" href="#footnote78sym" id="footnote78anc">78</a></sup>. A whole bevy of projects within the W3C seem at least to be consistent with, if not motivated by, that vision.
      </p>
      <p>
        I think there are really two major issues being addressed by a majority of the W3C's activities in areas affecting SVG: making different document types interoperable (so that we may, for example, borrow chunks of an HTML document and embed them into an SVG graphical presentation), and making documents understandable (by machines) for ease of finding, parsing, understanding and reusing. The latter of these initiatives is what generally constitutes the "semantic web".
      </p>
      <h4 id="Semantic_web">
        1. The Semantic Web
      </h4>
      <p>
        The primary principle here is that the web will become far more usable if the machines filtering the information have access to meta-tags that somehow describe what the information pertains to in some broad sense, and to the sorts of assertions that the information makes, expressed in some simplified grammar. If we know that the columns of a spreadsheet located at web site A are directly related to a particular assertion made at website B in relationship to a user's query, then the relevance of the data in the spreadsheet to the assertion may very well, help to answer the query with considerably more precision than the presentation of a set of matches that happens to contain both A and B (interspersed with a dozen other sites). How might we design a system of meanings so that this type of inference might be made automatically? Several things are required: the ability of the machines to be able to parse and read documents of many types, consistent meta-descriptions which transcend content areas, the ability of content to be tagged within the web framework so that such data once retrieved can be easily interleaved into new document formats appropriate to the query. A simplified statement of what the semantic web is is offered by Berners-Lee in his document about what the semantic web is not:
      </p>
      <blockquote>
        <p>
          "The Semantic Web is what we will get if we perform the same globalization process to Knowledge Representation that the Web initially did to Hypertext"<sup><a class="footnoteanc" href="#footnote79sym" id="footnote79anc">79</a></sup> 
        </p>
      </blockquote>
      <p>
        Having had personal conversations during the 1980's with both with Marvin Minsky and Ted Nelson<sup><a class="footnoteanc" href="#footnote80sym" id="footnote80anc">80</a></sup>, the above statement brings the whole rationale for the Semantic Web into focus for me, though it might be a bit terse for those without a background in Cognitive Science. I suspect there could be several distinct instantiations of the above analogy, though I must confess not to have done enough reading on the topic to convince myself that the W3C's instantiation of it is the unique solution to the equation. What it necessitates, though, is extreme extensibility: lots of domains of semantic richness and plenty of grammatical glue to interconnect the domains, and plenty of flexibility in finding various nuggets within a domain that may be relevant to our concerns. The W3C has been working on all of those issues.
      </p>
      <h4 id="XPATH">
        2. XPath
      </h4>
      <p>
        The XPATH recommendation from the W3C gives an abbreviated and simplified way of accessing nodes in an XML DOM tree that resembles directory paths (a ala UNIX) together with a wildcard-empowered, regular expression-like apparatus for gathering collections of nodes that match a given pattern. Terse, but powerful, the XPATH recommendation allows us to quickly assemble nodes matching any of a flexible set of criteria.
      </p>
      <p>
        Within an SVG DOM we might, instead of opening all group tags to see if they have rectangles colored yellow inside them, we might instead, using XPATH, issue a find statement that returns a list of all nodes matching
      </p><code class="line">//svg/g/rect[@fill=yellow]</code>
      <p>
        The above code serves basically the same purpose as the following
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
var G=document.getElementByTagName("g")<br />var A=new Array()<br />for (i in G){<br /> if (G.item(i).nodeName=="rect")<br />  if (G.item(i).getAttribute("fill")=="yellow")<br />  A.push(G.item(i))<br />}<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Some of the readers, may question our inclusion of XPATH in a chapter on "directions for development" since XPATH has, indeed, been around for a good long while, by web standards. But consistent with one of the goals of this book &mdash; to present relatively stable technology &mdash; XPATH implementations in the browser have yet to reach that criterion. Though many examples can be found that work in both Opera and Firefox, Internet Explorer does not yet have a viable XPATH implementation. In fact, several aspects of the Opera and Firefox implementations are enough different that this is as yet not a technology I would wish to try to convey to a practical-minded audience.
      </p>
      <p>
        It is, however, a very nice technology, and is considered prerequisite for another nice technology that will probably be exploding in ubiquity within the next few years:
      </p>
      <h4 id="XSLT">
        3. XSLT
      </h4>
      <p>
        XSLT or Extensible Stylesheet Language Transformations is another web consortium recommendation that has begun, in recent years, to become fairly widely deployed. It enables us to take one XML description for a set of data (typically numeric and textual with some sort of semantic descriptors provided by the tagged markup of that data) and to transform the data into some other format, typically for presentation (like XHTML or SVG). It provides a relatively clean way of separating content from presentation &mdash; a long-standing objective of the web development community at large for several years now. XSLT is actually a programming language (a Turing-complete one at that), and is generally not recommended for the skittish.
      </p>
      <p>
        As an idea of how XSLT works, suppose we have an XML data file such as the following (only larger):
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;data&gt;<br />&lt;record&gt;<br /> &lt;grade&gt;88&lt;/grade&gt;<br />  &lt;assgn&gt;1&lt;/assgn&gt;<br />&lt;/record&gt;<br />&lt;record&gt;<br />  &lt;grade&gt;72&lt;/grade&gt;<br />  &lt;assgn&gt;2&lt;/assgn&gt;<br />&lt;/record&gt;<br />&lt;record&gt;<br />  &lt;grade&gt;66&lt;/grade&gt;<br />  &lt;assgn&gt;3&lt;/assgn&gt;<br />&lt;/record&gt;<br />&lt;/data&gt;<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        If we wish to plot those data in an SVG page with rectangles drawn to the heights of the data points, we would apply an XSLT style-sheet transformation somewhat like the following:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;?xml version="1.0" encoding="utf-8"?&gt;<br />&lt;xsl:transform xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0" &gt;<br /> &lt;xsl:template match="//data"&gt;<br /> &lt;svg xmlns="http://www.w3.org/2000/svg"&gt; <br /> &lt;xsl:for-each select="record"&gt;<br /> &lt;xsl:variable name="g" select="grade"/&gt;<br /> &lt;rect x="{position()*25}" y="-{$g*2}" <br /> height="{$g*2}" width="20" fill="blue"/&gt;<br /> &lt;text x="{position()*25}" y="0"&gt;<br /> &lt;xsl:value-of select="assgn"/&gt;<br /> &lt;/text&gt;<br /> &lt;/xsl:for-each&gt;<br /> &lt;/svg&gt;<br /> &lt;/xsl:template&gt;<br />&lt;/xsl:transform&gt;<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <h4 id="XFORMS">
        4. XForms
      </h4>
      <p>
        According to Wikipedia, "XForms 1.0 (Second Edition) was made an official W3C Recommendation on 14th March 2006." It appears to be an integral part of the soon-to-arrive XHTML 2 recommendation, and is broad enough to be useful across the XML spectrum. XForms will provide access to <em>form-like</em> elements across multiple presentation models. That is, whether one uses SVG or HTML, XHTML, or something else entirely, one should be able to interface with general descriptions, or schema, of what a &lt;select&gt; object, for example, does, in some HTML-independent way. A brief and informative treatment of the subject has been provided by Antoine Quint<sup><a class="footnoteanc" href="#footnote81sym" id="footnote81anc">81</a></sup>. The integration of Xforms with SVG has not yet been completely reconciled<sup><a class="footnoteanc" href="#footnote82sym" id="footnote82anc">82</a></sup>, though it appears to have been given considerable thought by the relevant working groups.
      </p>
      <p>
        As noted above, SVG 1.2 is poised to provide the functionality of editable textareas natively without extensions into the realm of XForms. This fact suggests that the world of XForms (despite its obvious appeal) may be a bit distant from native browser functionality, at this point in time, since the urgency of need for editable text seems to have outstripped the working group's patience for the implementation of XForms. However, various applications, particularly involving AJAX have already been used, with XForms, allowing for ease of integration of server-side data and client-side presentation. It is another of those technologies that will be essential reading for the web practitioner of the near future.
      </p>
      <h4 id="AJAX">
        5. AJAX
      </h4>
      <p>
        AJAX is an emerging technology that is already in widespread use. With just a little bit of browser detection, one can get into AJAX across platforms today. While AJAX technically stands for Asynchronous JavaScript with XML, it has come to mean a much broader collection of methods (sometimes allowing the terser JSON format) for communicating between client and server without forcing a redraw of the entire page (historically accomplished through window.location=URL).
      </p>
      <p>
        I recall experimenting with allied techniques many years ago, developing multi-person dialogues in the browser, using hidden frames refreshed with a window.setTimeout. Others seem to have been experimenting with more sophisticated approaches considerably earlier. The reason this topic is not considered in greater detail in this book, is that AJAX is not a stand-alone client-side technology. One needs a server running programs to do AJAX. Those programs might be UNIX shell, C++, Java, server-side JavaScript, Microsoft's language-du-jour, PHP, Perl, Ruby, or a dozen other technologies, each with considerable idiosyncracy of installation, look and feel, and access to another dozen database schemes of varying complexity and price. A proper chapter on AJAX, I feel, should be written for each such implementation since one cannot really discuss the matter without addressing what happens on the server. In acknowledgment, however, of the sheer coolness of AJAX and allied technologies, I present a completely stripped down version with a very simple server-side UNIX shell script (entailing one line of actual script &mdash; plus associated Job Control Language aka "magic hoopla"<sup><a class="footnoteanc" href="#footnote83sym" id="footnote83anc">83</a></sup> ).
      </p>
      <p>
        Let's start with the server-side:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="313">
        <col width="297" />
        <tbody>
          <tr>
            <td class="caption">
              The file <em>guess</em> on a unix server with cgi enabled.
            </td>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>#! /bin/sh<br />echo "Content-type: text/html"<br />echo<br />grep ^$1 words|head -3<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The above has the property that it takes whatever string is passed to it, looks it up in a dictionary (in this case a file named "words" containing a simple listing of English words without definitions &mdash; one line per word) and returns the first three lines of text (in this case English words).
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="376" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Finding three words that start with user's keystrokes.
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>&lt;html&gt;&lt;head&gt;<br />&lt;title&gt;Finishing your word for you&lt;/title&gt;<br />&lt;script&gt;<br />function createRequestObject() {<br /> var RQ<br /> var B=navigator.appName<br /> if(B=="Microsoft Internet Explorer"){<br /> MSX="Microsoft.XMLHTTP"<br /> RQ=new ActiveXObject(MSX)<br /> }<br /> else RQ=new XMLHttpRequest()<br /> return RQ<br />}<br />var H=createRequestObject();<br />function send(d) {<br /> H.open('get',"http://myserver.edu/guess?"+d);<br /> H.onreadystatechange=doSomething; <br /> H.send(null);<br />}<br /><br />function doSomething() {<br /> if(H.readyState == 4){<br /> var E=document.getElementById("response")<br /> E.innerHTML=H.responseText<br /> }<br />}<br />&lt;/script&gt;&lt;/head&gt;&lt;body&gt;<br />finishing a word for you<br /> &lt;form name="f"&gt; type something in here: <br /> &lt;input name="s" onkeyup="send(s.value)"&gt;<br /> &lt;/form&gt;<br /> &lt;div id="response"&gt;<br />&lt;/body&gt;&lt;/html&gt;<br /></code>
</pre>
            </td>
            <td class="annotate">
              <br />
              <br />
              <br />
              <br />
              <p>
                This creates and returns an XML request object for either IE or other browsers.
              </p><br />
              <p>
                The results of this function will be stored in a global variable H.
              </p><br />
              <p>
                Each keystroke initiates a new request for data using H. When the ready state of H changes, then we will doSomething().
              </p>
              <p>
                If H is appropriately ready (state is 4) then we'll scribble the server's reply into a div tag.
              </p>
              <p>
                HTML to trap and send keystrokes. Also a div tag in which to display our results.
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The above works surprisingly fast &mdash; so fast in fact that when Google used similar technology is some of its experimental web sites (prior to the unveiling of its Google maps) interest was rapidly fanned.
      </p>
      <h4 id="XBL">
        6. XBL, sXBL, XUL, RDF, OWL
      </h4>
      <p>
        A host of other technologies are available to add flavor and texture to our alphabet soup. I have not begun to experiment with any of these so am not the proper person to explain them. I have, however, an awareness of their importance to where the web seems to be going. Accordingly, I would encourage the reader to cultivate a conversational knowledge of the vocabulary. To those energetic enough to learn and write more about them, I, for one, will welcome simplified explanations of how these things fit into our future web development projects.
      </p>
      <p>
        XBL is extensible binding language. It is one more way of making our web projects modular. Just as CSS and XSLT provide ways of separating content from presentation, XBL is a way of separating both from interface, behavior, and script. The various widgets that one expects in a user interface: scrollbars, color pickers, sliders, and even radio buttons are the domain of the "widget specifications": XUL and competing specifications (XAML, Laszlo XML, etc.). The idea is to come up with generalized definitions of commonly used widgets that include look and feel of how those things should react to the user and the data they should capture. Once we have a stable description of what a color picker is, then is when we use XBL to apply a different flavor (or "skin") to that particular element. The Mozilla project seems to have made considerable exploration into this frontier, though Microsoft's new XAML, which shares some aspects in common with SVG, apparently offers great and extensible functionality in this arena. The Open Laszlo project touts a good deal of progress in the area of usability for the web, leveraging its own approach to widget extensibility. Since the various developers seem to be moving in slightly different directions here, it is difficult to see how future standards might emerge, but the same pressures toward interoperability which in time led to ASCII and HTML, will undoubtedly serve to homogenize the domain over time.
      </p>
      <p>
        Where XBL and XUL come into relevance for SVG is in sXBL &mdash; an attempt to consolidate the XBL recommendation within a particular domain: SVG. The strategy is thus: let us first build a real XBL specification for one interesting XML language: SVG. Then after we see how the specification emerges and examine the sorts of problems encountered in approaching one very rich domain, let us proceed to generalize to the broader XML environment. The working sXBL working draft has this to say:
      </p>
      <p>
        "sXBL is intended to be an SVG-specific first version of a more general-purpose XBL specification (e.g., "XBL 2.0"). The intent is that, in the future, a general-purpose and modularly-defined XBL specification will be developed which will replace this specification and will define additional features that are necessary to support scenarios beyond SVG, such as integration into web browsers that support CSS. Once a general-purpose XBL is defined, sXBL would just become an SVG-specific subset (i.e., a profile) of the larger XBL specification."<sup><a class="footnoteanc" href="#footnote84sym" id="footnote84anc">84</a></sup> 
      </p>
      <p>
        SVG is, thus, being used as a sort of test case by the W3C for the development of their next generation XBL. An example provided in the draft is that of a flow-chart. Suppose, we have a semantically rich XML description of flow charts (in general) that we would like to render at the lower level of SVG, complete with possible animation and interactivity. How might we provide extensions into such common realms of graphical presentation? Numerous other content areas that come to mind: taxonomies and family trees, buildings, chemical markup, feedback loops, wiring diagrams, as well as things that are clearly simpler, such as sliders and content panes or windows. Examples provided within the draft include the flowchart, an example using geographic markup language (involving a city and a river), a credit card transaction form, a menubar, and a magazine layout.
      </p>
      <p>
        The concept that domain specific knowledge might be developed (within the appropriate content area) and that relatively simplified hooks will exist for rendering that content in SVG (or other presentation languages) is a compelling one. It seems, from what has emerged on the web in the past few years, that it will, indeed, happen.
      </p>
      <p>
        RDF stands for Resource Description Framework &mdash; a collection of simple declarative statements that label a link (predicate) between a subject and an object. A collection of such declarations forms a directed labeled graph representing a series of interrelated semantic assertions. The purpose of RDF is to represent information about resources on the web. An excellent place to start is the RDF Primer<sup><a class="footnoteanc" href="#footnote85sym" id="footnote85anc">85</a></sup>. RDF is a somewhat central component of activity in the development of the semantic web. It is intended to make machine processable statements so that information relevant to a query might more accurately be found than would be the case relying on a purely lexical analysis of the natural language associated with a particular narrative.
      </p>
      <p>
        OWL stands for Web Ontology Language and is, to my way of thinking, RDF augmented with predicate logic and set theory. That is, it comes with the semantics of unions and intersections, deduction, instantiation, and generalization. Not included are the semantics of time, modality, causality, uncertainty, similarity or some of the richer domains of semantic expression lying in what one might call the near-periphery of mathematics. It is nevertheless likely to be an important addition to automated deduction in the semantic web, as we seek to expand our information gathering resources.
      </p>
      <h4 id="other_developments">
        7. Other developments
      </h4>
      <p>
        In addition to the activities of the W3C, others have been making and continue to build the world wide web, sometimes with an impatience about the pace at which any standards body is likely to move. Microsoft's XAML and Silverlight and Adobe's FLEX and MARS projects have similar goals to much of what the Web consortium has undertaken. A big strong surge of interest in "fat-clients" or web application development has led development into new directions. The W3C has recently convened a new HTML Working group, devloping HTML5 with an interest in supporting such growth. <sup><a class="footnoteanc" href="#footnote86sym" id="footnote86anc">86</a></sup> 
      </p>
      <h3 id="future_large">
        The future at large.
      </h3>
      <p>
        The world of the web is a big place. This statement is so apparent that it is almost trite. As a truism, however, its certainty expands as our depth of understanding of the web expands. In the constellation of technologies that relate to SVG are included all those endeavors which seek to affiliate meaning with visual reality. At the same time SVG provides a way for the individual to express ideas more subtle and complex and to broader audiences than HTML (even as enriched by JavaScript) was able to do. It is this arena where meaning meets the technology of expression where SVG's future lies.
      </p>
      <p>
        Since the early 1970's, researchers in the various fields of cognitive science have been writing about the vast semantic network which is human knowledge. The web has given that network a physical instantiation. One of its major problems, though, has been its extraordinary success. It has grown so fast that humans cannot classify, or catalog its content. There are just not enough librarians to go around. Certainly, in the early days of the web, there was a hope by web architects that authors of pages would include metatags that provide classification data (rather like MARC records in the library world). That is, each author should provide not just an ISBN (namely a unique identifier for the work &mdash; a URI in webspace) but a proper LC classification and other fields pertinent to the cataloging of the work. Predictably, most authors of important texts that came to populate the web didn't take time to fill out the various rubrics thrust at them by the bureaucrats and bean-counters. In the world of print publishing, a scientist was not asked to say on which shelf her books should be stacked in the library, so why would we expect the web author to do any more?
      </p>
      <p>
        The undersupply of humans available to catalog the web gave rise to the search engines (Yahoo, Lycos, AltaVista, Google and the rest). Search engines are built around processes which scour the net robotically, looking for things and connections between things. The meanings of those things, though, have been generally unknown to the machines doing the searching &mdash; those processes have had to rely on the words of the utterances themselves &mdash; the raw text of the expression. Words, however, tend to be ambiguous having multiple definitions, senses, and implications. We humans disambiguate through the context of a word's appearance, using our intelligence. Lacking that intelligence, machines are likely to make mistakes if they attempt to disambiguate the subtleties of words. The "post-Chomskian" linguistics of the 1970's and 1980's was replete with examples of how thorny the problems of semantic disambiguation actually are. A first generation approach to the problem was to ask authors to provide the metadata. They refused.
      </p>
      <p>
        A second generation approach is to minimize the amount of natural language processing required of our robots and to look merely at the words in use. Purely lexicographic approaches to document retrieval have been studied since the early days of computing<sup><a class="footnoteanc" href="#footnote87sym" id="footnote87anc">87</a></sup>. Documents that use similar vocabulary are likely to be semantically related, though some false positives are likely to be encountered if that is our only criterion for evaluating document proximity. Approaches which might not have been computationally possible in 1957, suddenly are fifty years later. Specifically, we might associate two documents not just based on their lexical similarity, but on other considerations as well. We might examine their internal lexical structures of documents, such as revealed by co-occurrences of words within documents, or the degree to which their lexical parse-trees coincide. We might analyze behavioral responses to them made by humans. If the response patterns evoked by two documents coincide &mdash; if two documents are strongly correlated in terms of who uses them, based on library checkouts, web hypertext references or bibliographic citation &mdash; then they are likely to be related. Both provide means for semantic disambiguation on the basis of context, though with far less intelligence than a human would bring to bear on the situation. Modern search engines use a multitude of approaches of this second generation variety.
      </p>
      <p>
        A third-generation approach seems to be to continue building artificial intelligence engines that will be able to reason through the problems of content classification and shelve all the books of the human library appropriately. Hope that such projects might succeed has not been abandoned. Federal funding for research in artificial intelligence appears to have been mercurial, but seems to be on the rebound in recent years<sup><a class="footnoteanc" href="#footnote88sym" id="footnote88anc">88</a></sup>. The boundary between sophisticated lexico-grammatical (second generation) approaches and truly semantic approaches becomes blurred, but it is clear that the major search engines are not oblivious to the past fifty years of research in AI. When quizzed by members of the media about their project to digitize books, one Google researcher acknowledged that some of the readers of those books would not be human<sup><a class="footnoteanc" href="#footnote89sym" id="footnote89anc">89</a></sup>. 
      </p>
      <p>
        The Semantic Web seems to be a sort of hybridized variant of these approaches: meaningful tags that carry semantics simple enough to be retrievable by machines are embedded as, to use Chomsky's term, deep structures associated with the presentation itself. Then, rather than relying on the surface structure, that is the utterance or presentation markup text (carried by SVG or HTML) itself, the semantic tags associated with the XML at the semantic level are used as the retrieval tags.
      </p>
      <p>
        Numerous questions arise. What makes this approach different from reliance on authors to create metatags (albeit using a more structured metalanguage)? Why should authors of 2010 be less lazy than authors of 1995? How will the multiple, nonstandardized, and ever-evolving realms of semantic expression ever find sufficient standardization to glue various related expressions together? Suppose we have two expressions (i.e., utterances, or web-pages) both discussing a common topic. Further, suppose that the topics they discuss have yet to be codified by a standardized semantic vocabulary. Then how might we expect the Semantic Web to help in the cataloging, classification and ultimate retrieval of such information? Might the Semantic Web become a prescriptive rather than a descriptive form of expression, forcing our thoughts in some ways to conform to the mold lest be disallowed from presence in the web of the future? How powerful and/or applicable ultimately is the class of inference motivated by our standardized ontology? Since it assumes, as axiomatic, only that subclass of semantics essentially involving standard first order logic, set theory, quantifiers and arithmetic, its scope of inference is no more nor less than the language of conventional mathematics. Inferences associated with causality, possibility, and even time, are not axiomatized. Nor is it attempted to create an all-encompassing set of semantic primitives. Hence the set of inferences automated within the Semantic Web as currently conceptualized will be relatively small compared to the vastness of human experience. Even if we did extend the set of semantic primitives to include a richer vocabulary, would this still suffice to allow the vision of a machine-parseable representation of human knowledge? If we agree with the plausible hypothesis that the collective scope of human experience broadens over time through emergent and non-reductionist properties, then a theorem I once proved on semantic reduction kicks in, suggesting some sort of computational unfeasibility of the grand endeavor<sup><a class="footnoteanc" href="#footnote90sym" id="footnote90anc">90</a></sup>. 
      </p>
      <p>
        The arguments on these topics are broad, deep and multifaceted, but two things can be said in favor of the Semantic Web. First, much of the knowledge that will be encoded with our text will have its semantic undernet constructed automatically by the word-processors, spreadsheets, and drawing packages of the not-so-distant future. Such software will proofread our documents not only for spelling and grammatical consistency but for inferential consistency, allowing us to verify the inferential implications of our work with a minimum of manual tagging. That is, the author's laziness will, to large extent, be overcome by a new generation of authoring tools that have at least a primitive semantic awareness built in. Second, it is clear that by augmenting the textual and graphical narratives of the raw hypertext with inferential tags, albeit shallow ones, the web will become a richer environment in which enormous numbers of connections, classifications and cataloguings will be able to be made robotically. Augmentation of the current web with the second order predicate calculus (even without concepts of time, causality, need, possibility, gravity, mass, desire, and imagination) will be a large leap forward. Perhaps from there, the steps into a larger semantic domain will be less daunting than they appear to many at the current point in time.
      </p>
      <p>
        The extrapolation from discussion of SVG to the entirety of the web and its semantics may seem a bit far-fetched. But given the W3C's track record with helping to guide the pulse of the web (HTML, CSS, XML, MathML), together with the endorsements of several very influential projects and corporations, SVG appears to have a good deal of promise. Its extensibility through a well-reasoned and open source pathway to connectivity with rich widgets, and standardized semantic realms makes this extrapolation quite natural.
      </p>
      <p>
        So long as our display devices (paper, cell phones, PDA's, gaming boxes, and computer screens) remain two-dimensional, then the ability to enrich the graphical presentation as well as the user's interface with that presentation &mdash; exactly SVG's purview &mdash; will compel artists, scientists, consumers and developers to innovate. We may choose either proprietary solutions, or standardized ones. I rather prefer the latter &mdash; but then I prefer to live in a society where the constitution may be read without paying royalties to royalty.
      </p>
      <p>
        A few years back someone on the SVG-developers discussion group posed the question of what it would take to infuse SVG with the vitality needed to bring the technology into the degree of public awareness it deserves. I replied:
      </p>
      <blockquote>
        <p>
          "...what SVG needs is a "killer app." Something that runs in the browser (so everybody can use it without any download), is very GUI, generates SVG with SMIL and or JavaScript as output, has good coding and markup support under the hood, and takes the concept of the user-interface and ease-of-use a bit further than the now 20-year old user-interfaces associated with the Adobe/Macromedia/Microsoft/etc product lines. It should allow drop in data-spigots (which can fuel individual objects), gradient and texture designers (including fractal generators), filter feedback networks, and should use mouse-event streams (perhaps with chording) to choreograph events (instead of story boards), magnetic deformers (with multiple flavors of magnetism), web awareness, lexical and semantic parsing (with thesauri), concurrent multiple authorship, etc. That oughta ensure SVG's vitality and preserve human dignity at the same time."<sup><a class="footnoteanc" href="#footnote91sym" id="footnote91anc">91</a></sup> 
        </p>
      </blockquote>
      <p>
        In retrospect, maybe all it really needed was native support in a couple of important and vigorous web browsers. After all, that's what it now has, and I get the sense that people are starting to take notice.
      </p>
      <h2 id="HTML_basics">
        Appendix I:HTML basics
      </h2>
      <blockquote>
        <p>
          <em>Originally, this manuscript was intended as a print publication: self-contained and all. As such, a simple chapter that reviewed the parts of HTML relevant to SVG seemed appropriate. But since it was adopted by the W3C's SVG Interest Group in the summer of 2008, I have become increasingly aware that this particular Appendix has the wrong author. I point you to Dave Raggett's excellent primer here <a href="http://www.w3.org/MarkUp/Guide/">Getting Started with HTML</a> .</em>
        </p>
        <p>
          <em>The reader is also reminded of some of the comments in the preceding section about HTML5. This emerging specification will both loosen the syntax of the existing language and broaden it. Several browser manufacturers are already implementing parts of HTML5, and one should also be aware of those developments, as the landscape of HTML is in the midst of rather rapid evolution.</em>
        </p>
        <p>
          <em>Nevertheless, I leave these comments in, since there are places in the book proper, that I believe may make reference to some of this material. I have not, however, extended the effort to clean up all the formatting problems associated with conversion from MS Word to HTML.</em>
        </p>
        <p>
          <em>Please read</em> tentatively under the assumption that this appendix is likely to go away.
        </p>
      </blockquote>
      <p>
        While numerous introductory guides to HTML exist<sup><a class="footnoteanc" href="#footnote92sym" id="footnote92anc">92</a></sup> this section addresses the concerns of three possibly overlapping groups:
      </p>
      <ul>
        <li>those who have already authored web pages and have a basic understanding of HTML
        </li>
        <li>those who are interested in SVG but who have not already worked with HTML
        </li>
        <li>those who merely want HTML as a vehicle for presenting and interacting with SVG content.
        </li>
      </ul>
      <p>
        As such, this section will present a bare bones subset of HTML, emphasizing just those aspects of the language appropriate for getting started with SVG.
      </p>
      <p>
        <strong>HTML defined</strong>: HTML or Hyper Text Markup Language is a collection of notations that an author places into a web document. Those notations instruct web browser software how to display the information in that document in the browser's window on the computer screen. The notations of HTML consist mainly of tags, words or other codes, written inside less than ("&lt;") and greater than ("&gt;") brackets: &lt;<em>tag</em>&gt;.
      </p>
      <p>
        For a time, HTML came to be used almost interchangeably with XHTML, a more structured version of HTML which is consistent with XML, the superfamily of languages of which both SVG and XHTML are subsets. (With the recent opening of discussions about HTML5, that interchangeability within the popular culture at large, shows signs of weakining, as the advocates for the distinctiveness of HTML from XHTML seem to have won a battle of some sort for control of the future of the HTML specification.)
      </p>
      <p>
        <strong>Grammar in html:</strong> Generally speaking, each tag marks the beginning of an activity intended to be interpreted by the web browser software<sup><a class="footnoteanc" href="#footnote93sym" id="footnote93anc">93</a></sup>. That activity remains in effect until the tag is turned off by notation such as &lt;/<em>tag</em>&gt;.
      </p>
      <p>
        For example to begin boldfacing a word, like "<strong>artichoke</strong>," one writes something like this:
      </p>
      <p>
        &lt;b&gt; artichoke &lt;/b&gt;
      </p>
      <p>
        The two tags involved are the &lt;b&gt; and the &lt;/b&gt;. The first begins boldfacing; the second turns it off.&nbsp;
      </p>
      <p>
        Each tag has a tagname or nodeName (&lt;b&gt; has a tagname of "b"; &lt;i&gt; has a tagname of "i"). Some tags also have a series of attributes consisting of pairs of attribute names and attribute values.
      </p>
      <p>
        &lt;img src="happy.jpg" width="400" height="200" alt="happy image" /&gt;
      </p>
      <p>
        In the above example the tagname is "img" and there are four attributes defined within the tag: the <em>src</em>, the <em>width</em>, the <em>height</em>, and the <em>alt</em>. The value of the attribute <em>src</em> is the string "happy.jpg"
      </p>
      <p>
        <strong>The basic structure of a document:</strong>
      </p>
      <p>
        DOCTYPE declaration:
      </p>
      <p>
        Oftentimes HTML documents begin with a DOCTYPE declaration (DTD) which declares the variety or version of HTML we wish to have the browser interpret. For cross-browser consistency, a generic DOCTYPE declaration, such as the following, may be most practical.
      </p>
      <p>
        &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;<sup><a class="footnoteanc" href="#footnote94sym" id="footnote94anc">94</a></sup> 
      </p>
      <p>
        HTML identifier:
      </p>
      <p>
        An HTML document typically begins with &lt;html&gt;, and ends with &lt;/html&gt;&mdash; these bracket or enclose the entire document.
      </p>
      <p>
        A "head" with information about the document.
      </p>
      <p>
        &lt;head&gt; material describing the document &lt;/head&gt;
      </p>
      <p>
        Among things which appear in the header, a title is considered necessary, while other things like &lt;meta&gt; keywords are viewed as useful for providing hint about content to various Internet search engines.
      </p>
      <p>
        &lt;title&gt; The title of the document &lt;/title&gt;
      </p>
      <p>
        A body with information to appear in the document
      </p>
      <p>
        &lt;body&gt; materials constituting the document itself &lt;/body&gt;
      </p>
      <p>
        <strong>An example:</strong>
      </p>
      <dl>
        <dd>
          <table border="1" cellpadding="1" cellspacing="3" width="570">
            <col width="246" />
            <tbody>
              <tr>
                <td>
                  <p>
                    &lt;html&gt;<br />
                    &lt;head&gt;<br />
                    &lt;title&gt; Simple example&lt;/title&gt;<br />
                    &lt;/head&gt;<br />
                    &lt;body&gt;<br />
                    This is a simple web
                  </p>
                  <p>
                    page.<br />
                    &lt;/body&gt;&lt;/html&gt;
                  </p>
                </td>
                <td>
                  <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/41e2ad47.png" alt="screen shot of web page showing text 'This is a simple web page'" id="graphics165" height="222" width="426" />
                </td>
              </tr>
              <tr>
                <td>
                  <strong>The HTML</strong>
                </td>
                <td>
                  <strong>What it looks like in a browser</strong>
                </td>
              </tr>
            </tbody>
          </table>
        </dd>
      </dl>
      <p>
        The above text ("The HTML") represents a web page including the basic parts: head, title and body. Note that carriage returns are relatively unimportant in HTML: both the end-body and end-html tags appear on the same line above. Also note that one tag, like <code class="line">&lt;head&gt;&lt;/head&gt;</code> may have another nested inside it (the title tag is inside the head tag). It is considered bad grammar to allow tags to "straddle" one another as in the example that follows.
      </p>
      <p>
        <strong>Bad example:</strong>
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              &lt;html&gt; &lt;head&gt; &lt;title&gt; Simple example &lt;/head&gt;&lt;/title&gt; &lt;body&gt;
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Here the title tag straddles the head tag.
      </p>
      <p>
        And the body tag is never terminated.
      </p>
      <p>
        &lt;/html&gt;
      </p>
      <p>
        The bad example above displays just fine in most web browsers, though it does not parse properly under strict XHTML conventions<sup><a class="footnoteanc" href="#footnote95sym" id="footnote95anc">95</a></sup>. 
      </p>
      <p>
        <strong>Basic HTML tags for use with SVG:</strong>
      </p>
      <p>
        Perhaps the &lt;FORM&gt; with its arsenal of form elements, or "widgets," provides the most obvious reason for using HTML in conjunction with SVG. Radio buttons, selects, and especially textareas can all be built using SVG with JavaScript, but the ready-made event-handling behavior of the family of HTML widgets make HTML a distinctly convenient companion to SVG when it comes to handling input from the user. The amount of JavaScript programming required to provide (with cross-browser consistency) the interface associated with the HTML &lt;textarea&gt; or the &lt;input type="file"&gt; would be, at the current time, quite extensive. Plans for developing these capabilities natively within SVG are under active consideration.
      </p>
      <p>
        Since the early days of the World Wide Web, forms have been a central part of the document object model. Each form within an HTML document may be referred to either by its name, its id or by its position within the document.
      </p>
      <p>
        Form elements
      </p>
      <p>
        Discussed and illustrated below are standard form elements each of which may have some utility in working with SVG. Generally, all form elements respond to standard mouse and keyboard events: <em>onclick</em>, <em>onmouseover</em>, <em>onblur</em>, and the like, and where appropriate, <em>onchange</em>. Most respond to CSS techniques for adjusting their appearances.
      </p>
      <ol>
        <li>
          <strong>&lt;input&gt;</strong>
        </li>
      </ol>
      <p>
        The &lt;input&gt; is represented by a small rectangle that can have up to one line of text entered by the user. The data in the &lt;input&gt; is determined by its <em>value</em>. The <em>value</em> of an input can be set or read by a script. Commonly used attributes include <em>size</em> which adjusts the width of the input and <em>maxlength</em> that restricts the number of characters that can be entered into the rectangle. <em>maxlength</em> is particularly useful in handling data that will be submitted to server-side scripts, since it prevents the inadvertent or malicious sending of enormous amounts of data to one's server.
      </p>
      <table border="1" cellpadding="1" cellspacing="3" width="459">
        <col width="93" />
        <col width="260" />
        <col width="86" />
        <tbody>
          <tr>
            <td>
              Description
            </td>
            <td>
              HTML
            </td>
            <td>
              appearance
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                default
              </p>
            </td>
            <td>
              &lt;input&gt;
            </td>
            <td>
              <input />
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                text
              </p>
            </td>
            <td>
              &lt;input type="text"&gt;
            </td>
            <td>
              <input type="text" />
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                narrower<br />
                appearance
              </p>
            </td>
            <td>
              &lt;input size="5"&gt;
            </td>
            <td>
              <input size="5" />
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                less data than<br />
                could fit
              </p>
            </td>
            <td>
              <p>
                &lt;input size="2" value="llll"&gt;
              </p>
            </td>
            <td>
              <input size="2" value="llll" />
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                more data<br />
                than fits
              </p>
            </td>
            <td>
              <p>
                &lt;input size="2" value="mmmm"&gt;
              </p>
            </td>
            <td>
              <input size="2" value="mmmm" />
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                restricted<br />
                length
              </p>
            </td>
            <td>
              <p>
                &lt;input maxlength="6" value="6chars"&gt;
              </p>
            </td>
            <td>
              <input maxlength="6" value="6chars" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        <strong>Common uses of text inputs and their appearance.</strong>
      </p>
      <ol>
        <li>
          <strong>&lt;input type="button"&gt; &lt;input type="submit"&gt; and &lt;button&gt;</strong>
        </li>
      </ol>
      <p>
        The &lt;input&gt; of type <em>button</em> (along with the closely related &lt;button&gt;) is generally used to allow the user to activate a script. An &lt;input&gt; of type button typically has a string of text displayed on it through assignment of the <em>value</em> attribute. The &lt;input&gt; of type <em>submit</em> is typically used to submit all data from a form to a server-side program. The &lt;button&gt; allows for more complex material (such as multiline text, tables, etc.) to be displayed on the button, than the simple value of an &lt;input&gt; of type button.
      </p><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m4eb47685.jpg" alt="screen shot of many HTML examples showing HTML buttons" id="graphics166" />
      <p>
        <strong>Various kinds of buttons.</strong>
      </p>
      <p>
        &nbsp;
      </p>
      <ol>
        <li>
          <strong>&lt;input type="radio"&gt;</strong>
        </li>
      </ol>
      <p>
        The "radio box" or radio input is simply a series of visible options, for which usually only one at a time can be selected. Clicking on any unselected choice results in unselecting any previously selected choice, and making visible the newly selected choice. Scripting a radio input can vary a good deal between different versions of older browsers, but the versions shown below appear to be fairly robust across most modern browsers.
      </p>
      <table border="1" cellpadding="1" cellspacing="3" width="588">
        <col width="87" />
        <col width="396" />
        <col width="86" />
        <tbody>
          <tr>
            <td>
              Description
            </td>
            <td>
              HTML
            </td>
            <td>
              appearance
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                radio<br />
                simplest
              </p>
            </td>
            <td>
              <p>
                &lt;input type="radio"&gt;a&lt;br&gt;<br />
                &lt;input type="radio"&gt;b&lt;br&gt;<br />
                &lt;input type="radio"&gt;c
              </p>
            </td>
            <td>
              <p>
                a<br />
                b<br />
                c
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                radio<br />
                checked
              </p>
            </td>
            <td>
              <p>
                &lt;input type="radio" onclick="s.value='d'"&gt;d&lt;br&gt;<br />
                &lt;input type="radio" onclick="s.value='e'" checked&gt;e&lt;br&gt;<br />
                &lt;input type="radio" onclick="s.value='f'"&gt;f&lt;br&gt;
              </p>
            </td>
            <td>
              <p>
                d<br />
                e<br />
                f
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                radio<br />
                reveal choice
              </p>
            </td>
            <td>
              <p>
                &lt;form &gt;<br />
                &lt;input type="radio" onclick="t.value='x'"&gt;x&lt;br&gt;<br />
                &lt;input type="radio" onclick="t.value='y'"&gt;y&lt;br&gt;<br />
                &lt;input type="radio" onclick="t.value='z'"&gt;z&lt;br&gt;<br />
                &lt;input type="button" value="see" onclick="alert(g.t.value)"&gt;<br />
                &lt;/form&gt;
              </p>
            </td>
            <td>
              <p>
                Top of Form
              </p>
              <p>
                x<br />
                y<br />
                z
              </p>
              <p>
                Bottom of Form
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                radio<br />
                with labels
              </p>
            </td>
            <td>
              <p>
                &lt;input type="radio" id="one"&gt;<br />
                &lt;label for="one"&gt;One&lt;/label&gt;&lt;br&gt;<br />
                &lt;input type="radio" id="two"&gt;<br />
                &lt;label for="two"&gt;Two&lt;/label&gt;&lt;br&gt;<br />
                &lt;input type="radio" id="three"&gt;<br />
                &lt;label for="three"&gt;Three&lt;/label&gt;
              </p>
            </td>
            <td>
              <p>
                One<br />
                Two
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        <strong>Using and scripting radio buttons.</strong>
      </p>
      <p>
        &nbsp;
      </p>
      <ol>
        <li>
          <strong>&lt;input type="checkbox"&gt;</strong>
        </li>
      </ol>
      <p>
        The <em>checkbox</em> is much like the <em>radio</em> input, except that more than one option may be selected. It is typically used to allow the user to make a series of independent binary choices, where no pair is mutually exclusive.
      </p>
      <table border="1" cellpadding="1" cellspacing="3" width="489">
        <col width="87" />
        <col width="296" />
        <col width="86" />
        <tbody>
          <tr>
            <td>
              Description
            </td>
            <td>
              HTML
            </td>
            <td>
              appearance
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                checkbox<br />
                simplest
              </p>
            </td>
            <td>
              <p>
                &lt;input type="checkbox"&gt;a&lt;br&gt;<br />
                &lt;input type="checkbox"&gt;b&lt;br&gt;<br />
                &lt;input type="checkbox"&gt;c
              </p>
            </td>
            <td>
              <p>
                a<br />
                b<br />
                c
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                checkbox<br />
                checked
              </p>
            </td>
            <td>
              <p>
                &lt;input type="checkbox"&gt;a&lt;br&gt;<br />
                &lt;input type="checkbox" checked&gt;b&lt;br&gt;<br />
                &lt;input type="checkbox" checked&gt;c
              </p>
            </td>
            <td>
              <p>
                a<br />
                b<br />
                c
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                checkbox<br />
                reveal
              </p>
            </td>
            <td>
              <p>
                &lt;input type="checkbox" id="x"&gt;x&lt;br&gt;<br />
                &lt;input type="checkbox" id="y"&gt;y&lt;br&gt;<br />
                &lt;input type="button" value="reveal"<br />
                onclick="alert(x.checked+':'+y.checked)"&gt;
              </p>
            </td>
            <td>
              <p>
                x<br />
                y
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                input:<br />
                checkbox<br />
                see all
              </p>
            </td>
            <td>
              <p>
                &lt;form&gt;<br />
                &lt;input type="checkbox" id="x"&gt;x&lt;br&gt;<br />
                &lt;input type="checkbox" id="y"&gt;y&lt;br&gt;<br />
                &lt;input type="checkbox" id="z"&gt;z&lt;br&gt;<br />
                &lt;input type="button" value="see all"<br />
                onclick="<br />
                L=g.elements;<br />
                for (i=1;i&lt;L.length;i++)<br />
                alert(L[i-1].checked);<br />
                "&gt;<br />
                &lt;/form&gt;
              </p>
            </td>
            <td>
              <p>
                Top of Form
              </p>
              <p>
                x<br />
                y<br />
                z
              </p>
              <p>
                Bottom of Form
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        <strong>Using and scripting checkboxes.</strong>
      </p>
      <ol>
        <li>
          <strong>&lt;input type="password"&gt;</strong>
        </li>
      </ol>
      <p>
        The password field behaves just as the input of type text, except that the characters typed by the user are hidden from view in the browser. The W3Coffers the following advisory concerning password inputs:
      </p>
      <p>
        "Application designers should note that this mechanism affords only light security protection. Although the password is masked by user agents from casual observers, it is transmitted to the server in clear text, and may be read by anyone with low-level access to the network."<sup><a class="footnoteanc" href="#footnote96sym" id="footnote96anc">96</a></sup> 
      </p>
      <ol>
        <li>
          <strong>&lt;input type="file"&gt;</strong>
        </li>
      </ol>
      <p>
        The input of type file is the only W3C standard that allows a user to peruse local drive space. It is typically intended to allow users to upload files (typically images) to a web server. Historically it could be modified to allow visitors to incorporate local files into a web page, thence to use scripts on that page to work with that image in various ways. This particularly useful aspect of HTML seems to have become broken in both Opera and ASV+IE since about 2007 (when the HTML5 initiative adopted its Design Principles) apparently in response to security concerns. Since the file input can be particularly appropriate for the SVG developer, the SVG WG has discussed ways of implementing something like it directly in SVG.
      </p><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m1dc4241e.jpg" alt="screen shot of HTML page with examples of input type='file'" id="graphics167" height="405" width="576" />
      <p>
        <strong>Some uses of the input of type file.</strong>
      </p>
      <p>
        &nbsp;
      </p>
      <p>
        In the examples above, note that certain browsers handle the returned pathname of an image slightly differently, meaning that in certain cases we may need to use JavaScript to get the image to appear on a certain web page. The cross-browser inconsistency in handling pathnames dates to an early time in web history.
      </p>
      <ol>
        <li>
          <strong>&lt;select&gt;</strong>
        </li>
      </ol>
      <p>
        The &lt;select&gt; provides a menu of options from which the user may select one. Typically more options exist than are readily visible on the screen, hence affording the opportunity to conserve screen real estate. The &lt;select&gt; differs from other form elements in that it is the only one which has other tags (&lt;option&gt;s) inside it, hence making the DOM tree one level deeper. In newer browsers the select options may be grouped into &lt;optgroup&gt; tags, allowing the DOM to be deeper still. In older browsers, considerably more JavaScript was sometimes required to read the chosen value of a select, so authors should be aware of the potential need for further complications if this applies to the intended audience.
      </p>
      <table border="1" cellpadding="1" cellspacing="3" width="547">
        <col width="89" />
        <col width="296" />
        <col width="142" />
        <tbody>
          <tr>
            <td>
              Description
            </td>
            <td>
              HTML
            </td>
            <td>
              appearance
            </td>
          </tr>
          <tr>
            <td>
              <p>
                select:<br />
                &mdash;-&mdash;-&mdash;-&mdash;<br />
                simplest
              </p>
            </td>
            <td>
              &lt;select&gt;&lt;option&gt;a&lt;option&gt;b&lt;/select&gt;
            </td>
            <td>
              &nbsp;
            </td>
          </tr>
          <tr>
            <td>
              <p>
                select:<br />
                &mdash;-&mdash;-&mdash;-&mdash;<br />
                the choice
              </p>
            </td>
            <td>
              <p>
                &lt;form name="e"&gt;<br />
                &lt;select name="r"&gt;<br />
                &lt;option&gt;a<br />
                &lt;option&gt;b<br />
                &lt;/select&gt;&lt;br&gt;<br />
                &lt;button onclick="alert(r.selectedIndex)"&gt;<br />
                selectedIndex&lt;/button&gt;&lt;/form&gt;
              </p>
            </td>
            <td>
              <p>
                Top of Form
              </p>
              <p>
                <br />
                selectedIndex
              </p>
              <p>
                Bottom of Form
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                select:<br />
                &mdash;-&mdash;-&mdash;-&mdash;<br />
                reading<br />
                the value
              </p>
            </td>
            <td>
              <p>
                &lt;form name="f"&gt;<br />
                &lt;select name="s"&gt;<br />
                &lt;option value="ground"&gt;a<br />
                &lt;option value="hog"&gt;b<br />
                &lt;/select&gt;&lt;br&gt;<br />
                &lt;button onclick="alert(f.s.value)"&gt;<br />
                Value&lt;/button&gt;&lt;/form&gt;
              </p>
            </td>
            <td>
              <p>
                Top of Form
              </p>
              <p>
                <br />
                Value
              </p>
              <p>
                Bottom of Form
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                select:<br />
                &mdash;-&mdash;-&mdash;-&mdash;<br />
                more options<br />
                one selected
              </p>
            </td>
            <td>
              <p>
                &lt;form name="g"&gt;<br />
                &lt;select name="s" size="2"&gt;<br />
                &lt;option&gt;a&lt;option&gt;b<br />
                &lt;option selected&gt;c<br />
                &lt;option&gt;d&lt;option&gt;e<br />
                &lt;/select&gt;<br />
                &lt;/form&gt;
              </p>
            </td>
            <td>
              <p>
                Top of Form
              </p>
              <p>
                Bottom of Form
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                select:<br />
                &mdash;-&mdash;-&mdash;-&mdash;<br />
                optgroup
              </p>
            </td>
            <td>
              <p>
                &lt;select name="s" size="8"&gt;<br />
                &lt;optgroup label="first part"&gt;<br />
                &lt;option&gt;a&lt;option&gt;b&lt;option&gt;c<br />
                &lt;/optgroup&gt;<br />
                &lt;optgroup label="second part"&gt;<br />
                &lt;option&gt;d&lt;option&gt;e&lt;option&gt;f<br />
                &lt;/optgroup&gt;<br />
                &lt;/select&gt;<br />
                &lt;/form&gt;
              </p>
            </td>
            <td>
              <p>
                <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/mb881e91.jpg" alt="example of uses of select" id="graphics168" height="132" width="108" />
              </p>
              <p>
                Bottom of Form
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                select:<br />
                &mdash;-&mdash;-&mdash;-&mdash;<br />
                add or delete<br />
                options
              </p>
            </td>
            <td>
              <p>
                &lt;form name="h"&gt;<br />
                &lt;select name="s" size="3" onchange="<br />
                i=s.selectedIndex<br />
                j=s.options[i].innerHTML<br />
                opt=new Option(j,i);<br />
                l=t.options.length<br />
                t.size=l+1<br />
                s.remove(i)<br />
                s.size=s.size-1<br />
                t.options[l]=opt"&gt;<br />
                &lt;option value="0"&gt;a&lt;/option&gt;<br />
                &lt;option value="1"&gt;b&lt;/option&gt;<br />
                &lt;option value="2"&gt;c&lt;/option&gt;<br />
                &lt;/select&gt;<br />
                &lt;select name="t" size="3" onchange="<br />
                i=t.selectedIndex<br />
                alert(t.options[i].innerHTML)<br />
                "&gt;<br />
                &lt;option value="3"&gt;d&lt;/option&gt;<br />
                &lt;option value="4"&gt;e&lt;/option&gt;<br />
                &lt;/select&gt;<br />
                &lt;/form&gt;
              </p>
            </td>
            <td>
              <p>
                Top of Form
              </p>
              <p>
                Bottom of Form
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        <strong>Several examples of the use of the &lt;select&gt; menu.</strong>
      </p>
      <ol>
        <li>
          <strong>&lt;textarea&gt;</strong>
        </li>
      </ol>
      <p>
        The &lt;textarea&gt;is in essence a small word-processing window, inserted into a web page. It supports backspacing, cursor-based mouse events (including select, copy and paste), word-wrap and a variety of editing conventions popularized with the original Macintosh GUI dating from 1984. Various SVG authors have replicated parts of the &lt;textarea&gt;'s text and event handling, but to my knowledge none has yet made a completely functional substitute for the HTML &lt;textarea&gt;. New developments in the SVG standard will likely see a &lt;textarea&gt; like object native to SVG web browsers within the next few years.
      </p>
      <table border="1" cellpadding="1" cellspacing="3" width="531">
        <col width="87" />
        <col width="210" />
        <col width="214" />
        <tbody>
          <tr>
            <td>
              Description
            </td>
            <td>
              HTML
            </td>
            <td>
              appearance
            </td>
          </tr>
          <tr>
            <td>
              <p>
                textarea:<br />
                &mdash;-&mdash;-&mdash;-&mdash;<br />
                simplest
              </p>
            </td>
            <td>
              <p>
                &lt;textarea rows="5" cols="36"&gt;<br />
                "Retort! Refuel! Refire!"<br />
                shouts the glucose general,<br />
                snickering on his shoelaces<br />
                with feathergrease.<br />
                &lt;/textarea&gt;
              </p>
            </td>
            <td>
              &nbsp;
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        <strong>A simple &lt;textarea&gt; with 5 lines of up to 36 characters each.</strong>
      </p>
      <p>
        &nbsp;
      </p>
      <p>
        The table
      </p>
      <p>
        A convenient device for arranging content on the web without needing to rely on sometimes complex issues of differing screen sizes and relative coordinate systems is the &lt;table&gt;. Tables consist of cells arranged in rows and columns. Two important aspects make tables useful and flexible: the content of a cell may be any collection of HTML; secondly, not all rows or columns must have the same number of cells.
      </p>
      <table border="1" cellpadding="1" cellspacing="3" width="529">
        <col width="87" />
        <col width="267" />
        <col width="154" />
        <tbody>
          <tr>
            <td>
              Description
            </td>
            <td>
              HTML
            </td>
            <td>
              appearance
            </td>
          </tr>
          <tr>
            <td>
              <p>
                table:<br />
                &mdash;-&mdash;-&mdash;-&mdash;<br />
                simplest
              </p>
            </td>
            <td>
              <p>
                &lt;table&gt;<br />
                &lt;tr&gt;&lt;td&gt;a&lt;/td&gt;&lt;td&gt;b&lt;/td&gt;&lt;/tr&gt;<br />
                &lt;tr&gt;&lt;td&gt;c&lt;/td&gt;&lt;td&gt;d&lt;/td&gt;&lt;/tr&gt;<br />
                &lt;/table&gt;
              </p>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/fb8932b.gif" alt="Frame1" id="Frame1" />
            </td>
          </tr>
          <tr>
            <td>
              <p>
                table:<br />
                &mdash;-&mdash;-&mdash;-&mdash;<br />
                common<br />
                attributes
              </p>
            </td>
            <td>
              <p>
                &lt;table border='1'<br />
                border="1" cellpadding='0' cellspacing='0'&gt;<br />
                &lt;tr&gt;&lt;td&gt;a&lt;/td&gt;&lt;td&gt;b&lt;/td&gt;&lt;/tr&gt;<br />
                &lt;tr&gt;&lt;td&gt;c&lt;/td&gt;&lt;td&gt;d&lt;/td&gt;&lt;/tr&gt;<br />
                &lt;/table&gt;
              </p>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m93f8de4.gif" alt="Frame2" id="Frame2" />
            </td>
          </tr>
          <tr>
            <td>
              <p>
                table:<br />
                &mdash;-&mdash;-&mdash;-&mdash;<br />
                mixed<br />
                content
              </p>
            </td>
            <td>
              <p>
                &lt;table border='3'<br />
                border="1" cellpadding='4' cellspacing='0'&gt;<br />
                &lt;tr&gt;&lt;td&gt;artichoke&lt;/td&gt;<br />
                &lt;td&gt;&lt;img src='p17.jpg'<br />
                height="60" width="50"&gt;<br />
                &lt;/td&gt;&lt;/tr&gt;<br />
                &lt;tr&gt;&lt;td&gt;c&lt;/td&gt;<br />
                &lt;td&gt;&lt;table&gt;<br />
                &lt;tr&gt;&lt;td&gt;a&lt;/td&gt;&lt;td&gt;b&lt;/td&gt;&lt;/tr&gt;<br />
                &lt;tr&gt;&lt;td&gt;c&lt;/td&gt;&lt;td&gt;d&lt;/td&gt;&lt;/tr&gt;<br />
                &lt;/table&gt;&lt;/td&gt;<br />
                &lt;/tr&gt;&lt;/table&gt;
              </p>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/42888644.gif" alt="Frame3" id="Frame3" />
            </td>
          </tr>
          <tr>
            <td>
              <p>
                table:<br />
                &mdash;-&mdash;-&mdash;-&mdash;<br />
                uneven rows<br />
                and columns
              </p>
            </td>
            <td>
              <p>
                &lt;table&gt;&lt;tr&gt;<br />
                &lt;td colspan="3"&gt;<br />
                anchovy paste&lt;/td&gt;<br />
                &lt;td&gt;&lt;button&gt;click&lt;br&gt;me&lt;/button&gt;&lt;/td&gt;<br />
                &lt;/tr&gt;&lt;tr&gt;&lt;td&gt;<br />
                &lt;select&gt;&lt;option&gt;a&lt;option&gt;b&lt;/select&gt;<br />
                &lt;/td&gt;&lt;td rowspan="2"<br />
                &gt;<br />
                &lt;b&gt;l&lt;br&gt;o&lt;br&gt;n&lt;br&gt;g&lt;/b&gt;&lt;/td&gt;<br />
                &lt;td rowspan="2" colspan="2"&gt;<br />
                &lt;img src='p18.jpg'<br />
                height="60" width="50"&gt;&lt;/td&gt;<br />
                &lt;/tr&gt;&lt;tr&gt;&lt;td&gt;<br />
                &lt;select&gt;&lt;option&gt;c&lt;option&gt;d&lt;/select&gt;<br />
                &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
              </p>
            </td>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/594bac16.gif" alt="Frame5" id="Frame5" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        HTML Containers for XML or SVG
      </p>
      <p>
        This treatment of SVG has focused on the one container that allows scripting across the majority of popular web browsers: the &lt;embed&gt;. Unfortunately, the &lt;embed&gt; is not standardized as a part of official (W3C) HTML, though it appears to be slated for inclusion in HTML5. At some point in the future we may see that either new versions of browsers begin to conform to standards or that standards expand to include common practices. Hence a consideration of alternative approaches is appropriate:
      </p><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/7e8fbc69.jpg" alt="screen shot with many examples; reader is reminded that this appendix is temporary" id="graphics171" />
      <p>
        In the above examples, &lt;embed&gt;, &lt;object&gt; and &lt;iframe&gt; all display properly (and allow at least primitive SVG to HTML JavaScript calls) in ASV+Internet Explorer (IE 6.0 or 7.0 with ASV 3), Opera (9) and FireFox (1.5). However, the &lt;object&gt; tag works in ASV+IE only if the material is served locally. As soon as we place the content on a server, then the &lt;object&gt; tag will not work in ASV+Internet Explorer. Likewise some troubles seem to exist with &lt;iframe&gt; in certain other contexts.
      </p>
      <p>
        For consistency with future browsers, and with current standards, &lt;object&gt; seems to be the most promising, though you will want to be careful to investigate your intended audience browsers to be certain that &lt;object&gt; renders properly. &lt;object&gt; has the additional benefit that content such as an &lt;img&gt; may be inserted as a child of the tag so that browsers which cannot view the SVG content may see an alternative image instead. It should be noted for the approach using &lt;object&gt;, may require the attribute: type="image/svg+xml" to be assigned.
      </p>
      <p>
        The SVG Wiki recommends using an &lt;embed&gt; redundantly inside an object to reach the largest number of browsers as follows<sup><a class="footnoteanc" href="#footnote97sym" id="footnote97anc">97</a></sup> :
      </p>
      <p>
        &lt;object data="dummy.svg" height="90" width="90" type="image/svg+xml"&gt;
      </p>
      <p>
        &lt;embed data="dummy.svg" height="90" width="90" type="image/svg+xml"/&gt;
      </p>
      <p>
        &lt;/object&gt;
      </p>
      <p>
        My own experiments suggest that the simpler
      </p>
      <p>
        &lt;embed src="/dummy.svg" height="90" width="90" type="image/svg+xml"/&gt;
      </p>
      <p>
        may work most easily. It is the method recommended by the current edition of this book, with an awareness by the reader encouraged that the standardization of &lt;object&gt; is likely to bring the issue into clearer focus in the future.
      </p>
      <h2 id="JavaScript_basics">
        Appendix II:JavaScript basics
      </h2>
      <p>
        This book assumes only minimal familiarity with JavaScript, but some familiarity with programming in some language. At the same time, I hope that, in the spirit of the World Wide Web (the web) and of JavaScript itself, the reader need not be a sophisticated programmer in order to find the material useful. This section attempts to encapsulate, in brief, the more important and current aspects of JavaScript typically used or likely to be used in SVG development. While certain advanced constructs like lambda functions or regular expressions can be quite useful to the web programmer (using HTML or SVG), developers who need these sorts of constructs will be better served by any of the advanced treatments of JavaScript available on the market.
      </p>
      <p>
        <strong>JavaScript as a programming language</strong>: JavaScript was introduced by Netscape Corporation in 1996 to meet a widely felt interest in the web community to be able to make dynamic content as well as to assist in the pre-processing of forms. Its syntax bore such strong similarity to the Java language from Sun Microsystems Inc., that Netscape and Sun jointly announced the new language. While the control structures of the two languages are quite similar, JavaScript is not so strictly typed: a variable's type is determined by the value assigned to it, and that value, as well as its type, may be redefined later without hoopla.
      </p>
      <pre>
Example: var a="happy";<br /> a=3;<br />
</pre>
      <p>
        Additionally, JavaScript allows functions to be constructed on the fly and for existing functions to be read as strings, modified and then run in their modified form, much as in functional language such as LISP.
      </p>
      <p>
        Because of its ubiquity on the web, it may be, depending on how we measure, the most widely deployed programming language of all time. That more "authors" have written programs (or perhaps reused existing ones) in it seems evident. A December 2005 study by Google of over one billion web sites found scripting (read "JavaScript") present in over half. From there, and following some simple calculations we may conclude that almost all programs written by humankind have been written in JavaScript with the others representing some infinitesimal proportion<sup><a class="footnoteanc" href="#footnote98sym" id="footnote98anc">98</a></sup>. 
      </p>
      <p>
        The above argument admittedly exaggerates the unimportance of those lesser languages (C, Java, etc.)<sup><a class="footnoteanc" href="#footnote99sym" id="footnote99anc">99</a></sup>. Another, perhaps more reasoned approach places JavaScript's popularity (a different thing to be sure than the scope of its influence) at ninth<sup><a class="footnoteanc" href="#footnote100sym" id="footnote100anc">100</a></sup>. 
      </p>
      <p>
        Whether these estimates are plausible or not, the sheer ubiquity of JavaScript is unprecedented. For a good, quick, but authoritative read on the history of JavaScript I would recommend Steve Champion's <em>JavaScript: How did we get here?</em> <sup><a class="footnoteanc" href="#footnote101sym" id="footnote101anc">101</a></sup> 
      </p>
      <p>
        JavaScript is also being used in a growing variety of non-web contexts particularly mobile devices of various sorts and has become a fundamental tool in the client-side processing of XML of various flavors beyond XHTML.
      </p>
      <h3>
        Common misconceptions about JavaScript.
      </h3>
      <p>
        In part because JavaScript has changed rapidly in the ten years since its introduction, and because of its reputation as "a language for the masses" it has been quick to generate considerable folklore both among the programming and non-programming communities. Herewith are some common misconceptions:
      </p>
      <h5>
        1. JavaScript is the same as Java.
      </h5>Despite considerable similarity in syntax, and a common heritage of ancestral languages (e.g., C, C++, Perl) the languages are in fact, different. As mentioned earlier, JavaScript is much less strongly typed. It has functional aspects. As Douglas Crawford) writes,
      <blockquote>
        <p>
          "JavaScript's C-like syntax, including curly braces and the clunky for statement, makes it appear to be an ordinary procedural language. This is misleading because JavaScript has more in common with functional languages like <a href="http://www.crockford.com/javascript/little.html">Lisp or Scheme</a> than with C or Java." <sup><a class="footnoteanc" href="#footnote102sym" id="footnote102anc">102</a></sup> 
        </p>
      </blockquote>
      <h5>
        2. JavaScript is a "toy language."
      </h5>Perhaps some computer scientists were alarmed by a language that was tractable to the masses. If someone who does not have an advanced degree can use it, how can it possibly be serious? However, JavaScript has the full expressive power of a Universal Turing machine. It has global and local variables, conditionals, loops, arrays, hashes, functions, recursion, objects, user-defined classes of objects, strings, regular expressions, and even lambda functions. Much of what it does is done much easier than in languages like C and Java. It comes with a full set of modern array and string methods and functions (like push, pop, split, splice, join, match, replace, and sort). Its code can be concise and elegant and is typically smaller as well as quicker and easier to write, maintain and understand than these other languages<sup><a class="footnoteanc" href="#footnote103sym" id="footnote103anc">103</a></sup>. 
      <p>
        What strikes many learners of JavaScript is that almost all programs in it are event-driven. Many procedural languages have a program flow initiated by and controlled by the programmer. In JavaScript, events come from a variety of sources: users click buttons; an XMLHttpRequest is satisfied; an image loads from the server. Learning to respond to dynamic events can be a conceptual challenge for those unfamiliar with event-driven programming.
      </p>
      <h5>
        3. JavaScript requires HTML and complex DOM for I/O.
      </h5>Readers of this book already realize JavaScript lives independently of HTML when used with SVG. A number of interesting projects are ongoing which use JavaScript independent of the DOM or HTML, SVG, or XML. With ECMA Script's facility for binding data to presentation (e.g. XML with GUI), JavaScript is expanding rather rapidly into other arenas: Ruby on Rails, Yahoo Widgets, SVG for mobile devices (in which SVG rather than HTML is the presentation layer), Adobe Apollo, and OpenLaszlo, are all pretty interesting developments using ECMA Script outside the web . We will, I think start seeing more JavaScript in more contexts over time. AJAX (Asynchronous JavaScript with XML), while relying on HTTP is being carried into non-browser but networked environments since any program that outputs HTTP (with or without wires) can be received by JavaScript and presented on your favorite refrigerator, wristwatch, bumper sticker or cerebral cortex.
      <p>
        Microsoft's dialect: JScript has been available on the desktop at least as early as Windows 98. Apparently JScript figures into the .NET environment with a JScript compiler that can produce a .dll or .exe from .js files.
      </p>
      <h5>
        4. JavaScript cannot read or write files.
      </h5>Most languages involve a bit of transcendental mysticism when it comes to dealing with files. Those who remember the heyday of the Fortran years remember the curious folklore associated with the numbers 105, 106, and other <em>devices</em>. Many a beginning programming student learning to program in Pascal or C has practiced their first curse words in learning to deal with file i/o and the magical incantations associated with such. That C uses something as alien to its native syntax as #include &lt;stdio.h&gt; is a hint that a world of strange forces exists outside our little realm.
      <p>
        Accessing files is generally a question of <em>where</em> one is <em>authorized</em> to access files. It is true that strong security steps were taken to prevent a malicious web site from reading or writing files on the client's machine. Such security precautions are clearly warranted. But if a web author wishes to open a space in which visitors may scribble graffiti or otherwise leave notes, this is relatively easy to do, though under the province of server-side scripting rather than client-side. Microsoft has enabled certain techniques through ActiveX for clients to write files to local drive space using JavaScript, and the W3C appears to be contemplating limited access to local file space, though I am unaware if any other browsers actively considering any similar functionality.
      </p>
      <p>
        As the recent popularization of AJAX has indicated, JavaScript may receive streams of data from any host on the Internet. Whether through the XMLHttpRequest() method used in most browsers or the XML data islands used in Internet Explorer, data streams may be read. These techniques also can be made to work with local file space, and there is the &lt;input type="file"&gt; object in HTML which also gives the user access to certain client-side files.
      </p>
      <h5>
        5. JavaScript is not standardized.
      </h5>The standard known as ECMAScript has been in existence since 1999. Most, but not all browsers, attempt to conform to the standards. It is not unlike the various flavors of UNIX which evolved during the 1980's: Solaris, Ultrix, AIX, etc.: a goodly set of shared underlying core utilities, with various proprietary extensions. One could argue that the only reason we notice the flavors of JavaScript so much is that the web is by far the largest experiment to date in cross-platform programming and the existing idiosyncrasies just happen to be more noticeable than the earlier experiments involving far fewer people.
      <p>
        The early days of JavaScript with the ensuing browser wars left a bad taste in the mouths of many. The problem of browser incompatibilities, is, I think, becoming less of a problem over time. If one writes code in ECMA 262 (the JavaScript standard), it will generally run in most places. ECMA 262 seems to have brought things together particularly with DOM2 in the browser, since a lot the browser differences had to do not with the core language, but with JavaScript's relationship to the DOM and the inconsistencies there. DOM2 has solved a lot of problems and it appears that DOM3 is helping also since it seems to make HTML more XML-like. I've found it easier (by an order of magnitude or more) to port code from one OS to another using JavaScript than the half dozen other languages I've tried to do that with.
      </p>
      <h5>
        6. JavaScript is dangerous from a security perspective.
      </h5>The best advice from the Computer Emergency Response Team to avoid all security problems is to disconnect from the Internet. E-mail has most certainly been responsible for more worms, viruses, Trojan horses, spam, spyware (including web beacons), and intrusions than JavaScript by a huge factor. Most of the malicious scripts run through JavaScript tend to be more annoying than dangerous. Thomas Powell and Fritz Schneider discuss the issue at some length with some of the more dangerous scripts using Trojan horses to distribute cookie information to third party sites in a way that could possibly compromise username password protections. <sup><a class="footnoteanc" href="#footnote104sym" id="footnote104anc">104</a></sup> It appears that far more harm and malice, however, requiring comparably less expertise, can be caused through a user's out-of-the-box use of e-mail software, by an average user's setup of a wireless network using default configurations, or by subscription to a non-encrypted cable Internet service.
      <h5>
        7. JavaScript is only a scripting language.
      </h5>If by this, we mean it is not compiled, then this is usually true, though if one really misses the extra step of compilation one can get a JavaScript compiler &mdash; such does exist. Java (probably the most important programming language for professional programmers currently) is also not truly compiled. When the claim that something is only a "scripting language" is made, I am not sure what one really means. What exactly does one wish to do and what is it they think they cannot do with a "scripting language?" Perhaps JavaScript is just too modern for certain programmers who prefer to relive the good-old-days of punch-cards before the Internet came along to muddy the waters.
      <p>
        As a college teacher, the list of <em>my</em> annoyances about the language includes the facts that "+" is ambiguous, meaning "concatenate" in one context and "add" in another; that semicolons may be used instead of, or in addition to, newline characters as command delimiters. That source code is difficult to hide (I might, for example, like to build a working example of an exercise for my students without showing them the solution) has annoyed me at times<sup><a class="footnoteanc" href="#footnote105sym" id="footnote105anc">105</a></sup>. For me JavaScript's interoperability with server-side scripts, the simplicity of its syntax, its unprecedented success with cross-platform computing, and its sheer <em>webbishness</em>, make it a strong contender as the best computing language of the past century.
      </p>
      <h3>
        Features of the language:
      </h3>
      <p>
        We give a brief overview of the language, first, for those somewhat comfortable with programming in general. Afterwards, topics will be revisited with meatier examples.
      </p>
      <h5>
        Constants:
      </h5>
      <p>
        Constants in JavaScript consist of numbers, strings, the Boolean values <em>true</em> and <em>false,</em> regular expressions<sup><a class="footnoteanc" href="#footnote106sym" id="footnote106anc">106</a></sup> , and a few specialized predefined values (like <em>null</em>, <em>infinity</em> and <em>Math.Pi</em>) . Examples of constants would be
      </p>
      <pre>
<code class="line"><br />7.1<br />"hamburger"<br />true<br />/[lr]egu[lr]a[lr]exp[lr]ession/</code>
</pre>
      <h5>
        operators:
      </h5>
      <p>
        The standard mathematical operators are
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="422">
        <col width="59" />
        <col width="70" />
        <col width="93" />
        <col width="142" />
        <tbody>
          <tr>
            <td>
              <strong>operator</strong>
            </td>
            <td>
              <strong>meaning</strong>
            </td>
            <td>
              <strong>example</strong>
            </td>
            <td>
              <strong>value</strong>
            </td>
          </tr>
          <tr>
            <td>
              +
            </td>
            <td>
              plus
            </td>
            <td>
              3+7
            </td>
            <td>
              10
            </td>
          </tr>
          <tr>
            <td>
              -
            </td>
            <td>
              minus
            </td>
            <td>
              7-3
            </td>
            <td>
              4
            </td>
          </tr>
          <tr>
            <td>
              *
            </td>
            <td>
              times
            </td>
            <td>
              7*3
            </td>
            <td>
              21
            </td>
          </tr>
          <tr>
            <td>
              /
            </td>
            <td>
              divided by
            </td>
            <td>
              7/3
            </td>
            <td>
              2.3333333333333335
            </td>
          </tr>
          <tr>
            <td>
              %
            </td>
            <td>
              modulo
            </td>
            <td>
              7%3
            </td>
            <td>
              1
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The precedence of operators is consistent with other languages: * and / are performed before + and - . Whenever the order of operation must be carefully controlled, parentheses are used to stipulate the order:
      </p><code class="line">(7+3)/5 = 2 whereas 7+3/5 = 7.6 .</code>
      <h5>
        variables:
      </h5>
      <p>
        We might think of a variable as a device for naming something we wish to remember. In human languages, nouns serve much the same function<sup><a class="footnoteanc" href="#footnote107sym" id="footnote107anc">107</a></sup>. 
      </p>
      <p>
        We may think of a variable as being like a temporary name associating that name with a value, where the value is, in the simplest case, a constant. The statement
      </p><code class="line">X = "hamburger"</code>
      <p>
        associates the value "hamburger" with the variable named "X." The value of X remains "hamburger" until we redefine the value of X.
      </p>
      <p>
        Variables in JavaScript can be of several types, the most important of which are Boolean, number, string, and object (of which Array and Image are frequently used varieties).
      </p>
      <p>
        The names of variables are strings of alphanumeric characters (or even Unicode in \uHHHH format) together with $ (dollar sign) and _ (underscore). JavaScript is case sensitive so a9 and A9 refer to different variables. Variable names should not begin with numeric characters.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="280" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Names of variables
            </td>
          </tr>
          <tr>
            <th>
              properly named variables:
            </th>
            <th>
              improperly named variables:
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code>a<br />Happy<br />i_Q$<br />$\u03b1_Q<br /></code>
</pre>
            </td>
            <td>
              <p>
                1a (it begins with a number)
              </p>
              <p>
                Sad# ('#' is not a valid character)
              </p>
              <p>
                &nbsp;
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <h6>
        Various types of JavaScript variables
      </h6>(Arrays, Images and Objects are discussed later)
      <table border="1" cellpadding="0">
        <tbody>
          <tr>
            <td colspan="4" class="caption">
              Types of variables
            </td>
          </tr>
          <tr>
            <th class="j">
              Description
            </th>
            <th class="j">
              JavaScript
            </th>
            <th class="j">
              final<br />
              value
            </th>
            <th class="j">
              type of<br />
              variable
            </th>
          </tr>
          <tr>
            <td class="d">
              variable:<br />
              &mdash;-&mdash;-&mdash;-&mdash;<br />
              number
            </td>
            <td class="h">
              a=3.14159
            </td>
            <td class="h">
              3.14159
            </td>
            <td class="h">
              number
            </td>
          </tr>
          <tr>
            <td class="d">
              variable:<br />
              &mdash;-&mdash;-&mdash;-&mdash;<br />
              redefined
            </td>
            <td class="h">
              b=42<br />
              b=4/5
            </td>
            <td class="h">
              0.8
            </td>
            <td class="h">
              number
            </td>
          </tr>
          <tr>
            <td class="d">
              variable:<br />
              &mdash;-&mdash;-&mdash;-&mdash;<br />
              string
            </td>
            <td class="h">
              s="wobble"
            </td>
            <td class="h">
              wobble
            </td>
            <td class="h">
              string
            </td>
          </tr>
          <tr>
            <td class="d">
              variable:<br />
              &mdash;-&mdash;-&mdash;-&mdash;<br />
              array
            </td>
            <td class="h">
              R=Array("hello",2)
            </td>
            <td class="h">
              hello,2
            </td>
            <td class="h">
              object
            </td>
          </tr>
          <tr>
            <td class="d">
              variable:<br />
              &mdash;-&mdash;-&mdash;-&mdash;<br />
              image
            </td>
            <td class="h">
              W=Image
            </td>
            <td class="h">
              [object]
            </td>
            <td class="h">
              object
            </td>
          </tr>
          <tr>
            <td class="d">
              variable:<br />
              &mdash;-&mdash;-&mdash;-&mdash;<br />
              image src
            </td>
            <td class="h">
              W=Image;<br />
              W.src="h.jpg"
            </td>
            <td class="h">
              h.jpg
            </td>
            <td class="h">
              string
            </td>
          </tr>
          <tr>
            <td class="d">
              variable:<br />
              &mdash;-&mdash;-&mdash;-&mdash;<br />
              boolean
            </td>
            <td class="h">
              b=false
            </td>
            <td class="h">
              false
            </td>
            <td class="h">
              boolean
            </td>
          </tr>
          <tr>
            <td class="d">
              variable:<br />
              &mdash;-&mdash;-&mdash;-&mdash;<br />
              boolean<br />
              compound
            </td>
            <td class="h">
              b=false||true
            </td>
            <td class="h">
              true
            </td>
            <td class="h">
              boolean
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The declaration of variables is sometimes a source of confusion to those familiar with other languages. If the value of a variable is available everywhere in the program it can be called a <em>global</em> variable. If a variable's value is known only in a certain context (in a particular function) then it is defined <em>locally</em>. For sake of programming simplicity, we often seek to keep the scope of variables small, so that differing uses of the same variable do not contaminate one another. Passing variables into a function and receiving values that those functions return is another way to preserve this modularity. <sup><a class="footnoteanc" href="#footnote108sym" id="footnote108anc">108</a></sup> 
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="160" />
        <tbody>
          <tr>
            <td colspan="2" class="caption">
              Global vs. local scope
            </td>
          </tr>
          <tr>
            <td>
              <code>a=7</code>
            </td>
            <td>
              Value of a will be global.
            </td>
          </tr>
          <tr>
            <td>
              <code>var b=8</code>
            </td>
            <td>
              Value of b will be local to function in which it is defined.
            </td>
          </tr>
          <tr>
            <td>
              <code>var c=9</code>
            </td>
            <td>
              If made in the body of the program (outside any function), c's value will be global
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Variables may be given initial values either through an assignment statement like
      </p><code class="line">x=20</code>
      <p>
        or through a function call as follows:
      </p><code class="line">function square( v){return v*v}<br />
      x=square(5)</code>
      <p>
        in which the two statements succeed in initializing the variable <em>x</em> with a value of 25.
      </p>
      <h5>
        Statements:
      </h5>each JavaScript statement, like an English sentence, consists of something resembling a verb together with optional direct and indirect objects.
      <blockquote>
        <p>
          a=b; &mdash; the verb "=" (read 'becomes equal to') assigns the value of the variable on the right to the item on the left.
        </p>
        <p>
          verb(object) &mdash; the verb in this case "verb" corresponds with the name of a function, either defined by JavaScript (such as the verb <em>alert</em>). The object (or parameter) is a list (possibly empty) of values to be sent to the verb, called a function. In the function they may be used as local variables without changing their values elsewhere.
        </p>
      </blockquote>
      <p>
        Statements may also consist of conditionals or loops as discussed shortly.
      </p>
      <p>
        Statements are terminated either by a semicolon or a carriage return, or both.
      </p>
      <h5>
        program flow:
      </h5>Statements in a JavaScript program (or within a function) are performed in the order they appear, from top to bottom. Statements within a function are not performed until that function is invoked or called.
      <table class="null">
        <tbody>
          <tr>
            <td class="caption">
              Example of a small program (statements following the "//" are explanations<br />
              or comments and are not a part of the program itself):
            </td>
          </tr>
          <tr>
            <td class="null">
              <pre>
var a=3; //a becomes 3<br />var b=a+7; //b becomes 3+7, or 10<br />function c(v){ //these statements (between the {curly braces}) define the <br /> //function c - which is used later - as a function of the <br /> //variable v.<br />  var d=v+v //d becomes twice whatever v was<br /> return d //the value of t is provided as "output" from the function.<br />} // the function is closed by a final curly brace.<br />e=c(b) //here we use the function c by sending it the value b <br />  //(which is currently 10). The value of e, in this case<br />  // would be 10 plus 10 = 20.<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <h5>
        Comments:
      </h5>JavaScript comments follow the approach of the C language which is consistent with many modern languages:
      <p>
        Any characters between double slashes (//) and the end of a line are comments and do not affect the execution of the program. Longer comments, that straddle multiple lines, may be made placing text inside /* and */ .
      </p>
      <h5>
        Conditionals:
      </h5>Conditionals are used in programming to provide options or choices for how the program may perform based on situations encountered as it runs. For example, we may wish that a program continue performing some repeated calculation (for example to approximate the value of pi) until the user clicks a button. A conditional can be used to tell the program to do one thing if the button is pushed and another if not.
      <p>
        A JavaScript conditional looks much like its counterpart in C, Java, or PHP:
      </p><code class="line">if(condition) action</code>
      <p>
        in which <em>condition</em> is a Boolean statement or Boolean variable, and <em>action</em> is a JavaScript statement. We should note that the English expression
      </p><code class="line">x <em>is equal to</em> 7</code>
      <p>
        is written as a Boolean expression in JavaScript as
      </p><code class="line">(x == 7)</code>
      <p>
        While the JavaScript
      </p><code class="line">x=7;</code>
      <p>
        has the quite distinct meaning in English:
      </p><code class="line">let x become equal to 7.</code>
      <p>
        When more than one statement is to take place if <em>condition</em> is true we have:
      </p><code class="line">if(condition) {action1;action2;...;action}</code>
      <p>
        which is equivalent to
      </p><code class="line">if(condition) verb()</code>
      <p>
        where verb is a function defined by
      </p><code class="line">function verb(){action1;action2;...;action}</code>
      <p>
        There is also the compound conditional:
      </p><code class="line">if(condition) action1</code>
      <p>
        else action2
      </p>
      <p>
        And the somewhat bulky <em>switch</em> statement used in many programming languages:
      </p>
      <pre>
<code class="line">switch (expression){<br /> case value1: action1;<br /> break;<br /> case value2: action2;<br /> break;<br /> default : action3;<br />}</code>
</pre>
      <p>
        The above would be equivalent to
      </p>
      <pre>
<code class="line">if (value == value1) action1;<br />else if (value == value2) action2;<br />else action3;</code>
</pre>
      <p>
        There is also the sometimes perplexingly terse conditional operator:
      </p><code class="line">x=y&lt;0?-y:y;</code>
      <p>
        This example lets x become either y or negative y. If y&lt;0 then x becomes &mdash;y, otherwise, x becomes y. Accordingly, the above example fills x with the absolute value of y. The same thing could be accomplished by if(y&lt;0)x=-y; else x=y .
      </p>
      <h5>
        Functions:
      </h5>A function is a block of code that can be activated or <em>called</em> from within another block of code. The code which calls the function is momentarily exited, the function is performed and the code resumes right where it was
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
function addseven(){A=A+7}<br />A=1<br />A=A+1<br />addseven()<br />addseven()<br />b=A<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        After these statements are performed the value of <em>b</em> will be 16. The function <em>addseven()</em> adds 7 to the current value of <em>A</em>, whenever the function is used and is performed just after <em>A</em> had become 2. After the function is finished the first time, then b is given an initial value equal to 9. Upon its second invocation, the function adds another 7 to <em>A</em>.
      </p>
      <p>
        Functions also have the property that they are capable of receiving input and producing output. In the above example, the global variable <em>A</em> is affected whenever the function <em>addseven()</em> is called.
      </p>
      <h5>
        DOM:
      </h5>
      <p>
        Unlike most programming languages, JavaScript generally lives within the World Wide Web: a context broader than the CRT or the card-reader / line-printer combination early languages were familiar with. It may live within a browser in the context of HTML or SVG or it may live in mobile devices controlling events in real time hooked up via SMIL and AJAX to some large interactive system. Usually though there is a Document Object Model or DOM to be dealt with. In the most general case we are dealing with the HTML DOM, or DOM2 as standardized by W3C in 2003.
      </p>
      <p>
        The HTML DOM is a tree with several branches (nodes) which are programming objects that may contain data (typically strings) as well as methods (much like functions) for using them. The most important of these, from the perspective of most JavaScript programmers are nodes known as the window, the document, and a collection of arrays containing respectively, the frames within the browser window, and the images, links, and forms within the document. Other less frequently used objects consist of the event, the history, and the navigator, including its plugins, and mimetypes. Different browsers, still present a very different DOM for the same simple page. We will address those parts of the HTML DOM which tend to be consistent across browsers and which are most often used by the web programmer, in an order which may reflect the level of utility associated with those predefined objects. Attention will then be turned to techniques of traversing a DOM which are independent of the variety of XML being explored (e.g., XHTML, SVG, or MathML).
      </p>
      <h6>
        1. document
      </h6>
      <p>
        As with SVG, the HTML object named <em>document</em> can be thought of as a top level container for the HTML code itself. That is the HTML tag itself represents the document.<br />
        <br />
        Many aspects of the browser environment are retrieved as elements of <em>document</em>. Inside the document are important arrays of objects: document.forms, document.images, and document.links containing respectively, all the forms, image tags, and anchor tags (links) associated with the web page. The &lt;body&gt; is an important element of the document, since it also serves as a container for most of the actual HTML. Also within <em>document</em> may be the title, cookies, the referrer (the page, if any, from which the visitor was referred via a link to the present page), and a variety of other sometimes useful tidbits.
      </p>
      <p>
        Elements of <em>document</em> may typically be accessed (and examined or changed) through either their name, if they have one, their id if they have one, or by traversing the DOM using various methods of <em>document</em>. All three approaches are illustrated in the following example.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="437">
        <col width="421" />
        <tbody>
          <tr>
            <th>
              HTML
            </th>
          </tr>
          <tr>
            <td valign="top">
              <pre>
<code>&lt;html&gt;&lt;body onload="doIt()" id="GG"&gt;<br />&lt;img src="p44.jpg" name="me" id="HH" width="60" height="70" alt="see here"&gt;<br />&lt;p id="happy"&gt;A simple paragraph&lt;/p&gt;<br />&lt;div&gt;The position of this div?&lt;/div&gt;<br />&lt;/body&gt;&lt;/html&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <th valign="top">
              Accessing elements of DOM
            </th>
          </tr>
          <tr>
            <td valign="top">
              <p>
                <code>document.me.alt</code> is "see here"<br />
                <code>document.me.width</code> is60
              </p>
              <p>
                Let <code>H=document.getElementById("happy")</code>
              </p>
              <p>
                then <code>H.innerHTML</code> is <code>"A simple paragraph"</code>
              </p>
              <p>
                Let <code>C=document.body.childNodes</code>
              </p>
              <p>
                then ...<br />
                <code>C[0].id</code> is <code>"HH"</code> (Internet Explorer)<br />
                is <code>undefined</code> (FireFox or Opera)
              </p>
              <p>
                and ...<br />
                <code>C[3].innerHTML</code> is <code>&lt;"position of this div?"/code&gt;</code>
              </p>
              <p>
                Let <code>Q=document.getElementsByTagName("div")</code>
              </p>
              <p>
                then...<br />
                <code>Q[0].innerHTML</code> is <code>"position of this div?"</code>
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Note that the attempt to access nodes by their ordinal position within the document may lead to browser inconsistencies. Firefox and Opera will interpret the white space between the &lt;body&gt; and &lt;img&gt; tags above as a node, while IE does not. Firefox and Opera do not themselves behave the same way in all cases in this regard, however. This suggests a more prudent practice is to access elements by their tagnames (in the above example, "div"), or at least to examine the nodeName of each node before assuming it is what one expects it to be.
      </p>
      <p>
        Nodes which are given names show up in the DOM hierarchy only if they are part of the forms, images, links, or anchors arrays. That is, a simple &lt;p name="happy"&gt;, for example, cannot be accessed as document.happy. Nor might &lt;p id="happy"&gt; be accessed in that way.
      </p>
      <p>
        [Technical Note]: If we wish to think of the document as a node with children then we retrieve its documentElement or the object representing the root node of the document. The following explorations of a simple HTML document may provide some sense of the distinction between the document and its documentElement.
      </p>
      <p>
        Top of Form
      </p>
      <table border="1" cellpadding="1" cellspacing="0" width="450">
        <col width="131" />
        <tbody>
          <tr>
            <td valign="top">
              <p>
                HTML<br />
                <br />
                &lt;html id='root'&gt;<br />
                &lt;body id='BODY'&gt;<br />
                ....<br />
                stuff<br />
                ...<br />
                &lt;/body&gt;&lt;/html&gt;
              </p>
            </td>
            <td>
              <p>
                DOM<br />
              </p>
              <pre>
<code>&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;--<br />Let D refer to document.documentElement<br />then...<br /> D.id is 'ROOT';<br />  D.body.id is 'BODY<br />Let 'b' refer to document.body<br />then...<br />  b.id is 'BODY'.<br />  b.parentNode.id is 'ROOT'.<br /> b.parentNode.parentNode.id is 'undefined.<br />...alternatively,'<br />Let 'Q' refer to document.getElementsByTagName("body")<br />then...<br />  Q[0].id is 'BODY'<br />&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;--</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The following advice from the Mozilla Foundation is worth heeding for the SVG/HTML author since it promotes a more robust approach to JavaScript in a broadened context:
      </p>
      <blockquote>
        <p>
          "HTML documents typically contain a single child node, HTML, while XML documents can contain multiple child nodes, the root node and processing instructions. This is why it's recommended that you use document.documentElement rather than document.firstChild."<sup><a class="footnoteanc" href="#footnote109sym" id="footnote109anc">109</a></sup> 
        </p>
      </blockquote>
      <h6>
        2. document.forms
      </h6>
      <p>
        Much of the user interface in the WWW is handled through forms and the form elements within them (see Appendix I for a discussion of these). Typically, these are handled by JavaScript in ways that have remained in effect since the beginnings of the language (prior to the standardization of DOM1, DOM2 and DOM3), through their immediate presence in the browser's object hierarchy.
      </p>
      <p>
        In the following example:
      </p><code class="line">&lt;html&gt;&lt;body&gt;&lt;form name="f"&gt;&lt;input name="i"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code>
      <p>
        whatever our visitor types into the input can be accessed in a variety of ways. In this particular case (with only one input in the only form on the page), the following are all equivalent ways of referring to the contents of the input:
      </p>
      <div>
        <ul>
          <li>document.f.i.value
          </li>
          <li>document.f.elements[0].value
          </li>
          <li>document.forms[0].i.value
          </li>
          <li>document.forms[0].elements[0].value
          </li>
        </ul>
        <ul>
          <li>
            <em>Let</em> <code>F=document.getElementsByTagName("form"</code>)<br />
            <em>Let</em> <code>I=F[0].getElementsByTagName("input")</code><br />
            then consider <code>[0].getAttribute("value")</code>I
          </li>
        </ul>
      </div>
      <p>
        The last of these approaches (in which the word "Let" appears only for explication) is most consistent with XML techniques and works in ASV+IE, FF, and Opera, though is clearly a bit cumbersome compared to the others. Again, the different browsers differ in terms of how text nodes consisting of white space are handled, so we may not assume that document.f.firstChild is the same as document.f.i.
      </p>
      <p>
        We might, alternatively, assign an id to a form or its elements and use getElementById to access it as follows:
      </p><code class="line">&lt;html&gt;&lt;form id="f"&gt;&lt;input id="i"&gt;&lt;/form&gt;&lt;/html&gt;</code>
      <ul>
        <li>
          <code>document.getElementById("f").i.value</code><br />
          or more simply,
        </li>
        <li>
          <code>document.getElementById("i").value</code>
        </li>
      </ul>
      <p>
        In the case that we have multiple form elements within a form, we might access them via their names or by their ordinal position in the document.forms array as follows:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;form&gt;<br /><br />&lt;textarea name="t" cols="20"rows="2"&gt;hello&lt;/textarea&gt;<br /><br />&lt;input value="33"&gt;<br /><br />&lt;/form&gt;
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The value of the second form element may be retrieved by
      </p>
      <ul>
        <li>document.f.j.value<br />
          or
        </li>
        <li>document.f.elements[1].value
        </li>
      </ul>
      <p>
        Whenever we use any of these techniques to <em>read</em> a value of a form element, we might just as easily <em>change</em> its value. In the example
      </p><code class="line">&lt;body&gt;&lt;form name="f"&gt;&lt;input&gt;&lt;input name="j"&gt;&lt;/form&gt;&lt;/body&gt;</code>
      <p>
        the following are equivalent:
      </p>
      <ul>
        <li>document.f.j.value="hippo"<br />
        </li>
        <li>document.f.elements[1].value="hippo"<br />
        </li>
        <li>F=document.getElementsByTagName("form")<br />
        </li>
        <li>I=F[0].getElementsByTagName("input")<br />
        </li>
        <li>I[1].setAttribute("value","hippo")
        </li>
      </ul>
      <h6>
        3. document.images
      </h6>
      <p>
        From the perspective of DOM, images are handled within JavaScript in much the same way as forms. They can be referenced either by name or by their position within the document.images array.
      </p><code class="line">&lt;body&gt;&lt;img src="pretty.jpg" name="p" width="100"&gt;&lt;/body&gt;</code>
      <p>
        In the above example document.p is the same as <code>document.images[0]</code>.
      </p>
      <p>
        Attributes of images may be likewise, similarly retrieved.
      </p>
      <p>
        <code>Document.p.width</code> is same as <code>document.images[0].width</code>
      </p>
      <p>
        is same as <code>document.images[0].getAttribute("width")</code>
      </p>
      <p>
        is same as <code>100</code>.
      </p>
      <p>
        A detailed analysis of the situation may be helpful:
      </p>
      <table border="1" cellpadding="2" cellspacing="3" width="590">
        <col width="71" />
        <col width="294" />
        <col width="199" />
        <tbody>
          <tr>
            <td colspan="3" class="caption">
              Alternative views of images.
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/m79f07a53.jpg" alt="bitmapped image resembling human face" id="graphics172" height="90" width="70" />
              <p>
                hi
              </p>
            </td>
            <td rowspan="2">
              <p>
                <strong>function for looking at &lt;img&gt;'s</strong>
              </p>
              <pre>
<code>function look(){<br /> I=D.getElementsByTagName("img")<br /> msg=I[0].getAttribute("alt")+"\n"<br /> A=D.images<br /> msg+=A[0].src<br /> msg+="\nChildren of I and A:"<br /> for (i in I) <br /> msg+="\t"+(I[i]==A[i])+"\n"<br /> msg+="I==A:"+(I==A)+"\n" <br /> msg+="D.images[1]==D.bye:"<br /> msg+=(D.images[1]==D.bye)<br /> D.f.u.value=msg<br /> J=new Image()<br /> J.src="p11.jpg"<br /> compareAttributes(I[0], A[0])<br /> D.f.v.value=eval(look)<br />}</code>
</pre>
            </td>
            <td rowspan="2" valign="top">
              <p>
                <strong>Various properties</strong>
              </p>
              <pre>
<code>hi<br />file:///C:/My%20Documents/p11.jpg<br />Children of I and A: true<br />  true<br /> true<br />I==A:false<br />D.images[1]==D.bye:true</code>
</pre>
            </td>
          </tr>
          <tr>
            <td>
              <img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/8d4beaf.jpg" alt="bitmapped image resembling human face" id="graphics173" height="90" width="70" />
              <p>
                bye
              </p>
            </td>
          </tr>
          <tr>
            <td colspan="3">
              <em>Side-by-side comparison of attributes of I[0] and A[0]</em><br />
              <pre>
<code> start="fileopen" fileopen<br /> height="90" 90<br /> alt="hi" hi<br /> isMap="false" false<br /> hspace="0" 0<br /> loop="1" 1<br /> src="file:///C:My%20Documents/p11.jpg" file:///C:/My%20Documents/p11.jpg<br /> width="70" 70<br /> vspace="0" 0<br /> border="0" 0<br /> name="hi" hi<br />&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-&mdash;-<br />function compareAttributes(node1, node2){<br /> for (j=0;j&lt;node1.attributes.length;j++){<br /> var v=node1.attributes[j].nodeValue<br /> var n=node1.attributes[j].nodeName<br /> var i=node2.getAttribute(n)<br /> if ((!IEVals[v])&amp;&amp;(!IENames[n])){<br /> D.f.t.value+=" "+n+"=\""+v+"\""<br /> D.f.t.value+="\t"+i+"\n"<br /> }<br /> }<br /> D.f.t.value+=sp+eval(compareAttributes)<br />}</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The objects <em>I</em> and <em>A</em> are node lists consisting of ultimately the same nodes. Hence investigation of the equality of the individual nodes gives equality, while comparison of the objects I and A results in inequality<sup><a class="footnoteanc" href="#footnote110sym" id="footnote110anc">110</a></sup>. <br />
        Observe also, that we might use the <em>attribute</em> object associated with an image to retrieve all its attributes. Different browsers assign different default attributes to objects, which is why the above investigation ignores certain attributes which have null or empty values. Specifically the objects alluded to in the compareAttributes function are IEVals={"null":true, "":true} and IENames={"hideFocus":true, "contentEditable":true, "disabled": true, "tabIndex":true}, which basically allow us to avoid listing such attributes by either name or value.
      </p>
      <h6>
        4. traversing DOM
      </h6>
      <p>
        Since the early days of JavaScript, the need to extend and modify documents based on user actions was felt clearly by most authors. Being able to modify only the primary enumerated elements of DOM (document.images, document.forms, etc.) meant that a lot of what authors might like to change was either inaccessible or cumbersome because of browser inconsistencies.
      </p>
      <p>
        The first new DOMs offered by the two primary browsers of the day (Netscape and IE) gave substantively different approaches to the creation of dynamic content. IE used document.all; Netscape used document.layers. The techniques for manipulating these approaches to content were so different that the author had to, in effect, write two programs, with a fork for browser detection. As pointed out by Jeremy Keith, developers became frustrated with DOM scripting and turned their attention, instead, to CSS, just at a time that the major browsers finally adopted a W3C recommendation which would have solved the problem in the first place: <em>getElementById</em><sup><a class="footnoteanc" href="#footnote111sym" id="footnote111anc">111</a></sup>. 
      </p>
      <p>
        This method of the <em>document</em> object allows us to find, and thence either examine or modify, any node in the document whose id is known. In the following example, a &lt;div id="p"&gt; has its background color modified by a script:
      </p>
      <pre>
<code class="line"><br />P = document.getElementById('p').<br /><br />P.style.background = "red"</code>
</pre>
      <p>
        Unfortunately, the superficially equivalent technique using more of an XML-like and less of an HTML-like approach:
      </p><code class="line">P.setAttribute("style","background:red")</code>
      <p>
        is not successful, since setAttribute for styles appears to be unpredictable in ASV+Internet Explorer. The following, though does work in ASV+IE, FF and Opera:
      </p><code class="line">P.style.setAttribute("background","red")</code>
      <p>
        This approach is shown in a more natural setting in the following example in which the user selection (from a &lt;select&gt;) is used to determine the color
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
&lt;html&gt;&lt;script&gt;<br />function color(s,id){<br /> DIV=document.getElementById(id);<br /> choice=s.selectedIndex;<br /> value=s.options[choice].innerHTML;<br /> DIV.style.background=value;<br />}<br />&lt;/script&gt;&lt;body&gt;&lt;form&gt;<br />&lt;select onchange="color(this,'p')"&gt;<br /> &lt;option&gt;red&lt;&lt;/option&gt;<br /> &lt;option&gt;green&lt;/option&gt;<br /> &lt;option&gt;blue&lt;/option&gt;<br />&lt;/select&gt;&lt;/form&gt;<br />&lt;div id="p"&gt;Hello&lt;/div&gt;<br />&lt;/body&gt;&lt;/html&gt;<br />
</pre>
            </td>
          </tr>
        </tbody>
      </table>If we know the <em>id</em> of the element we wish to modify, then getElementById will work well in HTML, SVG and XML in general. In many contexts, an HTML author does know the id's of her objects since not she, but scripts under her control, created them.
      <p>
        The situation becomes more complex though in the case of using JavaScript to parse external XML documents, or of using .JS scripts in the contexts of multiple web pages. The ability to explore a document and discover what objects are in it requires a bit more sophistication than getElementById provides.
      </p>
      <p>
        For this sort of exploration of a document, fortunately, there are a variety of techniques for finding out about nodes:
      </p>
      <ul>
        <li>nodeName &mdash; What sort of a node is this? What is the name of this tag?
        </li>
        <li>childNodes &mdash; Find all the branches below (contained in) this node.
        </li>
        <li>parentNode &mdash; What node is this one contained in?
        </li>
        <li>innerHTML &mdash; What is the HTML (represented as a string) contained inside this node?
        </li>
        <li>getElementsByTagName &mdash; Find all the nodes of a given variety (tagname).
        </li>
        <li>attributes &mdash; List all attributes of a given node.
        </li>
        <li>getAttribute &mdash; Find the value of a specified attribute for a given node.
        </li>
      </ul>
      <p>
        In addition to innerHTML, Microsoft IE supports some other methods, including outerHTML, insertAdjacentHTML, and so forth, but these are non-standard and should be avoided.
      </p>
      <p>
        All these properties are illustrated in the following example. The individual statements are numbered for more detailed discussion which follows.
      </p>
      <table border="1" cellpadding="1" cellspacing="3" width="588">
        <col width="274" />
        <tbody>
          <tr>
            <td class="caption" colspan="2">
              Here is an HTML document with some DOM methods
            </td>
          </tr>
          <tr>
            <th colspan="2">
              HTML
            </th>
          </tr>
          <tr>
            <td colspan="2">
              <pre>
<code>&lt;body&gt;&lt;div id="D" class="h" style="color:green"&gt;<br />&lt;b&gt;Here is an HTML document &lt;br&gt;<br />&lt;i&gt;with some DOM methods&lt;/i&gt;&lt;/b&gt;<br />&lt;/div&gt;&lt;blockquote&gt;<br />&lt;div id="Q" class="d"&gt;&lt;/div&gt;<br />&lt;/blockquote&gt;<br />&lt;/body&gt;<br /></code>
</pre>
            </td>
          </tr>
          <tr>
            <th colspan="2">
              DOM Methods
            </th>
          </tr>
          <tr>
            <td>
              <p>
                0 document.getElementById("D")<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;[object]
              </p>
            </td>
            <td>
              <p>
                1 document.getElementById("D").id<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;D
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                2 document.getElementById("D").nodeName<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;DIV
              </p>
            </td>
            <td>
              <p>
                3 DQ=document.getElementById("Q")<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;[object]
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                4 DQ.id<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;Q
              </p>
            </td>
            <td>
              <p>
                5 DQ.nodeName<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;DIV
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                6 D=document.getElementById("D")<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;[object]
              </p>
            </td>
            <td>
              <p>
                7 D.childNodes.length<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;2
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                8 D.childNodes[0].nodeName<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;B
              </p>
            </td>
            <td>
              <p>
                9 D.childNodes[1].nodeName<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;#text
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                10 DZero=D.childNodes.item(0)<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;[object]
              </p>
            </td>
            <td>
              <p>
                11 DZero.childNodes.length<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;3
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                12 D.getAttribute("style")<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;[object]
              </p>
            </td>
            <td>
              <p>
                13 DC = D.getAttribute("class");<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;null
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                14 DC = DC ? DC : D.getAttribute("className");<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;h
              </p>
            </td>
            <td>
              <p>
                15 P=document.getElementById("D").parentNode<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;[object]
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                16 P.nodeName<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;BODY
              </p>
            </td>
            <td>
              <p>
                17 P.innerHTML.length<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;163
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                18 P.getElementsByTagName("div").length<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;2
              </p>
            </td>
            <td>
              <p>
                19 DIVS=P.getElementsByTagName("div")<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;[object]
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                20 DIVS[0].nodeName<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;DIV
              </p>
            </td>
            <td>
              <p>
                21 DIVS[0].id<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;D
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                22 DIVS[1].nodeName<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;DIV
              </p>
            </td>
            <td>
              <p>
                23 DIVS[1].id<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;Q
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                24 DIVS[1].attributes.length<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;82
              </p>
            </td>
            <td>
              <p>
                25 DIVS[1].getAttribute("id")<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>value is:</em>&nbsp;&nbsp;&nbsp;&nbsp;Q
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        <strong>Statements 1-6 &mdash; using getElementById to retrieve nodes and particular properties:</strong> Once an object has been located by <em>getElementById</em>, it may then have a variable name assigned to it, and properties may subsequently be retrieved with less typing and without the need to reopen or search the DOM (to save time, depending on the way the browser accesses DOM).
      </p>
      <p>
        <strong>Statements 7-11 &mdash; childNodes and browser differences:</strong> It is important to know that the different browsers may return differing numbers of children for the same document. In ASV+IE the return value is 1, while in Opera and Firefox this number is 3. In IE D.childNodes[0].nodeName is 'B' and D.childNodes[1].nodeName is "#text" (the notation for the text node inside a given tag. In FF and Opera, D.childNodes[0].nodeName is "#text" and D.childNodes[1].nodeName is "B". The reason for this discrepancy is that FF and Opera view the carriage return following the opening &lt;div&gt; as a text node. IE ignores it. This means that we may not just assume that a given tag will be in the position where we expect it to be. This is particularly relevant if we then attempt to burrow further into an object which might have no children, since a browser error can result. Care should be given to examining the tags once found. Another important thing to note, particularly as we adapt DOM techniques to SVG, is the example in statement 10. In the context of HTML we may refer to D.childNodes[0] while the equivalent D.childNodes.item(0) is required in other environments. The difference is that D.childNodes is technically not an array, but a "node list" (a different sort of object than an actual array) and it needs to be referenced differently.
      </p>
      <p>
        <strong>Statements 12-14 &mdash; browser differences in class and style attributes:</strong> In ASV+Internet Explorer, D.getAttribute("style") returns an object, which must be further explored, if we wish to find out what is associated with the styles assigned to a given tag. In Firefox D.getAttribute("style") returns the string "color: green;" while in Opera it returns the string "color: #008000." In Opera and FF, to retrieve the class of a tag, one uses D.getAttribute("class"), while in ASV+IE one uses D.getAttribute("classname"). Generally, in modern cross-browser scripting, it is preferable to interrogate the DOM to see if a given mechanism is supported, rather than trying to fork one's code based on browser-detects. Sometimes users will change the identification their browser presents so that less popular browsers will not be blocked from certain web sites; more importantly, perhaps, some features of older versions of browsers may behave more like a different brand of browser than like their own updated versions.
      </p>
      <p>
        <strong>Statements 15-16 &mdash; moving up the tree with parentNode:</strong> Sometimes we may wish to retrieve a node's parent. For example, in writing a &lt;table&gt; in HTML, the browser may insert a &lt;TBODY&gt; as the first child, even though the source code does not contain it. If we wished to insert a new row into an existing table, inserting it into the &lt;table&gt; object might prove to be a mistake. If we find a given row and then insert a new row into the parent of that row, then whether this parent is a &lt;table&gt; or a &lt;tbody&gt; will not matter, the new row will be inserted as a sibling to the existing row.
      </p>
      <p>
        <strong>Statements 17 &mdash; browser differences in HTML as rendered</strong>: Because of different ways of resolving whitespace, color names, internal referents, and the like, the HTML you write is likely to be modified by the browser, and differently by different browsers. The &lt;body&gt; as represented in the above example by any of:
      </p>
      <ul>
        <li>
          <code>document.body</code>
        </li>
        <li>
          <code>document.getElementsByTagName("body")[0]</code><br />
          (the first element of the list of &lt;body&gt;s in the document.
        </li>
        <li>
          <code>document.getElementById("D").parentNode</code><br />
          (the parent of the first &lt;div&gt;)
        </li>
      </ul>
      <p>
        contains a string of innerHTML of length either 163, 173, or 185 in the browser IE, FF, or Opera, respectively.
      </p>
      <p>
        <strong>Statements 18-23 &mdash; using getElementsByTagName to retrieve a list of all tags of a specified variety within a node</strong>: Because of browser differences alluded to above, the getElementsByTagName will generally behave more predictably than trying to retrieve nodes based on their assumed position within the DOM. Within the body in all five browsers, there are, in our example, exactly two divs. In all cases the first of these is the one with id='d' and the second has id='Q'. The getElementsByTagName method returns a list which may either be referenced by OBJ.getElementsByTagName[k] for some integer k, or byOBJ.getElementsByTagName.items(k), the latter notation proving useful in certain contexts for dealing with nodelists, that do not always behave like arrays.
      </p>
      <p>
        <strong>Statements 24-25 &mdash; retrieving attributes of nodes using .attributes and getAttribute( ):</strong> Node.attributes returns a nodelist of all the attributes (attributename, attributevalue) pairs in a given tag. This list of attributes varies considerably across browsers, with IE declaring a large host of default values of miscellaneous attributes for most tags. In IE DIVS[1].attributes.length is 82, while in FF and Opera the number is exactly 2 (the same number that appear overtly in the author's HTML). In IE DIVS[1].attributes[18] happens to equal 'id'. IE DIVS[1].attributes[18] happens to equal 'onreadystatechange'. If we are interested only in particular attributes whose name is known, then node.getAttribute(attributename) works consistently across modern browsers.
      </p>
      <p>
        A variety of other techniques for traversing the DOM exist including getFirstChild, getNextSibling and so forth (and the reader is encouraged to find out more about them), but the majority of one's needs can be handled more reliably with the techniques described above.
      </p>
      <p>
        Strings and string handling: Borrowing a good deal from UNIX, JavaScript has modern and convenient methods associated with objects of type string. A string is a sequence of characters, in the case of ECMA script, chosen from Unicode (which is equivalent to ASCII for its first 128 characters). We may build strings through JavaScript or HTML. HTML form elements may be used to allow the user to define the value of strings.
      </p>
      <p>
        Examples:
      </p>
      <table border="1">
        <tbody>
          <tr>
            <td>
              JavaScript:
            </td>
            <td>
              <code>a="happy"</code>
            </td>
            <td class="annotate">
              The variable named 'a' is given the string<br />
              'happy' as its value.
            </td>
          </tr>
          <tr>
            <td>
              HTML:
            </td>
            <td>
              <code>&lt;div id="D"&gt;Here is some text&lt;/div&gt;</code>
            </td>
            <td class="annotate">
              The object document.getElementById("D")has,<br />
              as its value, the string 'Here is some text'.
            </td>
          </tr>
          <tr>
            <td>
              User-defined:
            </td>
            <td>
              <code>&lt;form name="f"&gt;&lt;input name="i"&gt;&lt;/form&gt;</code>
            </td>
            <td class="annotate">
              The object document.f.i.value<br />
              has a value equal to whatever<br />
              the user types into the input field.
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Two strings are concatenated using the "+" operator.
      </p>
      <p>
        Example:
      </p>
      <table>
        <tbody>
          <tr>
            <td>
              <code>a="bird"; b="house";</code>
            </td>
            <td class="annotate">
              then a+b has value "birdhouse"
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Basic string methods include :
      </p>
      <ul>
        <li>
          <em>charAt</em> for retrieving a character at a specific ordinal position within the string;
        </li>
        <li>
          <em>indexOf</em> for finding the position of a substring;
        </li>
        <li>
          <em>substring</em> for finding the characters within a string between two ordinal positions; and
        </li>
        <li>
          <em>length</em> for determining the number of characters within a string.
        </li>
      </ul>
      <p>
        These basic constructs are sufficient to do most of the string manipulation typically required in programming and are illustrated in the following table:
      </p>
      <table style="bordercolorlight:Maroon; bordercolordark:Fuchsia; bgcolor:white; border:1;" cellpadding="2" cellspacing="2" rules="rows">
        <tbody>
          <tr>
            <td rowspan="2">
              string1.charAt(num1)<br />
              returns character at position num1 within string1
              <p class="center">
                <i>If string1 is "a string" and number is 3,<br />
                then string1.charAt(3) is "t".</i>
              </p>
            </td>
            <td class="center" style="bgcolor:#ddffdd">
              <select name="z" onfocus="x.value=y.value.charAt(z.value)" onchange="x.value=y.value.charAt(z.value)">
                <option value="0">
                  0
                </option>
                <option value="1">
                  1
                </option>
                <option value="2" selected="selected">
                  2
                </option>
                <option value="3">
                  3
                </option>
                <option value="4">
                  4
                </option>
                <option value="8">
                  8
                </option>
                <option value="9">
                  9
                </option>
                <option value="10">
                  10
                </option>
              </select><br />
              number
            </td>
            <td class="center" style="bgcolor:#ddffdd">
              <input name="y" onfocus="y.value=''" size="10" value="any string" /><br />
              string
            </td>
          </tr>
          <tr>
            <td colspan="2" class="center" style="bgcolor:#dddddd">
              <input name="x" value="a" size="2" /><br />
              string.charAt(number)
            </td>
          </tr>
          <tr>
            <td rowspan="2">
              string1.indexOf(string2)<br />
              returns first character position of string2 within string1
              <p class="center">
                <i>If string1 is "a string" and substring is "str",<br />
                then string.indexOf(substring) is 2.</i>
              </p>
              <p class="center">
                <i>If string1 is "a string" and substring is "stX",<br />
                then string.indexOf(substring) is -1.</i>
              </p>
            </td>
            <td class="center" style="bgcolor:#ddffdd">
              <input name="a" onfocus="a.value=''" onkeyup="c.value=b.value.indexOf(a.value)" value="ing" size="4" /><br />
              substring
            </td>
            <td class="center" style="bgcolor:#ddffdd">
              <input name="b" onfocus="b.value=''" size="10" value="a string" /><br />
              string
            </td>
          </tr>
          <tr>
            <td colspan="2" class="center" style="bgcolor:#dddddd">
              <input name="c" size="2" value="5" /><br />
              string.indexOf(substring)
            </td>
          </tr>
          <tr>
            <td rowspan="2">
              string.substring(from,to)<br />
              returns the substring within string starting at the from<sup>th</sup> char<br />
              up to the <sup>th</sup> char
              <p class="center">
                <i>If zz is "happy" then zz.substring(3,5)="py"</i>
              </p>
            </td>
            <td class="center" style="bgcolor:#ddffdd">
              <select name="d" onchange="f.value=g.value.substring(d.value,e.value)">
                <option value="0">
                  0
                </option>
                <option value="1">
                  1
                </option>
                <option value="2" selected="selected">
                  2
                </option>
                <option value="3">
                  3
                </option>
                <option value="4">
                  4
                </option>
                <option value="5">
                  5
                </option>
                <option value="6">
                  6
                </option>
                <option value="10">
                  10
                </option>
              </select> &nbsp; <input name="e" onkeyup="f.value=g.value.substring(d.value,e.value)" size="2" value="7" /><br />
              from&nbsp;&nbsp;&nbsp;to
            </td>
            <td style="bgcolor:#ddffdd">
              <input name="g" onfocus="e.value=''" size="10" value="a string" /><br />
              string
            </td>
          </tr>
          <tr>
            <td colspan="2" class="center" style="bgcolor:#dddddd">
              <input name="f" size="8" value="rin" /><br />
              string.substring(from,to)
            </td>
          </tr>
          <tr>
            <td rowspan="2">
              string.length
              <blockquote>
                <p>
                  <i>If string="hamburger"<br />
                  then string.length=9</i>
                </p>
              </blockquote>
            </td>
            <td colspan="2" class="center" style="bgcolor:#ddffdd">
              <select name="dd" onchange="ee.value=dd.value.length">
                <option value="0">
                  0
                </option>
                <option value="zero">
                  zero
                </option>
                <option value="happy" selected="selected">
                  happy
                </option>
                <option value="ground">
                  ground
                </option>
                <option value="hog">
                  hog
                </option>
                <option value="hog">
                  a b
                </option>
                <option value="'Twas brilling and the slithy toves">
                  'Twas brilling and the slithy toves
                </option>
              </select><br />
              string
            </td>
          </tr>
          <tr>
            <td colspan="2" class="center" style="bgcolor:#dddddd">
              <input name="ee" size="2" value="5" />string.length
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        A variety of specialized methods and function provide for common conversions:
      </p>
      <ul>
        <li>
          <em>eval</em> &mdash; useful for converting from strings to numbers (e.g., when reading user provided numeric input from a form's &lt;input&gt;, since that, by default, is read as a string of numeric digits rather than as a number). The eval function is actually far more powerful and is explained later in more detail;
        </li>
        <li>
          <em>toString</em> &mdash; used for converting certain simple objects to strings, or with a parameter, for converting to, say, hexadecimal or base two;
        </li>
        <li>
          <em>String.fromCharCode</em> &mdash; to convert from numeric to ASCII;
        </li>
        <li>
          <em>charCodeAt</em> &mdash; for converting from ASCII to numeric; and
        </li>
        <li>
          <em>escape</em> &mdash; to encode certain meta-characters which might otherwise render as HTML or interfere with transmission protocols.
        </li>
      </ul>
      <p>
        These specialized methods and functions are illustrated below:
      </p>
      <table style="bordercolorlight:Maroon; bordercolordark:Fuchsia; bgcolor:white; border:1;" cellpadding="2" cellspacing="2" rules="rows">
        <tbody>
          <tr>
            <td rowspan="2" style="bgcolor:#ffffff">
              eval(string)<br />
              converts string of digits (or an expression) to number<br />
              Useful for reading form elements on a page (which by default are read as strings).
              <p class="center">
                <i>if string="12345" then eval(string)=12345.<br />
                if string+1=123451,then eval(string)+1=12346.</i>
              </p>
            </td>
            <td class="center" style="bgcolor:#ddffdd">
              <select name="w" onchange="v.value=eval(w.value)" onmouseup="v.value=eval(w.value)">
                <option value="1+1">
                  1+1
                </option>
                <option value="12345" selected="selected">
                  12345
                </option>
                <option value="123/45">
                  123/45
                </option>
                <option value="Math.random()">
                  Math.random()
                </option>
                <option value="x=3;y=5;x+y">
                  x=3;y=5;x+y
                </option>
              </select> string
            </td>
          </tr>
          <tr>
            <td class="center" style="bgcolor:#dddddd">
              <input name="v" value="12345" size="20" /><br />
              eval(string)
            </td>
          </tr>
          <tr>
            <td rowspan="2" style="bgcolor:#ffffff">
              eval(numberstring).toString(16)<br />
              converts number to hexadecimal
              <p class="center">
                <i>if numberstring=255<br />
                then numberstringtoString(16) is "ff"</i>
              </p>
            </td>
            <td class="center" style="bgcolor:#ddffdd">
              <select name="za" onchange="ya.value=eval(za.value).toString(16)">
                <option value="0">
                  0
                </option>
                <option value="255" selected="selected">
                  255
                </option>
                <option value="256">
                  256
                </option>
                <option value="15">
                  15
                </option>
                <option value="16">
                  16
                </option>
                <option value="1024">
                  1024
                </option>
              </select> number
            </td>
          </tr>
          <tr>
            <td class="center" style="bgcolor:#dddddd">
              <input name="ya" onfocus="ya.value=eval(za.value).toString(16)" size="8" /><br />
              number.toString(16)
            </td>
          </tr>
          <tr>
            <td rowspan="2" style="bgcolor:#ffffff">
              Numeric to ASCII<br />
            </td>
            <td class="center" style="bgcolor:#ddffdd">
              <select name="AS" onchange="CH.value=String.fromCharCode(eval(AS.value))">
                <option value="45">
                  45
                </option>
                <option value="65" selected="selected">
                  65
                </option>
                <option value="66">
                  66
                </option>
                <option value="90">
                  90
                </option>
                <option value="97">
                  97
                </option>
                <option value="122">
                  122
                </option>
                <option value="311">
                  311
                </option>
                <option value="1024">
                  1024
                </option>
              </select> number
            </td>
          </tr>
          <tr>
            <td class="center" style="bgcolor:#dddddd">
              <input name="CH" value="A" size="8" /><br />
              String.fromCharCode(number)
            </td>
          </tr>
          <tr>
            <td rowspan="2" style="bgcolor:#ffffff">
              ASCII to Numeric<br />
            </td>
            <td class="center" style="bgcolor:#ddffdd">
              <select name="asc" onchange="chr.value=asc.value.charCodeAt(0)">
                <option value="$">
                  $
                </option>
                <option value=" ">
                  space
                </option>
                <option value="A" selected="selected">
                  A
                </option>
                <option value="B">
                  B
                </option>
                <option value="Z">
                  Z
                </option>
                <option value="a">
                  a
                </option>
                <option value="b">
                  b
                </option>
                <option value="z">
                  z
                </option>
                <option value="[">
                  ]
                </option>
              </select> ASCIIchar
            </td>
          </tr>
          <tr>
            <td class="center" style="bgcolor:#dddddd">
              <input name="chr" value="65" size="5" />&nbsp;<br />
              number=ASCIIchar.charCodeAt(0)
            </td>
          </tr>
          <tr>
            <td rowspan="2" style="bgcolor:#ffffff">
              escape(string)<br />
              replaces special characters by escape sequences
            </td>
            <td class="center" style="bgcolor:#ddffdd">
              <select name="z" onchange="y.value=escape(z.value)">
                <option value="onebiglongasciistring">
                  onebiglongasciistring
                </option>
                <option value="a string with some words" selected="selected">
                  a string with some words
                </option>
                <option value="(1+1)/2">
                  (1+1)/2
                </option>
                <option value="a=happy&amp;b=sad">
                  a=happy\&amp;b=sad
                </option>
                <option value="~!@#$%^&amp;*()">
                  ~!@#$%^&amp;*()
                </option>
                <option value="http://marble.sru.edu/~ddailey">
                  http://marble.sru.edu/~ddailey
                </option>
              </select>
            </td>
          </tr>
          <tr>
            <td class="center" style="bgcolor:#dddddd">
              <input name="y" onfocus="y.value=escape(z.value)" size="35" /><br />
              escape(string)
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        For using the expressive power of regular expressions several useful techniques exist in JavaScript including, replace, match, split and join.
      </p>
      <ul>
        <li>
          <em>replace</em> &mdash; allows any or all occurrences of a regular expression within a string to be replaced by another string.
        </li>
      </ul>
      <dl>
        <dd>
          <p>
            Example: Here we define a regular expression r that matches any vowel. We use the g (global) flag to perform the replacement throughout the string.
          </p><em>If</em> <code>var r=/[aeiou]/g<br />
          <em>and</em> var s="happy ever after in the marketplace"</code>
          <p>
            <em>Then,</em> <code>s.replace(r,"Q")</code><em>returns</em> "<code>hQppy QvQr QftQr Qn the mQrkQtplQcQ</code>"
          </p>
        </dd>
      </dl>
      <ul>
        <li>
          <em>match</em> &mdash; determines whether or not a string contains (matches) a given regular expression. We build a regular expression that looks for any word ending with "t". Note: [^\s] means any character which is not white space (spaces, tabs or returns), while \s+ means any nonempty sequence of white space.
        </li>
      </ul>
      <dl>
        <dd>
          <p>
            Example:
          </p>
          <p>
            <em>If</em> <code>string="Do it and think."</code><br />
            <em>and</em> <code class="line">re=/[^\s]*t\s+/</code><br />
            <em>then</em> <code>string.match(re)</code><em>returns</em> "it"<em><br /></em>
          </p>
        </dd>
      </dl>
      <ul>
        <li>
          <em>split</em> &mdash; a most useful utility coming to JavaScript from Perl and awk, split uses any delimiter (a string or regular expression) to split a string into an array.
        </li>
      </ul>
      <dl>
        <dd>
          <p>
            Example:
          </p>
          <p>
            <em>If</em> <code>s="a.bc.def.g.hijk</code><em>" and</em> <code>re="."</code> <em><br />
            then</em> <code>s.split(re)[0]</code> <em>becomes</em> <code>"a"</code>,<em><br /></em><code>s.split(re)[1]</code><em>is</em> <code>"bc"</code>,<em><br />
            and</em> <code>s.split(re)[4]</code> <em>is</em> <code>"hijk"</code>.
          </p>
          <p>
            Example:
          </p>
          <p>
            <em>If</em> <code>s="function f(){a();b();c()}"</code> <em>and</em> <code>re=/[{}]g</code><em><br />
            then</em> <code>statements=s.split(re)[1]</code><em>will be equal to</em> "<code>a();b();c()</code>".
          </p>
          <p>
            that is, we have a string consisting of all the statements in a JavaScript function.
          </p>
          <dl>
            <dd>
              We can then further break statements into individual lines using:
              <p>
                <code>var L=statements.split(/\s*[;\n]+\s*/g)</code> <em>with the effect that<br /></em><code>L[0]</code><em>is</em> <code>a();</code><em><br />
                and</em> <code>L[2]</code><em>is</em> c<code>();</code>
              </p>
            </dd>
          </dl>
        </dd>
        <dd>
          <p>
            Note: the regular expression used, <code>/\s*[;\n]+\s*/g</code>, allows for statements to be delimited by either semicolons or returns or both, together with arbitrary amounts of white space on either side of the crucial delimiter.
          </p>
        </dd>
      </dl>
      <ul>
        <li>
          <em>join</em> &mdash; a sort of inverse of split, join combines elements of an array into a string.<br />
          <br />
          Example:
        </li>
      </ul>
      <dl>
        <dd>
          <p>
            <em>Let the array A be defined by</em><code>A[0]="here"; A[1]="is"; A[2]="an"; A[3]="example."</code> .
          </p>
          <p>
            <em>Then</em><code>s=A.join(" ")</code> <em>assigns to</em>
          </p>
          <p>
            s <em>the value</em><code>"here is an example."</code>
          </p>
        </dd>
      </dl>
      <h5>
        Arrays:
      </h5>I have heard the story that my friend Dr. Winifred Asprey, a mathematician, actually invented arrays, as we know them, when she persuaded the designers of FORTRAN to include a proper "DIMENSION" statement in the language. In my attempt to verify the story<sup><a class="footnoteanc" href="#footnote112sym" id="footnote112anc">112</a></sup> , Dr. Asprey tells me that she persuaded them to put the elements of matrices in proper order, since "they had been doing it backwards until then." That a mathematician would recognize the utility of multidimensional objects, makes sense in retrospect, but it is difficult to imagine programming, as we know, it without arrays.
      <p>
        Basically, an array is an ordered list of variables, used so that each of them may be dealt with (initialized, changed, evaluated) in some similar way (usually through a <em>loop</em>, as discussed shortly).
      </p>
      <p>
        In JavaScript, arrays are usually declared before they are initialized through statements like:
      </p>
      <ul>
        <li>
          <code>A=new Array;</code>
        </li>
        <li>or <code>A=new Array( )</code>
        </li>
        <li>or <code>A=new Array(3)</code> //though the size of the array may later be overwritten <em>sans</em> hoopla.
        </li>
        <li>or <code>A=[]</code>
        </li>
      </ul>
      <p>
        As in C, Java, PHP, Perl and others of these allied languages, JavaScript allows arrays to be initialized in a variety of ways. The statements
      </p>
      <pre>
<code>A=new Array; A[0]=5; A[2]=3; A[1]="hi";<br />A=new Array(5,"hi",3)<br />A=[5,3,"hi"]</code>
</pre>
      <p>
        are equivalent. It is also important to realize that arrays are evaluated by <em>reference</em> rather than by <em>value</em>. This concept, if new to the reader, is discussed a bit more below under objects, but in brief one may realize that attempting to compare arrays may yield results that appear odd. For example, the statement
      </p><code class="line">[1,1]==[1,1]</code>
      <p>
        evaluates as false, since each refers to a distinct JavaScript object.
      </p>
      <p>
        In JavaScript, array indexes need not be consecutive. That is, we might define A by A=new Array; A[7]="groundhog", without ever filling in the other elements of the array. If we do so, however, A.length will be 7, the number of the highest numerical index that has been assigned. Thus such a usage resembles associative arrays.
      </p>
      <h6>
        Associative arrays:
      </h6>A mechanism that shares a lot of superficial similarity to the array is the associative array or hash, which in JavaScript is actually a class of object rather different than real arrays in that they can be indexed by non-numeric objects (like strings) <code class="line">C=new Array; C["ham"]="eggs"; C[4]=document</code> The above is equivalent to <code class="line">C={"ham":"eggs",4:document}</code>
      <p>
        in which the resemblance to objects becomes more obvious. It is also, perhaps surprisingly, the same as
      </p><code class="line">C=new String; C["ham"]="eggs"; C[4]=document</code>
      <p>
        This is because strings and arrays in JavaScript are both objects and because, objects, like hashes in other languages, may have properties of any sort assigned to them. In JavaScript A["a"] is notationally equivalent to A.a, which provides convenience in referring to arbitrary properties of objects, but also promotes a bit of confusion about the difference between "true" arrays and associative ones in the language.
      </p>
      <p>
        To avoid the confusion with specialized objects which may have no particular relevance to the associative array one wished to define, it may be best to use the notation
      </p><code class="line">C=new Object; C["ham"]="eggs"; C[4]=document</code>
      <p>
        Associative arrays differ from ordinary consecutive numeric arrays in that length returns only the value of the highest numerical index. Likewise array operators like join and pop will work only with the portion of the hash that is numerically indexed, returning results which may be confusing at times.
      </p>
      <p>
        Another approach for building associative arrays involves the use of an object constructor function. Though a bit cumbersome for this purpose, it does illustrate some of the richness of the language:
      </p><code class="line">A=new Klingon(5,"hi",3)</code>
      <p>
        in which the function Klingon creates new objects based on its array of incoming arguments.
      </p>
      <pre>
<code class="line"> function Klingon(){<br /> for (i=0;i&lt;arguments.length;i++) this[i]=arguments[i]<br />}</code>
</pre>
      <p>
        The above creates an object quite similar to B=[5,"hi",3] in that a pairwise comparison of their elements will suggest identity, though array methods and properties such as <em>length</em> and <em>pop</em> are unavailable to this associative object.
      </p>
      <h6>
        Loops:
      </h6>
      <p>
        If a language has variables, loops and conditionals, it is, in some sense, able to do whatever can be done with a computing language. A loop allows us to do some similar set of steps repeatedly, as a way of conserving code.
      </p>
      <p>
        Example:
      </p>
      <dl>
        <dd>
          <p>
            The statements
          </p>
          <pre>
<code>a=2;b=3;<br />c=a+b;a=b;b=c;<br />c=a+b;a=b;b=c;<br />c=a+b;a=b;b=c;<br />c=a+b;a=b;b=c;</code>
</pre>
          <p>
            when completed, result in values of 13, 21, and 21 for a, b, and c respectively. The same can be accomplished by
          </p>
          <pre>
<code>a=2;b=3;<br />for (i=0;i&lt;4;i++)<br /> { c=a+b;a=b;b=c; }</code>
</pre>
        </dd>
      </dl>
      <p>
        Basically, a loop allows us to do something (or a collection of very similar somethings) over and over, until some condition for stopping is achieved. JavaScript has several types of loops, the most important of which are enumerated <em>for</em> loops, non-enumerated <em>for</em>loops, and <em>while</em>loops.
      </p>
      <ul>
        <li>the enumerated <em>for</em> loop<br />
          This loop, apparently borrowed from C, has slightly awkward syntax. The loop index (a variable used temporarily to guide the steps through the loop) is given an initial value, a condition for termination, and an amount by which the loop index increments each time.<br />
          <br />
        </li>
      </ul>
      <dl>
        <dd>
          Example:
          <pre>
<code>s="";<br />for (i=5;i&lt;10;i=i+1){s+="&amp;nbsp;")</code>
</pre>
          <p>
            In the above, the loop index, x, is assigned a starting value of 5; the instructions inside the loop are to be repeated until the loop index takes on a value greater than 10, and the loop index increases by 1 each time. After this loop is finished the value of s will have become <code>"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"</code>
          </p>
        </dd>
      </dl>Such a loop could prove useful in building up a large string of one form or another. An example of a more practical (and typical) application is shown below, where one loop (with index j) is nested inside another (with index i).
      <table border="1" cellpadding="2" cellspacing="0" width="355">
        <col width="62" />
        <tbody>
          <tr>
            <th>
              an HTML<br />
              table
            </th>
            <th>
              its source code
            </th>
          </tr>
          <tr>
            <td valign="top">
              <table style="left: 0pt;" cellpadding="0" cellspacing="0" rules="rows">
                <tbody>
                  <tr>
                    <td>
                      1|
                    </td>
                    <td>
                      1
                    </td>
                    <td>
                      2
                    </td>
                    <td>
                      3
                    </td>
                  </tr>
                  <tr>
                    <td>
                      2|
                    </td>
                    <td>
                      2
                    </td>
                    <td>
                      4
                    </td>
                    <td>
                      6
                    </td>
                  </tr>
                  <tr>
                    <td>
                      3|
                    </td>
                    <td>
                      3
                    </td>
                    <td>
                      6
                    </td>
                    <td>
                      9
                    </td>
                  </tr>
                </tbody>
              </table>
            </td>
            <td>
              <pre>
<code>&lt;table cellspacing=0 cellpadding=0 rules='rows'&gt;<br />&lt;tr&gt;&lt;td&gt;1|&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;<br />&lt;tr&gt;&lt;td&gt;2|&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;/tr&gt;<br />&lt;tr&gt;&lt;td&gt;3|&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;/tr&gt;<br />&lt;/table&gt;</code>
</pre>
            </td>
          </tr>
          <tr>
            <th colspan="2">
              a function which builds the source code of the table
            </th>
          </tr>
          <tr>
            <td colspan="2">
              <pre>
<code><br />function doIt(){<br />var s="&lt;table cellspacing=0 cellpadding=0 rules='rows'&gt;\n"<br />for (i=1;i&lt;4;i++){<br />s+="&lt;tr&gt;&lt;td&gt;"+i+"|&lt;/td&gt;"<br />for (j=1;j&lt;4;j++) s+="&lt;td&gt;"+(i*j)+"&lt;/td&gt;"<br />s+="&lt;/tr&gt;\n"<br />}<br />s+="&lt;/table&gt;"<br />return s<br />}</code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <h6>
        the non-enumerated <em>for</em> loop (for...in).
      </h6>When the programmer seeks to explore some sort of complex object or associative array in which the indices are either non-contiguous or unknown, a very important utility is the <em>for...in</em> loop.
      <dl>
        <dd>
          <p>
            Example:
          </p><code class="line">A=new Object("a":1,"b":"banana")</code> <code class="line">for (i in A) alert(A[i])</code>
          <p>
            The program will popup exactly two alert boxes displaying first the numeral 1, then the string "banana."
          </p>
        </dd>
      </dl>
      <p>
        The value of the <em>for...in</em> loop becomes perhaps clearer when we examine the behavior of the enumerated loop over an array which has non-contiguous elements:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="451">
        <col width="315" />
        <tbody>
          <tr>
            <th>
              Program
            </th>
            <th>
              output
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code><br />function doIt(){<br />A=new Array(0,1,2,3)<br />A[6]="hamburger"<br />s=""<br />for(i=0;i&lt;7;i++){s+=i+":"+A[i]+"\n"}<br />return s<br />}<br /></code>
</pre>
            </td>
            <td>
              <pre>
<code>0:0<br />1:1<br />2:2<br />3:3<br />4:undefined<br />5:undefined<br />6:hamburger<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The above program outputs two intermediate but undefined values, indicating the superiority of the <em>for...in</em>approach in such situations. Merely, replacing the<br />
        "for(i=0;i&lt;7;i++)"statement with "for (i in A)"produces a report containing all and only the values of the array A.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="451">
        <col width="315" />
        <tbody>
          <tr>
            <th>
              Program
            </th>
            <th>
              output
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code>function doIt(){<br /> A=new Array(0,1,2,3)<br /> A[6]="hamburger"<br /> s=""<br /> for(i in A){s+=i+":"+A[i]+"\n"}<br /> return s<br />}<br /></code>
</pre>
            </td>
            <td>
              <pre>
<code>0:0<br />1:1<br />2:2<br />3:3<br />6:hamburger<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <h6>
        the <em>while</em> loop.
      </h6>Oftentimes, in programming, we are not so certain how many iterations we wish our loop to run, but, instead, we know the condition under which we wish it to stop. In such a situation, a <em>while</em> loop may simplify our cognitive effort a wee bit.<br />
      <dl>
        <dd>
          <p>
            Example:
          </p>
          <pre>
<code>a=2;b=3;c=a+b;<br />while (c&lt;1000000) <br />{ c=a+b;a=b;b=c; }<br /></code>
</pre>
          <p>
            This example calculates Fibonacci numbers until one becomes bigger than one million, with the loop being exited on what turns to be the 23<sup>rd</sup> iteration when c becomes 1346269. Before we actually run the process, we might not realize that it will take 23 iterations.
          </p>
        </dd>
      </dl>
      <h6>
        Array techniques:
      </h6>In JavaScript, a true array (one with consecutive numeric indexes beginning with 0), there are a variety of properties and methods available for finding out about and manipulating arrays. In addition to the techniques <em>split</em> and <em>join</em> that allow converting strings to arrays and vice-versa discussed above under strings, the following techniques may simplify our lives: <em>push</em>, <em>pop</em>, <em>shift</em>, <em>unshift</em>, <em>concat</em>, <em>slice</em>, <em>splice</em> and <em>sort</em>.
      <ul>
        <li>Array indexing is performed using square braces. If A=[2,3,"go",6,7], then A[0]=2, A[1]=3, A[2]="go", A[3]=6 and A[4]=7.
        </li>
        <li>
          <em>length</em> &mdash; returns an integer representing the number of elements in the array (provided the elements are indexed consecutively starting with zero). If A=[3,4,5,2,"happy",8] then A.length is 6.
        </li>
        <li>
          <em>push</em> &mdash; appends a new element to the end of an array. If A=[4,5,3], and we issue the A.push(9) command, A will now be equal to [4,5,3,9].
        </li>
        <li>
          <em>pop</em> &mdash; removes the last element from an array, and if called for, returns that last element. If A=[4,5,3], and we issue the A.pop() command, A will now be equal to [4,5]. If, instead, we issue the command Q=A.pop(), then Q will equal 3, and A will equal [4,5].
        </li>
        <li>
          <em>shift</em> &mdash; just like <em>pop</em>, <em>shift</em> removes the first element of an array.
        </li>
        <li>
          <em>unshift</em> &mdash; like, <em>push</em>, <em>unshift</em> inserts the argument into the array as its first element.
        </li>
        <li>
          <em>concat</em> &mdash; allows the combining of two arrays. If A=[2,3] and B=[5,6,7] then A.concat(B) produces a new array equal to [2,3,5,6,7] while leaving A and B unchanged.
        </li>
        <li>
          <em>slice</em> &mdash; produces a subarray of a contiguous array between specified index numbers. If A=[2,3,5,6,7], then A.slice(1,3) returns the array [3,5,6] since those are the elements with indices 1 through 3. Like <em>concat</em>, <em>slice</em> does not affect the value of A.
        </li>
        <li>
          <em>splice</em> &mdash; useful for sampling without replacement, <em>splice</em> allows the removal of a specified number of elements from an array starting at a specified position. If A=[2,3,5,6,7] and the command A.splice(3,1) is issued A becomes [2,3,5,7] since the previous A[3] (namely the value 6) is removed from A.
        </li>
        <li>
          <em>sort</em> &mdash; returns an array sorted according to some criterion. By default, <em>sort</em> performs an ordering based on increasing ASCII values, but we may change the sort criterion by specifying our own comparison function. This rather interesting and flexible function will be analyzed in more detail briefly.
        </li>
      </ul>
      <p>
        Examples of the use of these array methods is illustrated here:
      </p>
      <table border="1" cellpadding="1" cellspacing="3" width="553">
        <col width="543" />
        <tbody>
          <tr>
            <td>
              <p>
                Contents of array named A:
              </p><img src="http://www.w3.org/Graphics/SVG/IG/resources/StateOfArt/526bcd2c.gif" alt="Frame7" id="Frame7" />
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        eval This function takes strings as input and returns, as output, the evaluation of those strings seen as JavaScript programs. In its simplest use it performs the useful, but simple, task of converting strings received from the user to their numeric values:
      </p>
      <p>
        numbervalue=eval(forms[0].elements[0].value).
      </p>
      <p>
        Given its ability to perform any JavaScript program, however, eval can do much more as illustrated below:
      </p>
      <table border="1" cellpadding="1" cellspacing="3" width="364">
        <col width="217" />
        <tbody>
          <tr>
            <td>
              string:
            </td>
            <td>
              eval(string):
            </td>
          </tr>
          <tr>
            <td>
              1+1
            </td>
            <td>
              2
            </td>
          </tr>
          <tr>
            <td>
              1+1/2
            </td>
            <td>
              1.5
            </td>
          </tr>
          <tr>
            <td>
              Math.PI
            </td>
            <td>
              3.141592653589793
            </td>
          </tr>
          <tr>
            <td>
              (23+16)/Math.sqrt(8)
            </td>
            <td>
              13.788582233137676
            </td>
          </tr>
          <tr>
            <td>
              x=7;y=8;x+y
            </td>
            <td>
              15
            </td>
          </tr>
          <tr>
            <td>
              function f(x){return x/3};f(6)
            </td>
            <td>
              2
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Modifying documents: The <em>de facto</em> approach to self-modifying documents has undergone considerable change since the early years of JavaScript. The first approaches involved
      </p>
      <ul>
        <li>modifying attributes of images or form elements; and
        </li>
        <li>document.write.
        </li>
      </ul>
      <p>
        As time passed, a successful cross-browser approach emerged using
      </p>
      <ul>
        <li>innerHTML.
        </li>
      </ul>
      <p>
        With the arrival of DOM methods that are consistent between XML and HTML, more modern approaches have come into include such techniques as
      </p>
      <ul>
        <li>document.createElement( );
        </li>
        <li>setAttribute(attr,value);
        </li>
        <li>appendChild( ); and
        </li>
        <li>removeChild( ).
        </li>
      </ul>
      <p>
        A bit of review of each of these techniques may be in order to understand the strengths and weaknesses of each.
      </p>
      <dl>
        <dd>
          <p>
            <span class="underline">The simple modification of attributes of images or form elements,</span> is still a mainstay of much web programming. The JavaScript statements:
          </p><code class="line">document.images[0].src = "someNewImage.jpg"</code>
          <p>
            or
          </p><code class="line">document.forms[0].elements[0].value="Here is some simple feedback"</code>
          <p>
            are important ways of making documents "dynamic" with little code and cognitive simplicity.
          </p>
          <p>
            <span class="underline">document.write</span> &mdash; This method of the document object allows an entire document space to be overwritten, by JavaScript with new HTML. In conjunction with frames, or multiple windows, it allows us to take user input into account in rendering a web page.
          </p>
          <p>
            Example:
          </p>
          <table class="null">
            <tbody>
              <tr>
                <td class="null">
                  <pre>
<code>&lt;html&gt;&lt;script&gt;<br />function doIt(n){<br />  s=""<br /> for (i=0;i&lt;n;i++) <br />  s+=Math.ceil(Math.random()*10)+"&lt;br&gt;"<br />  IFR=document.getElementById("IFR")<br /> IFR.document.write(s)<br />  IFR.document.close()<br />}<br />&lt;/script&gt;&lt;body&gt;How many random numbers do you need?<br />&lt;form name="f" action="javascript:doIt(eval(f.i.value))"&gt;<br />&lt;input size="4" name="i" value=6&gt;&lt;input type="submit"&gt;&lt;/form&gt;<br />&lt;iframe id="IFR"&gt;&lt;/iframe&gt;<br />&lt;/body&gt;&lt;/html&gt;<br /></code>
</pre>
                </td>
              </tr>
            </tbody>
          </table>
          <p>
            The above code is probably just about as terse an example as one can write using document.write that allows one to repeatedly ask the user for input and then to rewrite HTML based on that input<sup><a class="footnoteanc" href="#footnote113sym" id="footnote113anc">113</a></sup>. 
          </p>
        </dd>
      </dl>
      <p>
        The biggest problem associated with document.write is that it rewrites the entire document space, including any functions and variables that were previously defined. If we wish to rewrite a page more than once, then it can become quite difficult to export enough relevant content into the rewritten page to be able to preserve its primarily functionality. Associated with this is the fact that different browsers preserve differing amounts of context from a page while in the midst of a rewrite, making cross-browser scripting mildly agonizing.
      </p>
      <p>
        <span class="underline">innerHTML</span> &mdash; I remember when I first discovered this relatively new technique for creating dynamic content. I was rather appalled by its cumbersome verbosity and the quirky case sensitivity of its inevitable companion: getElementById. I was distrustful of anything using id's, since my experience in getting things to work with both Netscape and Internet Explorer had made me skeptical of anything that looked too modern. The method looked rather like VisualBasic to me. On the other hand, I was plenty tired of making my students jump through hoops to preserve enough context from a page to be able to dynamically rewrite it with document.write. So, when I found it actually worked in both browsers (there were two mainstream browsers in those days), I was quite willing to forgive some of its aesthetic clumsiness.
      </p>
      <p>
        It turns out that innerHTML is not actually supported in the most recent W3C standard (HTML4.01) and some authors strongly discourage its use. On the other hand, it is a <em>de facto</em> standard, being supported by all the major browsers. The emergence of the new HTML5 Working Group (consistitued in 2007 after the majority of writing of this book had been done) signals a shift in the wind: <em>de facto</em> practices are <em>generally</em> becoming a part of the W3C standard. It also works well, and is ultimately quite easy to use. An interesting debate on the subject, well worth a read, can be seen at Jeremy Keith's DOM Scripting Blog<sup><a class="footnoteanc" href="#footnote114sym" id="footnote114anc">114</a></sup>. We will visit some of the pros and cons of this approach after introducing the primary alternative: the DOM2 methods of inserting new nodes into the document hierarchy.
      </p>
      <p>
        The way it works is this: find an element (either by traversing the DOM, using named elements, or by getElementById), let the innerHTML of that element be set equal to any string of HTML:
      </p>
      <pre>
<code class="line">Q=document.getElementById("Q")<br />Q.innerHTML="&lt;div align='center'&gt;&lt;img src='a.jpg'&gt;&lt;br&gt;hello&lt;/div&gt;"</code>
</pre>
      <p>
        With two lines of code (easily reduced to one long line), an image and a caption is inserted into an HTML document without modifying anything other than placing material below the element known as Q.
      </p>
      <p>
        For comparison with the example where we used document.write to insert random numbers into a page, we do it this time by resetting the innerHTML of a &lt;div&gt;:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
<code><br />&lt;html&gt;&lt;script&gt;<br />function doIt(n){<br />s=""<br />for (i=0;i&lt;n;i++) s+=Math.ceil(Math.random()*10)+"&lt;br&gt;"<br />IFR=document.getElementById("Q")<br />Q.innerHTML=s<br />}<br />&lt;/script&gt;&lt;body&gt;How many random numbers do you need?<br />&lt;form name="f" action="javascript:doIt(eval(f.i.value))"&gt;<br />&lt;input size="4" name="i" value=6&gt;&lt;input type="submit"&gt;<br />&lt;div id="Q"&gt;&lt;/div&gt;<br />&lt;/body&gt;&lt;/html&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        <span class="underline">document.createElement and associated DOM2 methods</span>
      </p>
      <p>
        These approaches find a node within the document tree and then add or remove child nodes from that superordinate container.
      </p>
      <p>
        To remove a node is relatively straightforward:
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
<code>&lt;html&gt;&lt;script&gt;<br />function begone(){<br /> PN=document.getElementById("P")<br />  PN.parentNode.removeChild(PN)<br />}<br />&lt;/script&gt;&lt;body&gt;&lt;div id="P" onclick="begone()"&gt;<br />This node will disappear for good when clicked upon<br />&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        We remove a node from its parentNode, so in the above we first find the node and and then remove it from its parentNode.
      </p>
      <p>
        Adding a node is a bit more complex: we have to
      </p>
      <ol>
        <li>using document.createElement, create the node as a member of the document (paying proper attention, if needed, to the XML namespace)
        </li>
        <li>using setAttribute and/or appendChild, flesh out the node by adding attributes and/or its own children.
        </li>
        <li>using appendChild, add it, as a child, to some appropriate parent.
        </li>
      </ol>
      <p>
        The following simplified example inserts a &lt;br&gt; tag at the end of a particular &lt;div&gt; to increase the spacing between it and the &lt;div&gt; which follows.
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
<code>&lt;html&gt;&lt;script&gt;<br />function grow(){<br /> PN=document.getElementById("P")<br />  B=document.createElement("br")<br /> PN.appendChild(B)<br />}<br />&lt;/script&gt;&lt;body&gt;&lt;div id="P" onclick="grow()"&gt;<br />This node will grow when clicked upon<br />&lt;/div&gt;&lt;div&gt;Observe!&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<br /><br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In HTML as in XML we not only have tags (nodes), but free-floating text that sometimes appears inside the tag. This text is itself treated as a node and has its own method for being created: createTextNode() (or createTextNodeNS, for XML, including SVG).
      </p>
      <p>
        The following example builds a new &lt;div&gt;, assigns a simple attribute, populates it with some text and then inserts it into the DOM.
      </p>
      <table class="null">
        <tbody>
          <tr>
            <td class="null">
              <pre>
<code>&lt;html&gt;&lt;script&gt;<br />function docplay(){<br />  D=document.createElement("div")<br />  D.setAttribute("align","center")<br /> T=document.createTextNode("more text")<br /> D.appendChild(T)<br /> document.body.appendChild(D)<br />}<br />&lt;/script&gt;&lt;body onclick="docplay()"&gt;<br />Click to add text.<br />&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        Realistically, document.write has rather disappeared from the web programmer's arsenal of useful tools. It causes a lot more problems than it solves, while the other techniques have largely replaced it.
      </p>
      <p>
        Herewith is a brief comparison (from this author's perspective) of some of the pros and cons of the other two approaches. The reader may already be aware that some programmers are zealous in their opinions and that some will, as a matter of principle, refuse to use one or another approach and will sometimes offer articulate explanations as to why.
      </p>
      <dl>
        <dd>
          <table border="1" cellpadding="7" cellspacing="0" width="501">
            <col width="171" />
            <col width="92" />
            <col width="72" />
            <col width="107" />
            <tbody>
              <tr>
                <td>
                  &nbsp;
                </td>
                <td>
                  document.write
                </td>
                <td>
                  innerHTML
                </td>
                <td>
                  add/remove nodes
                </td>
              </tr>
              <tr>
                <td>
                  W3C standard
                </td>
                <td>
                  no
                </td>
                <td>
                  no
                </td>
                <td>
                  yes
                </td>
              </tr>
              <tr>
                <td>
                  Works in almost all browsers
                </td>
                <td>
                  sort of
                </td>
                <td>
                  yes
                </td>
                <td>
                  no
                </td>
              </tr>
              <tr>
                <td>
                  Human-readable code
                </td>
                <td>
                  rarely
                </td>
                <td>
                  sometimes
                </td>
                <td>
                  yes
                </td>
              </tr>
              <tr>
                <td>
                  Terse code
                </td>
                <td>
                  occasionally
                </td>
                <td>
                  usually
                </td>
                <td>
                  occasionally
                </td>
              </tr>
              <tr>
                <td>
                  Modular code
                </td>
                <td>
                  no
                </td>
                <td>
                  partly
                </td>
                <td>
                  yes
                </td>
              </tr>
              <tr>
                <td>
                  Robust code
                </td>
                <td>
                  no
                </td>
                <td>
                  depends
                </td>
                <td>
                  usually
                </td>
              </tr>
            </tbody>
          </table>
        </dd>
      </dl>
      <p>
        To explain my own perspective in the above comparisons would take numerous words and would probably not convince anyone whose mind is already made up on some of these controversial issues, so the table is offered merely as one person's opinion. On another front, Peter Paul Koch reports that using innerHTML is generally quite faster computationally than using DOM methods based on a series of tests in several browsers<sup><a class="footnoteanc" href="#footnote115sym" id="footnote115anc">115</a></sup>. 
      </p>
      <p>
        A couple of objective comparisons might be made as well. Consider the two examples used to illustrate innerHTML &mdash; a) the repeated generation and display of n random numbers and b) the insertion of an image and its caption into an HTML document. Assuming that the &lt;HTML&gt; setup is pretty much the same (with an &lt;iframe&gt; rather than a &lt;div&gt; being used for document.write), and that we have function which return an appropriate collection of random number, the JavaScript for these three approaches is illustrated here.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="182" />
        <col width="183" />
        <col width="182" />
        <tbody>
          <tr>
            <td colspan="3" class="caption">
              Three methods of repeatedly generating a user-specified number of random numbers
            </td>
          </tr>
          <tr>
            <td>
              <p>
                document.write
              </p>
            </td>
            <td>
              <p>
                innerHTML
              </p>
            </td>
            <td>
              <p>
                DOM2 methods
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>function docwrite(n){<br /> s=buildstring(n) <br />//a &lt;br&gt;-delimited string <br />// of n random integers <br /> D=document<br /> I=D.getElementById("I")<br /> I.document.write(s)<br /> I.document.close()<br />}<br /></code>
</pre>
            </td>
            <td>
              <pre>
<code>function IHTML(n){<br /> s=buildstring(n) <br />//a &lt;br&gt;-delimited string <br />// of n random integers<br /> D=document<br /> Q=D.getElementById("Q")<br /> Q.innerHTML=s<br />}<br /></code>
</pre>
            </td>
            <td>
              <pre>
<code>function DOM(n){<br /> R=buildArray(n) <br />//an array of n random //integers<br /> D=Document<br /> DV=D.getElementById("Q")<br /> if (X)DV.removeChild(X)<br /> X=D.createElement("div")<br /> for (i in R){<br /> T=D.createTextNode(R[i])<br /> Temp.appendChild(T)<br /> B=D.createElement("br")<br /> X.appendChild(B)<br /> }<br /> DV.appendChild(X)<br />}<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In the DOM2 example above, it should be explained that if we had merely used the string s (as returned by buildstring(n)) as is done in the innerHTML and document.write examples, that string is inserted literally into the DOM such that the &lt;br&gt; tags actually appear as source markup rather than as text (i.e., <code>DV.innerHTML</code> becomes <code>"8&amp;lt;br&amp;gt;5&amp;lt;br&amp;gt;6&amp;lt;br&amp;gt;3&amp;lt;br&amp;gt;8&amp;lt;br&amp;gt;2&amp;lt;br&amp;gt;"</code> and the tag appears in the browser as <code>"8&lt;br&gt;5&lt;br&gt;6&lt;br&gt;3&lt;br&gt;8&lt;br&gt;2&lt;br&gt;")</code>. The temporary node is created, since we must remove any previous results before adding new material<sup><a class="footnoteanc" href="#footnote116sym" id="footnote116anc">116</a></sup>. 
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="182" />
        <col width="183" />
        <col width="182" />
        <tbody>
          <tr>
            <td colspan="3" class="caption">
              Inserting an image and its caption
            </td>
          </tr>
          <tr>
            <th>
              document.write
            </th>
            <th>
              innerHTML
            </th>
            <th>
              DOM2 methods
            </th>
          </tr>
          <tr>
            <td>
              <pre>
<code>function docwrite(){<br /> D=document<br /> s="&lt;div align='center'&gt;"<br /> s+="&lt;img src='a.jpg'&gt;<br /> s+="&lt;br&gt;hello&lt;/div&gt;"<br /> IFR=D.getElementById("IFR")<br /> IFR.D.write(s)<br /> IFR.D.close()<br />}<br /></code>
</pre>
            </td>
            <td>
              <pre>
<code>function IHTML(){<br /> D=document<br /> s="&lt;div align='center'&gt;"<br /> s+="&lt;img src='a.jpg'&gt;"<br /> s+="&lt;br&gt;hello&lt;/div&gt;"<br /> DV=D.getElementById("Q")<br /> DV.innerHTML=s<br />}<br /></code>
</pre>
            </td>
            <td>
              <pre>
<code>function DOM(){<br /> D=document<br /> DV=D.getElementById("Q")<br /> C="center"<br /> DV.setAttribute("align",C)<br /> I=D.createElement("img")<br /> f="a.jpg"<br /> I.setAttribute("src",f)<br /> BR=D.createElement("br")<br /> m="hello"<br /> TX=D.createTextNode(m)<br /> DV.appendChild(IM)<br /> DV.appendChild(BR)<br /> DV.appendChild(TX)<br />}<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <h5>
        Objects
      </h5>
      <p>
        Perhaps the easiest way to understand the utility of objects in programming is to write some sort of animated scene in which different pictures or "sprites" move about with different speeds, directions and behavioral quirks. Oftentimes one builds a series of arrays, with each array representing one aspect: current speed or the current position on the x axis or the current facet, glyph, or sprite instances, associated with the sprite. Each time we update the appearance of each sprite, we loop through each of the arrays associated with it. In programming with objects, we would keep all the various aspects of an individual sprites associated with the sprite instead of with the particular attribute array. Such makes good sense from the perspective of cognitive ease, since we tend to think about what sprites do rather than of checklists of attributes across numerous objects. Proponents of object oriented programming since the late 1960's have made plenty of good arguments for the use of objects. If the reader is already a strong programmer, she already knows these arguments; if not, she may find the arguments a bit too abstract for ready consumption.
      </p>
      <p>
        As mentioned at the outset, objects in JavaScript are a bit different than in C++ or Java, owing to JavaScript's affiliation with the functional rather than procedural class of languages. The mechanisms for constructing new classes of objects are refreshingly terse (depending on one's tolerance for what may appear as 'loose' to some), being closely integrated with JavaScript's first-order functions.
      </p>
      <p>
        There are several approaches to defining an object. Three techniques with equivalent results are shown as follows:
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="560">
        <col width="122" />
        <col width="208" />
        <col width="186" />
        <tbody>
          <tr>
            <td colspan="3" class="caption">
              Different approaches to creating the same object
            </td>
          </tr>
          <tr>
            <td>
              <pre>
<code>O=new Object<br />O.x=70<br />O.y=30<br />O.col="red"<br /></code>
</pre>
            </td>
            <td>
              <code>O={x:70,y:30,col:"red"}</code>
            </td>
            <td>
              <pre>
<code>O=new Bird(70,30,"red")<br />function Bird(x,y,c){<br /> this.x=x<br /> this.y=y<br /> this.col=c<br />}<br /></code>
</pre>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        After executing any of the above blocks of code, the object O will exist and have properties <code>O.x</code>, <code>O.y</code> and <code>O.col</code> equal to 70, 30 and "red" respectively. The third approach has the additional result of defining a "constructor" function which can be used to create other instances of Birds, should such be desired.
      </p>
      <p>
        In addition to having properties or attributes, JavaScript objects may also have methods associated with them.
      </p>
      <table border="1" cellpadding="7" cellspacing="0" width="591">
        <col width="280" />
        <tbody>
          <tr>
            <td>
              <p>
                Example1:
              </p>
              <pre>
<code>R=new Rect(20,20,40,40,"blue")<br />function Rect(x,y,w,h,c){<br />  this.x=x; this.y=y;<br />  this.width=w;<br />  this.height=h;<br /> this.col=c;<br />  this.area=Area;<br />}<br />function Area(){<br /> return this.h*this.w;<br />}<br /></code>
</pre>
            </td>
            <td>
              <p>
                Example2:
              </p>
              <pre>
<code>R=new Rect(20,20,40,40,"blue")<br />function Rect(x,y,w,h,c){<br />  this.x=x; this.y=y;<br />  this.width=w;<br />  this.height=h;<br /> this.col=c;<br />  this.perim=function(){<br /> return 2*(w+h)<br /> }<br />}<br /></code>
</pre>
              <p>
                &nbsp;
              </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        In Example1, the function Area() is defined outside the object constructor function, since we might wish to use such a function to also compute areas of other shapes (such as a parallelogram which might use the same method). In this case R.width would equal 40 while R.Area( ) would be 1600. The code of Example 2 defines a perim method, internally within the constructor function. Such might be appropriate if there is no need for that method to be used with any other classes of objects.
      </p>
      <p>
        Like many languages, objects are referred to by reference rather than by value. Let us illustrate by defining three objects f, g, and h as follows:
      </p><code class="line">f={x:6;y:7} and g={x:6;y:7} and h=g.</code>
      <p>
        In the above, <em>f.x</em> is a simple number as is <em>g.x</em>, so the two are evaluated by value, so that (f.x==g.x) and (f.x==h.x) are both true. However, <em>f</em> and <em>g</em> are objects and hence the question is "do they refer to the same object or not?" rather than "do these objects have equivalent definitions?" Hence <em>f</em> is not equivalent to <em>g</em>, so the statement (f==g), is false. Since <em>g</em> and <em>h</em> point to the same object, (g==h) is true.
      </p>
      <p>
        The number of things one can do with objects in JavaScript is fairly impressive. Together with the lambda functions, one can make curried functions, and with the prototype method of all objects one can extend inheritance and polymorphism into quite interesting directions. I suggest the reader may wish to pay the language more than a casual glance.
      </p>
      <hr />
      <a name="Afterword" id="Afterword"></a>
      <h2>
        Afterword
      </h2>Having originally intended this book as a printed document, I have many times regretted having ever thought that would be an appropriate medium for this particular message. SVG is visual, dynamic and interactive. All of these, due to limitations of the printed page: the cost of printing color, or the fact that you can't point at a page and expect its content to change, would have made the web forum the appropriate one. In time, I'd like to see this manuscript become less "Dailey's book" and more the W3C's book. It would be nice to have multiple contributors to help keep the content current and accurate.
      <p>
        Apologies already, for the inaccuracies and for all the things that are out of date. The world of SVG has changed quicker than one person with a full time job and family can possibly keep up with.
      </p>
      <p>
        While thanking the reviewers (Doug Schepers, Jerry Maddox, Domenico Strazzullo, Erik Dahlstrom and Ruud Steltenpool) whose careful comments have found numerous errors of various types, I also wish to forgive them (especially my friend Erik) for pointing out all of its shortcomings. More seriously, each has been flattering and encouraging, and their patience with my writing style (often more flamboyent than accurate) has been a source of comfort over several years of experimentation with various edges of the specification.
      </p>
      <p>
        Several topics have not been covered in enough detail. My sincere hope is that, as a web document, under the purview of the W3C, other hands and eyes may be put to the task of improving this document. Among those things that I and others have discovered should be covered in more detail <em>some time</em> are the following topics:
      </p>
      <ul>
        <li>A nice clean treatment of the interaction between scripted animation and SMIL;
        </li>
        <li>A good section on XSLT used with SVG;
        </li>
        <li>A small Appendix on HTML that actually reflects the state of HTML as it begins its transition into HTML5;
        </li>
        <li>Better treatment of SVG in HTML and XHTML (in-line SVG, SVG in text/HTML) etc.;
        </li>
        <li>A more extensive treatment of Ajax;
        </li>
        <li>use of the SVG 1.1 DOM methods (including such things as element.href.baseVal="http:..." instead of the more cumbersome setAttributeNS(). Perhaps a treatment of "shadow trees" would belong here;
        </li>
        <li>explanation of getScreenCTM
        </li>
        <li>A knowledgeable account of Apache Batik;
        </li>
        <li>illustration of drag and drop.(e.g., as at <a href="http://srufaculty.sru.edu/david.dailey/svg/makeDragDrop.svg">this example</a>)
        </li>
        <li>CSS and JavaScript (this stuff is now available in more than one browser and the SVG WG is extending its functionality in many important ways).
        </li>
        <li>The use of foreignObject (to put HTML inside SVG).
        </li>
        <li>A section on Vector Effects. For the short term, there is just a link to the W3C <a href="svgvectoreffectsprimer.html">SVG Vector Effects 1.2 Part 1: Primer</a> appearing in a couple of places.
        </li>
        <li>A more thorough treatment of script libraries appropriate to SVG (e.g. Dojo);
        </li>
        <li>Code optimization (for example see http://www.treebuilder.de/default.asp?file=978374.xml)
        </li>
        <li>Accessibility issues in SVG. (A first step would be to make this book, itself more accessible, starting with reasonable values of the <em>alt</em> attribute for all images.)
        </li>
        <li>Other?
        </li>
      </ul>
      <p>
        These and other topics are topics waiting for an author. If you feel as though you can contribute some text and examples that generally fit with the authorial flavor and intentions represented here, and if you don't mind me mangling your prose a bit to fit with my own concept of the flavor and intentions, please! do get in touch. You can Google me. I'm certain that the W3C, the SVG Interest Group, the SVG Working Group, the SVG community at large, and I will all be happy to receive your contributions.
      </p>
      <hr />
      <h2>
        Footnotes
      </h2>
      <div id="footnote1">
        <p class="footnote"><a class="footnotesym" href="#footnote1anc" id="footnote1sym" name="footnote1sym">1</a> <em>W3C &mdash; Scalable Vector Graphics (SVG) History</em>, by The World Wide Web Consortium, as seen January 2007 at <a href="http://www.w3.org/Graphics/SVG/History">http://www.w3.org/Graphics/SVG/History</a>.</p>
      </div>
      <div id="footnote2">
        <p class="footnote">
          <a class="footnotesym" href="#footnote2anc" id="footnote2sym" name="footnote2sym">2</a> Note: "ADA", "C", and "ASP" contain too many false hits to be interpretable. For example, the top three hits on ADA are to "Americans with Disabilities Act", "American Diabetes Association", and "American Dental Association". Among the top hits for "ASP" are included "Association of Shareware Professionals" and "Astronomical Society of the Pacific."
        </p>
      </div>
      <div id="footnote3">
        <p class="footnote">
          <a class="footnotesym" href="#footnote3anc" id="footnote3sym" name="footnote3sym">3</a> <em>Scalable Vector Graphics (SVG) 1.1 Specification</em>, W3C Recommendation 14 January 2003, available at http://www.w3.org/TR/SVG/.
        </p>
      </div>
      <div id="footnote4">
        <p class="footnote">
          <a class="footnotesym" href="#footnote4anc" id="footnote4sym" name="footnote4sym">4</a> "Archiving the World Wide Web" in <em>Building a National Strategy for Digital Preservation: Issues in Digital Media Archiving</em> by Peter Lyman for the Council on Library and Information Resources at <a href="http://www.clir.org/pubs/reports/pub106/web.html">http://www.clir.org/pubs/reports/pub106/web.html</a>, Reprinted at <a href="http://www.digitalpreservation.gov/about/es_web.pdf">http://www.digitalpreservation.gov/about/es_web.pdf</a>, circa 2000.
        </p>
      </div>
      <div id="footnote5">
        <p>
          <a class="footnotesym" href="#footnote5anc" id="footnote5sym" name="footnote5sym">5</a> I wished to make a sort of "simplest" example that would work consistently across browsers. The opening tag &lt;svg xmlns="http://www.w3.org/2000/svg"&gt; could be simplified to read simply &lt;svg&gt;, but that would only work in ASV+Internet Explorer and Opera. Firefox requires that the XML namespace (the xmlns attribute) be established for any XML language. We may think of the xmlns attribute as instructing the browser where it might find the variety of XML (in this case, SVG) defined. We will see namespaces again in several contexts, so it is good to get accustomed to seeing what may otherwise look to the eyes as an inelegant exercise in Job Control Language. As the experienced programmer will recall, there are those involved in our loose confederation of professions who glue our software together using their hardware, their protocols and other chewing gum, and while we might not always appreciate the strange incantations they require us to use, we have perhaps accustomed ourselves to unquestioning compliance when it is required of us.
        </p>
      </div>
      <div id="footnote6">
        <p class="footnote">
          <a class="footnotesym" href="#footnote6anc" id="footnote6sym" name="footnote6sym">6</a> <em>W3C Recommendation (SVG)</em> 14 January 2003 seen at http://www.w3.org/TR/SVG/intro.html.
        </p>
      </div>
      <div id="footnote7">
        <p class="footnote">
          <a class="footnotesym" href="#footnote7anc" id="footnote7sym" name="footnote7sym">7</a> "Painting: Filling, Stroking and Marker Symbols" Chapter 11 in <em>W3C Recommendation (SVG)</em> 14 January 2003 seen at http://www.w3.org/TR/SVG/painting.html.
        </p>
      </div>
      <div id="footnote8">
        <p class="footnote">
          <a class="footnotesym" href="#footnote8anc" id="footnote8sym" name="footnote8sym">8</a> B&eacute;zier curve, from Wikipedia (the free encyclopedia), July 2006, at http://en.wikipedia.org/wiki/Bezier_curve.
        </p>
      </div>
      <div id="footnote9">
        <p class="footnote">
          <a class="footnotesym" href="#footnote9anc" id="footnote9sym" name="footnote9sym">9</a> The W3C recommendation provides ample explanation (seen at http://www.w3.org/TR/SVG/intro.html).
        </p>
      </div>
      <div id="footnote10">
        <p>
          <a class="footnotesym" href="#footnote10anc" id="footnote10sym" name="footnote10sym">10</a>Again I remind you that you may wish to put the assignment
        </p>
        <p>
          xmlns:xlink=<a href="http://www.w3.org/1999/xlink">http://www.w3.org/1999/xlink</a>
        </p>
        <p>
          in your opening &lt;svg&gt; tag. This allows the xlink:href="url(#r)" to be interpreted properly by the browser.
        </p>
        <p class="footnote">
          &nbsp;
        </p>
      </div>
      <div id="footnote11">
        <p class="footnote">
          <a class="footnotesym" href="#footnote11anc" id="footnote11sym" name="footnote11sym">11</a> See for example <em>SVG and HTML</em> at the SVG Wiki, Dec. 2006 at http://wiki.svg.org/SVG_and_HTML.
        </p>
      </div>
      <div id="footnote12">
        <p class="footnote">
          <a class="footnotesym" href="#footnote12anc" id="footnote12sym" name="footnote12sym">12</a> "SVG and HTML" from <em>SVG Wiki</em>, December 22, 2005 at http://wiki.svg.org/SVG_and_HTML.
        </p>
      </div>
      <div id="footnote13">
        <p class="footnote">
          <a class="footnotesym" href="#footnote13anc" id="footnote13sym" name="footnote13sym">13</a> We could define a series of linear gradients each of which defines stop-opacity on either side of a particular line that maps to one edge of the slicing polygon as either 0 or 1. Overlaying a series of rectangles associated with those gradients could indeed simulate a polygonal clipping region. The approach would be painstaking (though it could be scripted) and would not generalize well to paths containing Bezier curves, for example.
        </p>
      </div>
      <div id="footnote14">
        <p>
          <a class="footnotesym" href="#footnote14anc" id="footnote14sym" name="footnote14sym">14</a> The W3C standards use the term filter primitives to refer to what many in the graphics community label "filters." It is understandable why the distinction was made: to keep the &lt;filter&gt; tag separate from its children (the primitives). However, given the preexisting common parlance meaning of the term, I will sometimes use the term filter to refer to what is more technically speaking, a filter primitive. I do this since I think readers will be more comfortable with the meanings they may already associate with "filter."
        </p>
        <p class="footnote">
          &nbsp;
        </p>
      </div>
      <div id="footnote15">
        <p class="footnote">
          <a class="footnotesym" href="#footnote15anc" id="footnote15sym" name="footnote15sym">15</a> A perhaps tighter use of the term <em>primitive</em> may be seen here "The extraction of a minimum set of semantic primitives from a monolingual dictionary is NP-complete." David P. Dailey. To appear in <em>Readings in the Lexicon</em>, edited by Yorick Wilks, MIT Press, in press 2009.
        </p>
      </div>
      <div id="footnote16">
        <p class="footnote">
          <a class="footnotesym" href="#footnote16anc" id="footnote16sym" name="footnote16sym">16</a> The filter gets its name from the mathematician Carl Friedrich Gauss (1777-1855) who contributed much to the understanding of parametric statistics. The normal curve or bell curve is sometimes called a Gaussian distribution. Specifically it lets each pixel value in the new image, be determined not only by its own value, but by the value of its neighboring pixels with weights determined by a Gaussian curve.
        </p>
      </div>
      <div id="footnote17">
        <p class="footnote">
          <a class="footnotesym" href="#footnote17anc" id="footnote17sym" name="footnote17sym">17</a> "Digital Image Processing with NIH Image (Mac) / Scion Image (PC) / ImageJ" by David S. Bright, National Institute of Standards and Technology, May 2004 available at http://www.nist.gov/lispix/imlab/labs.html
        </p>
      </div>
      <div id="footnote18">
        <p class="footnote">
          <a class="footnotesym" href="#footnote18anc" id="footnote18sym" name="footnote18sym">18</a> <em>Scalable Vector Graphics (SVG) 1.1</em> Specification W3C Recommendation 14 January 2003; <em>Chapter 15</em> <em>Filter Effects</em>, at http://www.w3.org/TR/SVG/filters.html
        </p>
      </div>
      <div id="footnote19">
        <p class="footnote">
          <a class="footnotesym" href="#footnote19anc" id="footnote19sym" name="footnote19sym">19</a> <em>Scalable Vector Graphics (SVG) 1.1</em> Specification W3C Recommendation 14 January 2003; <em>Chapter 15</em> <em>Filter Effects</em>, at http://www.w3.org/TR/SVG/filters.html
        </p>
      </div>
      <div id="footnote20">
        <p>
          <a class="footnotesym" href="#footnote20anc" id="footnote20sym" name="footnote20sym">20</a> Should we wish for the layers to be combined not only concurrently, but also within the same layer, then we may consider either feBlend or feComposite, which offer richer ranges of possibilities.
        </p>
      </div>
      <div id="footnote21">
        <p>
          <a class="footnotesym" href="#footnote21anc" id="footnote21sym" name="footnote21sym">21</a> In the above example, the statement in="SourceGraphic"can be removed without changing the results.
        </p>
      </div>
      <div id="footnote22">
        <p class="footnote">
          <a class="footnotesym" href="#footnote22anc" id="footnote22sym" name="footnote22sym">22</a> Synchronized Multimedia Integration Language (SMIL) 1.0 Specification W3C Recommendation 15-June-1998, available at http://www.w3.org/TR/REC-smil/.
        </p>
      </div>
      <div id="footnote23">
        <p class="footnote">
          <a class="footnotesym" href="#footnote23anc" id="footnote23sym" name="footnote23sym">23</a> Synchronized Multimedia Activity Statement, May 2006, Thierry Michel, Synchronized Multimedia Activity Lead (W3C), available at http://www.w3.org/AudioVideo/Activity.html,
        </p>
      </div>
      <div id="footnote24">
        <p class="footnote">
          <a class="footnotesym" href="#footnote24anc" id="footnote24sym" name="footnote24sym">24</a> The reader may be pleased to know that the author has taken some effort to present only the best stuff. You need only to worry about things that might be useful to a typical developer. On the other hand, a reader already experienced with SMIL may be annoyed that some favorite things aren't mentioned. But then this chapter wasn't written for such a reader was it?
        </p>
      </div>
      <div id="footnote25">
        <p class="footnote">
          <a class="footnotesym" href="#footnote25anc" id="footnote25sym" name="footnote25sym">25</a> SMIL 2.0: Interactive Multimedia for Web and Mobile Devices; (X.media.publishing) Dick C.A. Bulterman, Lloyd Rutledge, Springer-Verlag, Berlin, Heidelberg, 2004.
        </p>
      </div>
      <div id="footnote26">
        <p>
          <a class="footnotesym" href="#footnote26anc" id="footnote26sym" name="footnote26sym">26</a> Observe the difference between a diagonal line drawn on a screen versus one printed on high-resolution printer. The printer, with far greater dpi is able to eliminate any stairstep effects simply trough spatial resolution. The monitor, with rather grainy spatial resolution (100 dpi or so) relies on anti-aliasing (the offsetting of well-placed intermediate color values) into tricking the eye into not seeing the relatively large pixels.
        </p>
      </div>
      <div id="footnote27">
        <p>
          <a class="footnotesym" href="#footnote27anc" id="footnote27sym" name="footnote27sym">27</a>Also it is not claimed that the JavaScript code offered here is the shortest or most effect possible approach. I passed a long argument list into the timing function to avoid the use of several global variables, and I am not sure if this is as effective time-wise, because of the associated string concatenation. It also could be rewritten without any global variables, though the repeated redefinition of the SVG document every 10 milliseconds and the location of the &lt;ellipse&gt; within it is likely to slow things down a good deal (at least so I suspect, somewhat superstitiously). However, the results are similar to what one is likely to see even if the JavaScript is written a bit differently. The presentation is made to give the reader a sense of why SMIL is nice.
        </p>
      </div>
      <div id="footnote28">
        <p>
          <a class="footnotesym" href="#footnote28anc" id="footnote28sym" name="footnote28sym">28</a>For example, (see <a href="http://srufaculty.sru.edu/david.dailey/svg/cliprotate.svg">http://srufaculty.sru.edu/david.dailey/svg/cliprotate.svg</a> and <a href="http://marble.sru.edu/%7Eddailey/svg/embedrotate.html">http://marble.sru.edu/~ddailey/svg/embedrotate.html</a> ) in the case of rotating an &lt;image&gt; one direction and its &lt;clipPath&gt; the opposite direction, the JavaScript animation appears slightly smoother than the SMIL approach.
        </p>
      </div>
      <div id="footnote29">
        <p class="footnote">
          <a class="footnotesym" href="#footnote29anc" id="footnote29sym" name="footnote29sym">29</a> A comparative analysis of some considerations for browser performance in SVG. David Dailey, In Proceedings of the 5th Annual Conference, SVGOpen Tokyo W3C and SVG Working Group Fall 2007. Seen at <a href="http://svgopen.org/2007/papers/BrowserPerformanceMeasures/index.html">http://svgopen.org/2007/papers/BrowserPerformanceMeasures/index.html</a>
        </p>
      </div>
      <div id="footnote30">
        <p class="footnote">
          <a class="footnotesym" href="#footnote30anc" id="footnote30sym" name="footnote30sym">30</a> I assume moments to be infinitesimal, the objections of those rare mathematicians who consider themselves to be intuitionists, notwithstanding.
        </p>
      </div>
      <div id="footnote31">
        <p class="footnote">
          <a class="footnotesym" href="#footnote31anc" id="footnote31sym" name="footnote31sym">31</a> "Timing and real world clock times" in SMIL Animation, W3C Recommendation September 4, 2001., available at http://www.w3.org/TR/2001/REC-smil-animation-20010904/#TimingAndRealWorldClockTime.
        </p>
      </div>
      <div id="footnote32">
        <p class="footnote">
          <a class="footnotesym" href="#footnote32anc" id="footnote32sym" name="footnote32sym">32</a> And on doing so, one generally gets the feeling that "of course, you would not expect to animate that!"
        </p>
      </div>
      <div id="footnote33">
        <p>
          <a class="footnotesym" href="#footnote33anc" id="footnote33sym" name="footnote33sym">33</a>This can sometimes lead to unanticipated results, but we will revisit the issue again when we talk about starting and stopping animations.
        </p>
      </div>
      <div id="footnote34">
        <p class="footnote">
          <a class="footnotesym" href="#footnote34anc" id="footnote34sym" name="footnote34sym">34</a> In the years 1988 to 1992 or so, before NCSA Mosaic convinced everyone that HTML was viable, the University of Minnesota had unleashed a wildly popular internet protocol known as gopher. Within a year of its introduction every major university and research lab in the world, the majority of major libraries, and even a few companies (the corporate sector is generally notorious for being slow-moving when it comes to innovation) had gopher sites.
        </p>
      </div>
      <div id="footnote35">
        <p>
          <a class="footnotesym" href="#footnote35anc" id="footnote35sym" name="footnote35sym">35</a>There is, of course, the null solution of never starting it in the first place.
        </p>
      </div>
      <div id="footnote36">
        <p>
          <a class="footnotesym" href="#footnote36anc" id="footnote36sym" name="footnote36sym">36</a> If we can define <em>specifically</em>the process involved in, for example, "thinking," then we may program a computer to "think." The trick, as it turns out, is that pinning down just what is involved in thinking ends up being so formidable a task that no one has yet succeeded in doing it with the precision required by a program.
        </p>
      </div>
      <div id="footnote37">
        <p class="footnote">
          <a class="footnotesym" href="#footnote37anc" id="footnote37sym" name="footnote37sym">37</a> I believe it was Edward Tufte who remarked how very odd it was that only two professions referred to customers as <em>users</em>: computer scientists and drug dealers. Some would prefer the term <em>visitors</em>. (See <a href="http://www.peterme.com/archives/000467.html">http://www.peterme.com/archives/000467.html</a> for corroboration of my suspicion that the observation is due to Tufte.)
        </p>
      </div>
      <div id="footnote38">
        <p class="footnote">
          <a class="footnotesym" href="#footnote38anc" id="footnote38sym" name="footnote38sym">38</a> An "alert box" is a message that appears based on the JavaScript function alert(string). The message appears as text inside a rectangle with an "ok" button also inside the rectangle.
        </p>
      </div>
      <div id="footnote39">
        <p>
          <a class="footnotesym" href="#footnote39anc" id="footnote39sym" name="footnote39sym">39</a> This is much like (in the early days of HTML) how we used the &lt;head&gt; of an HTML document as a place to hide our scripts from the primitive browsers. Perhaps as XML matures, and its parents have a chance to mellow out during its adolescence, the hoopla and ceremony involved in hiding our scripts from the children, may become relaxed a wee bit.
        </p>
      </div>
      <div id="footnote40">
        <p>
          <a class="footnotesym" href="#footnote40anc" id="footnote40sym" name="footnote40sym">40</a> For discovering which objects are in an SVG document, that is, for exploring nodes whose identity is unknown, see the section on "XML and the SVG DOM" later in this chapter.
        </p>
      </div>
      <div id="footnote41">
        <p class="footnote">
          <a class="footnotesym" href="#footnote41anc" id="footnote41sym" name="footnote41sym">41</a> Actually, as shown, shortly we will use getAttributeNS rather than getAttribute, since the former is name-space aware and is likely to be more robust in more complex contexts (such as documents with multiple XML languages in them).
        </p>
      </div>
      <div id="footnote42">
        <p class="footnote">
          <a class="footnotesym" href="#footnote42anc" id="footnote42sym" name="footnote42sym">42</a> The term "deprecated" is used to refer to features which are no longer supported, but not yet obsolete. It is assumed that future versions of software may cease to support such features.
        </p>
      </div>
      <div id="footnote43">
        <p class="footnote">
          <a class="footnotesym" href="#footnote43anc" id="footnote43sym" name="footnote43sym">43</a> Oftentimes authors will use the variable SVGRoot to refer to document.documentElement.
        </p>
      </div>
      <div id="footnote44">
        <p class="footnote">
          <a class="footnotesym" href="#footnote44anc" id="footnote44sym" name="footnote44sym">44</a> As pointed out in the JavaScript Appendix, innerHTML is not standards-compliant even within HTML, despite being quite handy and generally more universal than many things that are standards-compliant.
        </p>
      </div>
      <div id="footnote45">
        <p class="footnote">
          <a class="footnotesym" href="#footnote45anc" id="footnote45sym" name="footnote45sym">45</a> See "<em>Dragging and dropping an ellipse"</em> in the section on setAttributeNS.
        </p>
      </div>
      <div id="footnote46">
        <p class="footnote">
          <a class="footnotesym" href="#footnote46anc" id="footnote46sym" name="footnote46sym">46</a> I should note that I have probably written drag and drop code for SVG a score of different times. It always turns out a little different, and probably will the next time I write code for this again.
        </p>
      </div>
      <div id="footnote47">
        <p>
          <a class="footnotesym" href="#footnote47anc" id="footnote47sym" name="footnote47sym">47</a>The tricks are somewhat similar to the use of the with statement in JavaScript: purely done to save keystrokes
        </p>
      </div>
      <div id="footnote48">
        <p class="footnote">
          <a class="footnotesym" href="#footnote48anc" id="footnote48sym" name="footnote48sym">48</a> One of the most powerful and promising of ways to traverse and explore XML documents is provided by XPATH &mdash; another W3C recommendation. Unfortunately, XPATH is not supported, without substantial histrionic effort in Internet Explorer at the current time. This topic is revisited in the final chapter of this book.
        </p>
      </div>
      <div id="footnote49">
        <p class="footnote">
          <a class="footnotesym" href="#footnote49anc" id="footnote49sym" name="footnote49sym">49</a> Although there are conceivable exceptions, for example, with &lt;svg&gt; tags nested inside &lt;svg&gt; tags.
        </p>
      </div>
      <div id="footnote50">
        <p>
          <a class="footnotesym" href="#footnote50anc" id="footnote50sym" name="footnote50sym">50</a> Accordingly, we might display C3.nodevalue, to see the content of that string, and we will see precisely this:
        </p>
        <pre>
<code class="line"><br />var xmlns="http://www.w3.org/2000/svg"<br />var Root=document.documentElement<br />function startup(){<br />C1=document.firstChild<br />s=C1.nodeName<br />C2=C1.firstChild<br />s+=C2.nodeName<br />C3=C2.firstChild<br />s+=C3.nodeName<br />alert(s)<br />alert(C3.nodeValue)<br />}<br /></code>
</pre>
        <p>
          That is, the nodeValue of the CDATA consists of all characters between the innermost square braces defining the CDATA.
        </p>
      </div>
      <div id="footnote51">
        <p class="footnote">
          <a class="footnotesym" href="#footnote51anc" id="footnote51sym" name="footnote51sym">51</a> By white space, we mean any nonempty sequence of space characters, tabs and returns.
        </p>
      </div>
      <div id="footnote52">
        <p class="footnote">
          <a class="footnotesym" href="#footnote52anc" id="footnote52sym" name="footnote52sym">52</a> It is 8:00 pm, parents, do you know where your children are?
        </p>
      </div>
      <div id="footnote53">
        <p class="footnote">
          <a class="footnotesym" href="#footnote53anc" id="footnote53sym" name="footnote53sym">53</a> Excerpted from Scalable Vector Graphics (SVG) 1.1 Specification W3C Recommendation 14 January 2003 (<a href="http://www.w3.org/TR/SVG/">http://www.w3.org/TR/SVG/</a>) Copyright ¬© 2002 <a href="http://www.w3.org/">World Wide Web Consortium</a>, (<a href="http://www.lcs.mit.edu/">Massachusetts Institute of Technology</a>, <a href="http://www.inria.fr/">Institut National de Recherche en Informatique et en Automatique</a>, <a href="http://www.keio.ac.jp/">Keio University</a>). All Rights Reserved.
        </p>
      </div>
      <div id="footnote54">
        <p class="footnote">
          <a class="footnotesym" href="#footnote54anc" id="footnote54sym" name="footnote54sym">54</a> In addition to the W3C's discussion of getCTM, the reader is also referred to Wikipedia's excellent treatment at http://en.wikipedia.org/wiki/Rasterisation.
        </p>
      </div>
      <div id="footnote55">
        <p class="footnote">
          <a class="footnotesym" href="#footnote55anc" id="footnote55sym" name="footnote55sym">55</a> This is not a bad thing any more than the mass of the Sun (and hence its inertia) is bad. Rather, the Sun's mass makes it a good candidate for putting planets in orbit about it.
        </p>
      </div>
      <div id="footnote56">
        <p class="footnote">
          <a class="footnotesym" href="#footnote56anc" id="footnote56sym" name="footnote56sym">56</a> DOM stands for Document Object Model, namely, the hierarchy of objects in an HTML document, but it also has come to refer to a collection of methods for modifying the content of web pages through traversal of that hierarchy.
        </p>
      </div>
      <div id="footnote57">
        <p class="footnote">
          <a class="footnotesym" href="#footnote57anc" id="footnote57sym" name="footnote57sym">57</a> Web Authoring Statistics from Google.com December 2005, as seen under "scripting" at http://code.google.com/webstats/index.html.
        </p>
      </div>
      <div id="footnote58">
        <p>
          <a class="footnotesym" href="#footnote58anc" id="footnote58sym" name="footnote58sym">58</a> It is perhaps a funny concept to a typical SVG developer: the idea of putting one's carefully crafted SVG picture and smushing its pieces into the cells of a pseudo-table. In fact, many HTML developers these days have acted as though the HTML table is somehow pass&eacute;, because, no doubt, of the increased interest in precise control (like one expects from SVG) over the minutia of layout. Hence the notion of building &lt;table&gt; elements into SVG may seem like a step backwards. Having taught a senior level course called Interface Design in a computer science department which uses SVG however, I would have to disagree with this notion. The value of the &lt;table&gt; in mocking up control panels for testing user interfaces is very valuable indeed, and I suspect if those who built web pages for a living did more coding, or if those who did more coding paid more attention to interface, then more people might agree with me.
        </p>
      </div>
      <div id="footnote59">
        <p class="footnote">
          <a class="footnotesym" href="#footnote59anc" id="footnote59sym" name="footnote59sym">59</a> "In ergonomics, Fitts' law is a model of human movement, predicting the time required to rapidly move from a starting position to a final target area, as a function of the distance to the target and the size of the target. Fitts' law is used to model the act of pointing, both in the real world, for example, with a hand or finger and on computers, for example, with a mouse. It was published by Paul Fitts in 1954." &mdash; From Wikipedia Dec. 2006, at http://en.wikipedia.org/wiki/Fitts'_law.
        </p>
      </div>
      <div id="footnote60">
        <p class="footnote">
          <a class="footnotesym" href="#footnote60anc" id="footnote60sym" name="footnote60sym">60</a> Not that the middle ages were completely bad, mind you, but one who is accustomed to air travel finds the oxcart a little slow.
        </p>
      </div>
      <div id="footnote61">
        <p class="footnote">
          <a class="footnotesym" href="#footnote61anc" id="footnote61sym" name="footnote61sym">61</a> See "SVG Textbox, Version 1.1.2, 2006-10-04", by Olaf Schnabel, Volker Gersabeck, David Boyd, Andr&eacute; M. Winter &amp; Andreas Neumann. in <em>Carto:Net</em> at http://www.carto.net/papers/svg/gui/textbox/
        </p>
      </div>
      <div id="footnote62">
        <p class="footnote">
          <a class="footnotesym" href="#footnote62anc" id="footnote62sym" name="footnote62sym">62</a> Scalable Vector Graphics, Adobe Systems Incorporated, December 2006, at http://www.adobe.com/svg/viewer/install/.
        </p>
      </div>
      <div id="footnote63">
        <p>
          <a class="footnotesym" href="#footnote63anc" id="footnote63sym" name="footnote63sym">63</a>It may be observed that the above approach will work with documents served within a LAN. As soon as the domain changes, that is when the scripting becomes disabled. This topic will be revisited briefly in the concluding chapter on "Future Directions."
        </p>
      </div>
      <div id="footnote64">
        <p>
          <a class="footnotesym" href="#footnote64anc" id="footnote64sym" name="footnote64sym">64</a>For a more thorough treatment of the subject I recommend the treatment here: SVG Wiki 26 July 2006, http://wiki.svg.org/Inline_SVG.
        </p>
      </div>
      <div id="footnote65">
        <p class="footnote">
          <a class="footnotesym" href="#footnote65anc" id="footnote65sym" name="footnote65sym">65</a> Clearly this idea of semantic proximity of two texts is painfully simplistic, but the reader may fill in her favorite algorithms for calculating semantic proximity and if the two nodes distance is less than an acceptable threshold according to that, then we may join them.
        </p>
      </div>
      <div id="footnote66">
        <p class="footnote">
          <a class="footnotesym" href="#footnote66anc" id="footnote66sym" name="footnote66sym">66</a> Having had only one environment in which to test my code, I had not paid nearly as much attention to standards as I should have.
        </p>
      </div>
      <div id="footnote67">
        <p>
          <a class="footnotesym" href="#footnote67anc" id="footnote67sym" name="footnote67sym">67</a> I was lecturing about how something like Google was coming before its inventors were even born, and I did have the good sense to abandon my early efforts on GUI development when the Macintosh came out (I had been building a GUI Paint program for DOS in those days). As early as 1980, I had phoned people at Kodak and Texas Instruments and Disney to tell them they might want to invest in development of digital cameras and computer based animation (none of them were interested at that time) and to tell Safeway its customer transactions from its newfangled product scanners might have some data that would be valuable for consumer research: "nope &mdash; we only use it for inventory control." Funny how playing the game Enterprise on the international Plato network in the 1970's in grad school (I logged in as a member of the Federation starfleet and was third ranked in the nation ) can get one thinking about the future.
        </p>
      </div>
      <div id="footnote68">
        <p class="footnote">
          <a class="footnotesym" href="#footnote68anc" id="footnote68sym" name="footnote68sym">68</a> By this I mean all those funny little gadgets that the people on the TV show 24 carry around.
        </p>
      </div>
      <div id="footnote69">
        <p class="footnote">
          <a class="footnotesym" href="#footnote69anc" id="footnote69sym" name="footnote69sym">69</a> Wherefore art thou, SVG? Kurt Cagle, Sunday September 10, 2006 1:56PM in <em>Opinion</em>, eds. O'Reilly at <a href="http://www.oreillynet.com/xml/blog/2006/09/wherefore_art_thou_svg.html">http://www.oreillynet.com/xml/blog/2006/09/wherefore_art_thou_svg.html</a>.
        </p>
      </div>
      <div id="footnote70">
        <p class="footnote">
          <a class="footnotesym" href="#footnote70anc" id="footnote70sym" name="footnote70sym">70</a> Scalable Vector Graphics (SVG) Tiny 1.2 Specification W3C Candidate Recommendation 10 August 2006.
        </p>
      </div>
      <div id="footnote71">
        <p class="footnote">
          <a class="footnotesym" href="#footnote71anc" id="footnote71sym" name="footnote71sym">71</a> <em>Scalable Vector Graphics (SVG) Full 1.2 Specification W3C Working Draft 13 April 2005</em>,Editors: Dean Jackson and Craig Northway, W3C, visible at http://www.w3.org/TR/SVG12/
        </p>
      </div>
      <div id="footnote72">
        <p class="footnote">
          <a class="footnotesym" href="#footnote72anc" id="footnote72sym" name="footnote72sym">72</a> I've been looking at the document intermittently since its early versions in 2004 and will confess to not having a complete grasp of several of its parts.
        </p>
      </div>
      <div id="footnote73">
        <p class="footnote">
          <a class="footnotesym" href="#footnote73anc" id="footnote73sym" name="footnote73sym">73</a> Designing SVG Web Graphics by Andrew H. Watt New Riders Press; 1st edition (September 15, 2001)
        </p>
      </div>
      <div id="footnote74">
        <p class="footnote">
          <a class="footnotesym" href="#footnote74anc" id="footnote74sym" name="footnote74sym">74</a> I was an untenured associate professor of computer science teaching user-interface and client and server-side web development at the undergraduate level.
        </p>
      </div>
      <div id="footnote75">
        <p class="footnote">
          <a class="footnotesym" href="#footnote75anc" id="footnote75sym" name="footnote75sym">75</a> Another bit of foresight on my part: I had always told my students not to develop content that needed plug-ins, since people don't take the time to install them. Shortly thereafter the need to download plug-ins for Flash disappeared, and I was making content that required plug-ins.
        </p>
      </div>
      <div id="footnote76">
        <p class="footnote">
          <a class="footnotesym" href="#footnote76anc" id="footnote76sym" name="footnote76sym">76</a> I find that the draft recommendations can be a bit difficult to digest at times, absent the test suites that show how things are supposed to look.
        </p>
      </div>
      <div id="footnote77">
        <p class="footnote">
          <a class="footnotesym" href="#footnote77anc" id="footnote77sym" name="footnote77sym">77</a> <em>SVG Text, Semantics, and Accessibility</em> by Doug Schepers, November 7th, 2006; available at http://schepers.cc/?p=11.
        </p>
      </div>
      <div id="footnote78">
        <p class="footnote">
          <a class="footnotesym" href="#footnote78anc" id="footnote78sym" name="footnote78sym">78</a> <em>The Semantic Web Roadmap</em> by Tim Berners-Lee Date: September 1998; available at http://www.w3.org/DesignIssues/Semantic.html
        </p>
      </div>
      <div id="footnote79">
        <p class="footnote">
          <a class="footnotesym" href="#footnote79anc" id="footnote79sym" name="footnote79sym">79</a> <em>What the Semantic Web can Represent</em> by Tim Berners-Lee Date: September 1998; available at http://www.w3.org/DesignIssues/RDFnot.html
        </p>
      </div>
      <div id="footnote80">
        <p class="footnote">
          <a class="footnotesym" href="#footnote80anc" id="footnote80sym" name="footnote80sym">80</a> Minsky is a prime architect of Knowledge Representation through his pioneering work in Artificial Intelligence, and Nelson is the inventor of the term "Hypertext."
        </p>
      </div>
      <div id="footnote81">
        <p class="footnote">
          <a class="footnotesym" href="#footnote81anc" id="footnote81sym" name="footnote81sym">81</a> <em>SVG and XForms: A primer</em>, by Antoine Quint, November 2003, available at http://www-128.ibm.com/developerworks/xml/library/x-svgxf1.html.
        </p>
      </div>
      <div id="footnote82">
        <p class="footnote">
          <a class="footnotesym" href="#footnote82anc" id="footnote82sym" name="footnote82sym">82</a> "G.3 Survey Using XForms and SVG": in <em>XForms 1.0 (Second Edition) W3C Recommendation 14 March 2006</em>; available at http://www.w3.org/TR/xforms/sliceG.html.
        </p>
      </div>
      <div id="footnote83">
        <p class="footnote">
          <a class="footnotesym" href="#footnote83anc" id="footnote83sym" name="footnote83sym">83</a> All in all, UNIX shell requires very little magic hoopla. On the one end of the spectrum PHP requires a minimal amount "&lt;?" and "?"; while at the other end of the spectrum, server-side Java seems to require six pages of incantation with three semesters of practice.
        </p>
      </div>
      <div id="footnote84">
        <p class="footnote">
          <a class="footnotesym" href="#footnote84anc" id="footnote84sym" name="footnote84sym">84</a> <em>SVG's XML Binding Language (sXBL); W3C Working Draft</em> 15 August 2005 available at http://www.w3.org/TR/sXBL/.
        </p>
      </div>
      <div id="footnote85">
        <p class="footnote">
          <a class="footnotesym" href="#footnote85anc" id="footnote85sym" name="footnote85sym">85</a> <em>RDF Primer</em> &mdash; W3C Recommendation 10 February 2004, available at http://www.w3.org/TR/rdf-primer/.
        </p>
      </div>
      <div id="footnote86">
        <p class="footnote">
          <a class="footnotesym" href="#footnote86anc" id="footnote86sym" name="footnote86sym">86</a> W3C HTML Working Group, available at http://www.w3.org/html/wg/.
        </p>
      </div>
      <div id="footnote87">
        <p class="footnote">
          <a class="footnotesym" href="#footnote87anc" id="footnote87sym" name="footnote87sym">87</a> A Statistical Approach to Mechanized Encoding and Searching of Literary Information, Luhn HY. (1957). <em>IBM Journal of Research and Development</em>, 1(4), 309-317.
        </p>
      </div>
      <div id="footnote88">
        <p class="footnote">
          <a class="footnotesym" href="#footnote88anc" id="footnote88sym" name="footnote88sym">88</a> "Timelines: Turing maturing: the separation of artificial intelligence and human-computer interaction" Jonathan Grudin ACM: interactions Volume 13, Number 5 (2006), Pages 54-57.
        </p>
      </div>
      <div id="footnote89">
        <p class="footnote">
          <a class="footnotesym" href="#footnote89anc" id="footnote89sym" name="footnote89sym">89</a> "Google side-steps AI rumours" by Andrew Donoghue ZDNet UK Published: 15 Nov 2005. available at http://news.zdnet.co.uk/software/0,1000000121,39237225,00.htm
        </p>
      </div>
      <div id="footnote90">
        <p class="footnote">
          <a class="footnotesym" href="#footnote90anc" id="footnote90sym" name="footnote90sym">90</a> "The Extraction of a Minimum Set of Semantic Primitives from a Monolingual Dictionary is NP-Complete," David P. Dailey, <em>Computational Linguistics</em>, volume 12, Issue 4 (October-December 1986) MIT Press. Reprinted in <em>Readings in the Lexicon</em>, ed. Yorick Wilks, MIT Press, in press.
        </p>
      </div>
      <div id="footnote91">
        <p class="footnote">
          <a class="footnotesym" href="#footnote91anc" id="footnote91sym" name="footnote91sym">91</a> What does SVG need? was [Is Adobe abandoning SVG?] &mdash;David Dailey Friday, December 16, 2005 11:02 AM &mdash; on svg-developers@yahoogroups.com.
        </p>
      </div>
      <div id="footnote92">
        <p class="footnote">
          <a class="footnotesym" href="#footnote92anc" id="footnote92sym" name="footnote92sym">92</a> See, for example, HTML &amp; XHTML: The Definitive Guide by Chuck Musciano and Bill Kennedy O'Reilly Media; 6 edition (2006) and Web Wizard's Guide to HTML by Wendy Lehnert, Prentice Hall; 2001.
        </p>
      </div>
      <div id="footnote93">
        <p>
          <a class="footnotesym" href="#footnote93anc" id="footnote93sym" name="footnote93sym">93</a>There are some exceptions: a few tags like &lt;br&gt; and &lt;img&gt; do not require end tags (though this luxury may disappear in XHTML), but generally a tag requires an ending tag.
        </p>
      </div>
      <div id="footnote94">
        <p>
          <a class="footnotesym" href="#footnote94anc" id="footnote94sym" name="footnote94sym">94</a> The World Wide Web Consortium recommends the following for documents which might intermingle SVG and HTML (or the more formal XHTML).
        </p><code class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd"&gt;</code>
      </div>
      <div id="footnote95">
        <p>
          <a class="footnotesym" href="#footnote95anc" id="footnote95sym" name="footnote95sym">95</a> That is, the grammar error is not too bad for HTML to understand it, though the more high-brow XHTML will feign ignorance in the presence of such abomination.
        </p>
      </div>
      <div id="footnote96">
        <p class="footnote">
          <a class="footnotesym" href="#footnote96anc" id="footnote96sym" name="footnote96sym">96</a> http://www.w3.org/TR/html4/interact/forms.html
        </p>
      </div>
      <div id="footnote97">
        <p class="footnote">
          <a class="footnotesym" href="#footnote97anc" id="footnote97sym" name="footnote97sym">97</a> See http://wiki.svg.org/SVG_and_HTML
        </p>
      </div>
      <div id="footnote98">
        <p>
          <a class="footnotesym" href="#footnote98anc" id="footnote98sym" name="footnote98sym">98</a> Extrapolating from Google's data to the more than eleven billion sites currently estimated to be on the web, we can surmise that about 5.5 billion JavaScript programs are currently in use by the world's 6.5 billion people (estimated for July 1 2006 by the US Census Bureau at <a href="http://www.census.gov/ipc/www/popclockworld.html">http://www.census.gov/ipc/www/popclockworld.html</a>). The US Department of Labor estimates, as of 2004, (see <a href="http://www.bls.gov/oco/ocos110.htm">http://www.bls.gov/oco/ocos110.htm</a>) that about 450,000 programmers were employed in the United States. Given that traditional application and operating systems programming projects consume more than one thousand person-years of effort, our 10<sup>6</sup> programmers over the fifty years from 1956 to 2006, having careers typically less than 50 years apiece, we might estimate the number of large scale programs written in that time at fewer than 50,000 for all languages combined. We might assume some 25% of that workforce was engaged in creating small programs at a rate of 10 per year for another 2.5 million programs.
        </p>
      </div>
      <div id="footnote99">
        <p class="footnote">
          <a class="footnotesym" href="#footnote99anc" id="footnote99sym" name="footnote99sym">99</a> The argument is intended to be provocative out of fun, rather than seriousness. This is an appendix, after all.
        </p>
      </div>
      <div id="footnote100">
        <p class="footnote">
          <a class="footnotesym" href="#footnote100anc" id="footnote100sym" name="footnote100sym">100</a> <em>TIOBE Programming Community Index for February 2007</em> &mdash; http://www.tiobe.com/tpci.htm
        </p>
        <p class="footnote">
          "The ratings are based on the world-wide availability of skilled engineers, courses and third party vendors."
        </p>
      </div>
      <div id="footnote101">
        <p class="footnote">
          <a class="footnotesym" href="#footnote101anc" id="footnote101sym" name="footnote101sym">101</a> Steve Champion. JavaScript: <em>How did we get here</em> <a href="http://www.oreillynet.com/pub/a/javascript/2001/04/06/js_history.html">http://www.oreillynet.com/pub/a/javascript/2001/04/06/js_history.html</a>, 2001.
        </p>
      </div>
      <div id="footnote102">
        <p class="footnote">
          <a class="footnotesym" href="#footnote102anc" id="footnote102sym" name="footnote102sym">102</a> Douglas Crawford "JavaScript:The World's Most Misunderstood Programming Language" <a href="http://www.crockford.com/javascript/javascript.html">http://www.crockford.com/javascript/javascript.html</a>, 2001.
        </p>
      </div>
      <div id="footnote103">
        <p class="footnote">
          <a class="footnotesym" href="#footnote103anc" id="footnote103sym" name="footnote103sym">103</a> at least from my own experiences over the past 35 years with Fortran, Pascal, cT, C, C++, Hypertalk, Java, Perl, PHP, UNIX shell, and a few others I've forgotten about.
        </p>
      </div>
      <div id="footnote104">
        <p class="footnote">
          <a class="footnotesym" href="#footnote104anc" id="footnote104sym" name="footnote104sym">104</a> <em>JavaScript: The Complete Reference</em>, second edition, by Thomas Powell and Fritz Schneider,&nbsp;McGraw-Hill/Osborne, ISBN:&nbsp;0072253576).
        </p>
      </div>
      <div id="footnote105">
        <p class="footnote">
          <a class="footnotesym" href="#footnote105anc" id="footnote105sym" name="footnote105sym">105</a> I have played with a few techniques involving multiple frames that show good promise, and I have had students who have suggested approaches which appear promising, though, some experts in the field seem willing to conclude that it cannot truly be done. Placing scripts in a hidden iframe which refuses to let (self==top) is the best I've done to date, but this seems overridable by interrupting the script which checks to see if self is the same as top before it loads.
        </p>
      </div>
      <div id="footnote106">
        <p class="footnote">
          <a class="footnotesym" href="#footnote106anc" id="footnote106sym" name="footnote106sym">106</a> For those unfamiliar with regular expressions, do not despair. Their use is relatively specialized and while your life may better if you learn about them, happiness can still be attained without them.
        </p>
      </div>
      <div id="footnote107">
        <p class="footnote">
          <a class="footnotesym" href="#footnote107anc" id="footnote107sym" name="footnote107sym">107</a> We might get along perfectly well in some anthropological prelinguistic nuclear family without abstract references (names) for our family members, simply by pointing to whomever we wish to instantiate, command, or praise. But so long as we wish to refer to something or someone who is not immediately visible, names (or their functional equivalents) come in rather handy.
        </p>
      </div>
      <div id="footnote108">
        <p class="footnote">
          <a class="footnotesym" href="#footnote108anc" id="footnote108sym" name="footnote108sym">108</a> See more on programming modularity under <em>functions</em> (below).
        </p>
      </div>
      <div id="footnote109">
        <p class="footnote">
          <a class="footnotesym" href="#footnote109anc" id="footnote109sym" name="footnote109sym">109</a> DOM: document.documentElement by Mozilla Developer Center (Beta), April 2006, at http://developer.mozilla.org/en/docs/DOM:document.documentElement
        </p>
      </div>
      <div id="footnote110">
        <p class="footnote">
          <a class="footnotesym" href="#footnote110anc" id="footnote110sym" name="footnote110sym">110</a> since the methods associated with the two different DOM techniques are different, hence making the referents of those two objects different. See more on value vs reference in the section on objects, below.
        </p>
      </div>
      <div id="footnote111">
        <p>
          <a class="footnotesym" href="#footnote111anc" id="footnote111sym" name="footnote111sym">111</a> "A Brief History of JavaScript" in Adactio by Jeremy Keith, October 3rd, 2005, http://adactio.com/articles/1113/.
        </p>
      </div>
      <div id="footnote112">
        <p class="footnote">
          <a class="footnotesym" href="#footnote112anc" id="footnote112sym" name="footnote112sym">112</a> Personal conversation July 6, 2006.
        </p>
      </div>
      <div id="footnote113">
        <p>
          <a class="footnotesym" href="#footnote113anc" id="footnote113sym" name="footnote113sym">113</a> Clearly, this could also be done by using just a textarea, though what was desired here was a relatively simple, self-contained, but plausible page using document.write.
        </p>
      </div>
      <div id="footnote114">
        <p class="footnote">
          <a class="footnotesym" href="#footnote114anc" id="footnote114sym" name="footnote114sym">114</a> "The InnerHTML Dilemma" in <em>DOMScripting Blog</em> by Jeremy Keith, December 2005. Available at http://domscripting.com/blog/display/35.
        </p>
      </div>
      <div id="footnote115">
        <p class="footnote">
          <a class="footnotesym" href="#footnote115anc" id="footnote115sym" name="footnote115sym">115</a> "Benchmark - W3C DOM vs. innerHTML" in <em>QuirksMode</em> Peter Paul Koch, 2005, available at http://www.quirksmode.org/dom/innerhtml.html.
        </p>
      </div>
      <div id="footnote116">
        <p>
          <a class="footnotesym" href="#footnote116anc" id="footnote116sym" name="footnote116sym">116</a> If it appears that the examples here may use a few more variables and lines of script than necessary, this is true. It was done this way so everything could fit in the boxes, but while keeping the overall number of characters in the scripts about the same, in a relative sense.
        </p>
      </div>
    </div>
  </body>
</html>
